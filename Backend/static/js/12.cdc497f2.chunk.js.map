{"version":3,"sources":["src/components/RecipeList/RecipeListStyle.js","src/components/RecipeCover/RecipeCover.js"],"names":["recipeListStyle","StyleSheet","create","foodPicContainer","alignItems","foodPic","height","width","resizeMode","foodName","marginTop","marginBottom","fontWeight","padding","borderWidth","textAlign","RecipeCover","item","flexGrow","navigation","useNavigation","authCtx","useContext","CsrfCtx","useState","image","startsWith","uri","BACKEND","require","recipe","axios","post","id","headers","token","credentials","withCredentials","responseType","error","navigate","style","source","name","onPress","toRecipeInfo"],"mappings":"kJAEaA,E,KAAkBC,QAAWC,OACtC,CACIC,iBACA,CACIC,WAAY,UAEhBC,QACA,CACIC,OAAQ,IACRC,MAAO,OACPC,WAAY,WAGhBC,SACA,CACIC,UAAW,GACXC,aAAc,GACdC,WAAY,OACZC,QAAS,GACTC,YAAa,EACbC,UAAW,a,iNCKR,SAASC,EAAY,GAAoC,IAAlCC,EAAI,EAAJA,KAAMX,EAAM,EAANA,OAASC,EAAK,EAALA,MAAOW,EAAQ,EAARA,SAElDC,EAAaC,0BAChBC,EAAUC,qBAAWC,WAE3B,EAA0BC,oBAAS,WAC5B,MAAmB,KAAfP,EAAKQ,MACFR,EAAKQ,MACNC,WAAW,QAGd,CAAEC,IAAKV,EAAKQ,MAAOnB,OAAQ,OAAQC,MAAO,QAF1C,CAAEoB,IAAI,GAAIC,UAAUX,EAAKQ,MAASnB,OAAQ,OAAQC,MAAO,QAKjDsB,EAAQ,QAErB,WAXEJ,EAAK,KAAU,KAmBK,aAgB1B,OAhB0B,OAA3B,UAA4BK,GAC1B,UACOC,UAAMC,KACRJ,UAAO,wBACV,CAAEK,GAAIH,EAAOG,IACb,CACCC,QAAS,CACR,cAAeb,EAAQc,MACvBC,YAAa,WAEdC,iBAAiB,EACjBC,aAAc,SAGf,MAAOC,IACVpB,EAAWqB,SAAS,aAAc,CAAEP,GAAIH,EAAOG,SAC/C,sBAED,MAAgB,KAAZhB,EAAKgB,GAEP,eAAC,UAAI,CAAeQ,MAAO,CAAClC,MAAOA,EAAOD,OAAQA,EAAQY,SAAUA,GAAU,UAC7E,cAAC,UAAI,CAACuB,MAAOzC,kBAAgBG,iBAAiB,SAC7C,cAAC,UAAK,CACLsC,MAAOzC,kBAAgBK,QACvBqC,OAAQjB,MAGV,cAAC,UAAI,CAACgB,MAAOzC,kBAAgBS,SAAS,SAAEQ,EAAK0B,SAPnC1B,EAAKgB,IAYhB,eAAC,UAAS,CAETW,QAAS,kBA1CN,SAQsB,GAAD,+BAkCTC,CAAa5B,IAC5BwB,MAAO,CAAClC,MAAOA,EAAOD,OAAQA,EAAQY,SAAUA,GAAU,UAE1D,cAAC,UAAI,CAACuB,MAAOzC,kBAAgBG,iBAAiB,SAC7C,cAAC,UAAK,CACLsC,MAAOzC,kBAAgBK,QACvBqC,OAAQjB,MAGV,cAAC,UAAI,CAACgB,MAAOzC,kBAAgBS,SAAS,SAAEQ,EAAK0B,SAVxC1B,EAAKgB","file":"static/js/12.cdc497f2.chunk.js","sourcesContent":["import { StyleSheet } from \"react-native\";\r\n\r\nexport const recipeListStyle = StyleSheet.create(\r\n    {\r\n        foodPicContainer:\r\n        {\r\n            alignItems: \"center\"\r\n        },\r\n        foodPic:\r\n        {\r\n            height: 200,\r\n            width: \"100%\",\r\n            resizeMode: \"contain\"\r\n        },\r\n\r\n        foodName:\r\n        {\r\n            marginTop: 20,\r\n            marginBottom: 20,\r\n            fontWeight: \"bold\",\r\n            padding: 10,\r\n            borderWidth: 1,\r\n            textAlign: \"center\"\r\n        }\r\n    });\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport axios from \"axios\";\r\nimport { useContext, useState } from \"react\";\r\nimport { Image, Pressable, Text, View } from \"react-native\";\r\nimport { CsrfCtx } from \"../../context/CsrfToken\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\nimport { recipeListStyle } from \"../RecipeList/RecipeListStyle\";\r\n\r\n/**\r\n * Renders a recipe with in image and name\r\n *\r\n * @typedef {{\r\n *  \tid: string,\r\n * \t\tname: string,\r\n *  \timage: string,\r\n *  \tingredients: Array<string>,\r\n * \t\tsource: string\r\n * \t}} recipe\r\n *\r\n * @param {{\r\n *      item: recipe,\r\n * \t\theight: number | string,\r\n * \t\twidth: number | string,\r\n * \t\tflexGrow?: number\r\n * }} prop\r\n * @returns A recipe with image and name\r\n */\r\nexport default function RecipeCover({ item, height,  width, flexGrow}) {\r\n\r\n    const navigation = useNavigation();\r\n\tconst authCtx = useContext(CsrfCtx);\r\n\r\n\tconst [image, setImage] = useState(() => {\r\n        if (item.image !== \"\") {\r\n\t\t\tlet image = item.image;\r\n\t\t\tif (!image.startsWith(\"http\")) {\r\n\t\t\t\treturn { uri: `${BACKEND}${item.image}`, height: \"100%\", width: \"100%\" };\r\n\t\t\t} else {\r\n\t\t\t\treturn { uri: item.image, height: \"100%\", width: \"100%\" };\r\n\t\t\t}\r\n        } else {\r\n            return require(\"../../../assets/favicon.png\");\r\n        }\r\n    });\r\n\r\n    /**\r\n\t * Adds going to be viewed recipe in recents for the logged in user\r\n\t * before going to recipe page.\r\n\t *\r\n\t * @param {recipe} recipe\r\n\t */\r\n\tasync function toRecipeInfo(recipe) {\r\n\t\t\ttry {\r\n\t\t\t\tawait axios.post(\r\n\t\t\t\t\t`${BACKEND}/api/setRecentRecipe/`,\r\n\t\t\t\t\t{ id: recipe.id },\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\"X-CSRFToken\": authCtx.token,\r\n\t\t\t\t\t\t\tcredentials: \"include\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\twithCredentials: true,\r\n\t\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t} catch (error) {}\r\n\t\tnavigation.navigate(\"RecipeInfo\", { id: recipe.id });\r\n\t}\r\n\r\n\tif (item.id === \"\") {\r\n\t\treturn (\r\n\t\t\t<View key={item.id} style={{width: width, height: height, flexGrow: flexGrow}}>\r\n\t\t\t\t<View style={recipeListStyle.foodPicContainer}>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tstyle={recipeListStyle.foodPic}\r\n\t\t\t\t\t\tsource={image}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\t\t\t\t<Text style={recipeListStyle.foodName}>{item.name}</Text>\r\n\t\t\t</View>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<Pressable\r\n\t\t\t\tkey={item.id}\r\n\t\t\t\tonPress={() => toRecipeInfo(item)}\r\n\t\t\t\tstyle={{width: width, height: height, flexGrow: flexGrow}}\r\n\t\t\t>\r\n\t\t\t\t<View style={recipeListStyle.foodPicContainer}>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tstyle={recipeListStyle.foodPic}\r\n\t\t\t\t\t\tsource={image}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\t\t\t\t<Text style={recipeListStyle.foodName}>{item.name}</Text>\r\n\t\t\t</Pressable>\r\n\t\t);\r\n\t}\r\n}\r\n"],"sourceRoot":""}