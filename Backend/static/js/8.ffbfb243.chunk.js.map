{"version":3,"sources":["src/components/RecipeOption/RecipeOptionStyle.js","src/components/RecipeOption/RecipeOption.js"],"names":["optionStyles","StyleSheet","create","listContainer","borderWidth","RecipeOption","props","useState","selectedData","setSelectedData","optionIncluded","item","exists","forEach","option","selectOptionHandler","RMoption","prevState","newState","push","newList","concat","addOptions","useEffect","type","updateData","View","style","FlatList","data","renderItem","Pressable","onPress","e","width","backgroundColor","padding","alignItems","Text","fontWeight","extraData"],"mappings":"iNAEaA,E,KAAeC,QAAWC,OACnC,CACIC,cAAe,CACXC,YAAa,K,wkBCiBV,SAASC,EAAaC,GACpC,MAAwCC,mBAASD,EAAME,cAAa,WAA7DA,EAAY,KAAEC,EAAe,KAoDpC,SAASC,EAAeC,GACvB,IAAIC,GAAS,EAOb,OANAJ,EAAaK,SAAQ,SAACC,GACjBA,GAAUH,IACbC,GAAS,MAIJA,EASR,SAASG,EAAoBD,GAC5B,IAnCsBE,EAmCTN,EAAeI,IAnCNE,EAsCPF,EArCfL,GAAgB,SAACQ,GAChB,IAAIC,EAAW,GAKf,OAHAD,EAAUJ,SAAQ,SAACC,GAAM,OACxBA,GAAUE,EAAWE,EAASC,KAAKL,GAAU,QAEvCI,MAtBT,SAAoBJ,GACnBL,GAAgB,SAACQ,GAChB,IAAIG,EAAU,GAId,OAHAA,EAAUA,EAAQC,OAAOJ,IACjBE,KAAKL,GAENM,KAiDPE,CAAWR,GA6Bb,OAnGAS,qBAAU,kBAAMd,EAAgBH,EAAME,gBAAe,CAACF,EAAMkB,OAK5DD,qBACC,kBAAMjB,EAAMmB,WAAWnB,EAAMkB,KAAMhB,KACnC,CAACA,IA6FD,cAACkB,EAAA,QAAI,CAACC,MAAK,OAAO3B,EAAaG,eAAkBG,EAAMqB,OAAQ,SAC9D,cAACC,EAAA,QAAQ,CACRC,KAAMvB,EAAMuB,KACZC,WAtBH,SAAuB,GAAW,IAATnB,EAAI,EAAJA,KACxB,OACC,cAACoB,EAAA,QAAS,CACTC,QAAS,SAACC,GAAC,OAAKlB,EAAoBJ,IACpCgB,MAAO,CACNO,MAAO,IACPC,gBAAiBzB,EAAeC,GAC7B,UACA,UACHyB,QAAS,EACTC,WAAY,UACX,SAEF,cAACC,EAAA,QAAI,CAACX,MAAO,CAACY,WAAW,QAAQ,SAAE5B,OAUnC6B,UAAWhC","file":"static/js/8.ffbfb243.chunk.js","sourcesContent":["import { StyleSheet } from \"react-native\";\r\n\r\nexport const optionStyles = StyleSheet.create(\r\n    {\r\n        listContainer: {\r\n            borderWidth: 2\r\n        },\r\n    });","import { useEffect, useState } from \"react\";\r\nimport { FlatList, Pressable, Text, View } from \"react-native\";\r\nimport { optionStyles } from \"./RecipeOptionStyle\";\r\n\r\n/**\r\n * Displays a list of recipe options from the data given via\r\n *\r\n * @param {{\r\n *      type: string\r\n *      updateData: (type:string, options: Array<str>) => void,\r\n *      data: Array<string>,\r\n * \t\tselectedData: Array<string>\r\n * \t\tstyle: any\r\n *  }\r\n * } props\r\n *\r\n * `data` is array of data to be displayed and\r\n * `updateData` is for updating data of the parent component.\r\n * `selectedData` is data that is already selected.\r\n *\r\n * @returns List of Recipe Options\r\n */\r\nexport default function RecipeOption(props) {\r\n\tconst [selectedData, setSelectedData] = useState(props.selectedData);\r\n\r\n\t/**\r\n\t * Selects the type of data within an object to be displayed when `props.type` changes.\r\n\t */\r\n\tuseEffect(() => setSelectedData(props.selectedData), [props.type]);\r\n\r\n\t/**\r\n\t * Updates the data in the parent component when changing `selectedData changes`.\r\n\t */\r\n\tuseEffect(\r\n\t\t() => props.updateData(props.type, selectedData),\r\n\t\t[selectedData]\r\n\t);\r\n\r\n\t/**\r\n\t * Add selected options to selectedData\r\n\t *\r\n\t * @param {string} option\r\n\t */\r\n\tfunction addOptions(option) {\r\n\t\tsetSelectedData((prevState) => {\r\n\t\t\tlet newList = [];\r\n\t\t\tnewList = newList.concat(prevState);\r\n\t\t\tnewList.push(option);\r\n\r\n\t\t\treturn newList;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Removes option from selectedData\r\n\t *\r\n\t * @param {string} RMoption\r\n\t */\r\n\tfunction removeOptions(RMoption) {\r\n\t\tsetSelectedData((prevState) => {\r\n\t\t\tlet newState = [];\r\n\r\n\t\t\tprevState.forEach((option) =>\r\n\t\t\t\toption != RMoption ? newState.push(option) : null\r\n\t\t\t);\r\n\t\t\treturn newState;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Checks that the option is included in selectedData\r\n\t *\r\n\t * @param {string} item\r\n\t * @returns True if exists otherwise false.\r\n\t */\r\n\tfunction optionIncluded(item) {\r\n\t\tlet exists = false;\r\n\t\tselectedData.forEach((option) => {\r\n\t\t\tif (option == item) {\r\n\t\t\t\texists = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn exists;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds selected option when it doesn't existin in selectedData\r\n\t * or removes it when it already exists in selectedData\r\n\t *\r\n\t * @param {string} option\r\n\t */\r\n\tfunction selectOptionHandler(option) {\r\n\t\tlet exists = optionIncluded(option);\r\n\r\n\t\tif (exists) {\r\n\t\t\tremoveOptions(option);\r\n\t\t} else {\r\n\t\t\taddOptions(option);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Renders a button that corresponds to an option.\r\n\t * Changes color depending if it's added or not\r\n\t *\r\n\t * @param {string} item\r\n\t * @returns Button to be rendered in List\r\n\t */\r\n\tfunction renderOptions({ item }) {\r\n\t\treturn (\r\n\t\t\t<Pressable\r\n\t\t\t\tonPress={(e) => selectOptionHandler(item)}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\twidth: 175,\r\n\t\t\t\t\tbackgroundColor: optionIncluded(item)\r\n\t\t\t\t\t\t? \"#00ff0d\"\r\n\t\t\t\t\t\t: \"#fd5d00\",\r\n\t\t\t\t\tpadding: 5,\r\n\t\t\t\t\talignItems: \"center\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Text style={{fontWeight:\"bold\"}}>{item}</Text>\r\n\t\t\t</Pressable>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<View style={{ ...optionStyles.listContainer, ...props.style }}>\r\n\t\t\t<FlatList\r\n\t\t\t\tdata={props.data}\r\n\t\t\t\trenderItem={renderOptions}\r\n\t\t\t\textraData={selectedData}\r\n\t\t\t/>\r\n\t\t</View>\r\n\t);\r\n}\r\n"],"sourceRoot":""}