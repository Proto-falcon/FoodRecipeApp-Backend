{"version":3,"sources":["src/context/account.js","src/context/CsrfToken.js","src/ipaddressesports/BackEndIP.js","src/pages/Form/FormStyles.js","src/pages/Form/Form.js"],"names":["AccountCtx","createContext","loggedIn","username","email","setLoginStatus","setUsername","newUsername","setEmail","newEmail","checkCred","csrfCtx","domain","AccountProvider","props","useState","isLoggedIn","setIsLoggedIn","response","axios","get","content","data","setCsrfToken","token","user","LogInHandler","setUsernameHandler","setEmailHandler","error","prevState","match","length","Provider","value","children","CsrfCtx","newToken","CsrfContextProvider","setToken","BACKEND","FormStyle","StyleSheet","create","formInput","padding","marginTop","borderWidth","borderRadius","formLabel","marginRight","textAlign","fontWeight","submitButton","margin","backgroundColor","FormField","lazy","TextError","UserEmailForms","emailRegExp","Form","route","navigation","authCtx","useContext","accCtx","params","toLogin","password","setPasword","formValid","setFormValid","errorMsg","setErrorMsg","mount","width","minWidth","maxWidth","fieldWidth","setFieldWidth","onSubmitHandler","method","path","headers","withCredentials","url","responseType","signUpSuccess","navigate","loginSuccess","message","useEffect","Platform","OS","style","styles","pageContainer","alignItems","usernameHandler","emailHandler","containerStyle","labelStyle","inputStyle","borderColor","label","placeholder","isPassword","onChangeTextHandler","newPassword","onPress","hasError"],"mappings":"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","file":"static/js/11.370dc9e8.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { createContext, useState } from \"react\";\r\n\r\n// Context for account info\r\nexport const AccountCtx = createContext({\r\n\tloggedIn: false,\r\n\tusername: \"\",\r\n\temail: \"\",\r\n\tsetLoginStatus: () => {},\r\n\tsetUsername: (newUsername) => {},\r\n\tsetEmail: (newEmail) => {},\r\n\tcheckCred: (csrfCtx, domain) => {},\r\n});\r\n\r\n/**\r\n * Account System\r\n *\r\n * @param {{children: any}} props\r\n * @returns App UI\r\n */\r\nexport default function AccountProvider(props) {\r\n\tconst [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\tconst [username, setUsername] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\r\n\t/**\r\n\t * Checks whether the user is still logged in or not\r\n\t *\r\n\t * @param {{\r\n\t *     token: string;\r\n\t *     setCsrfToken: (newToken: any) => void;\r\n\t * }} csrfCtx\r\n\t * @param {string} domain\r\n\t */\r\n\tasync function updateCred(csrfCtx, domain) {\r\n\t\tif (!isLoggedIn) {\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await axios.get(`${domain}/api/checkLogin/`);\r\n\t\t\t\tlet content = await response.data;\r\n\t\t\t\tcsrfCtx.setCsrfToken(content.token);\r\n\t\t\t\tif (content.user != false) {\r\n\t\t\t\t\tLogInHandler();\r\n\t\t\t\t\tsetUsernameHandler(content.user.username);\r\n\t\t\t\t\tsetEmailHandler(content.user.email);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inverts the `isLoggedIn` state\r\n\t */\r\n\tfunction LogInHandler() {\r\n\t\tsetIsLoggedIn((prevState) => !prevState);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a new valid `email`\r\n\t *\r\n\t * @param {string} newEmail\r\n\t */\r\n\tfunction setEmailHandler(newEmail) {\r\n\t\tif (newEmail == \"\") {\r\n\t\t\tsetEmail(\"\");\r\n\t\t} else if (\r\n\t\t\tnewEmail.match(\r\n\t\t\t\t/^([a-zA-Z0-9]+\\.?[a-zA-Z0-9]*)@[a-zA-Z0-9^\\.]+\\.([a-zA-Z]+\\.?[a-zA-Z]*)$/\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\tsetEmail(newEmail);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a new `username`\r\n\t *\r\n\t * @param {string} newUsername\r\n\t */\r\n\tfunction setUsernameHandler(newUsername) {\r\n\t\tif (newUsername.length > 0) {\r\n\t\t\tsetUsername(newUsername);\r\n\t\t} else {\r\n\t\t\tsetUsername(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<AccountCtx.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tloggedIn: isLoggedIn,\r\n\t\t\t\tusername: username,\r\n\t\t\t\temail: email,\r\n\t\t\t\tsetLoginStatus: LogInHandler,\r\n\t\t\t\tsetUsername: setUsernameHandler,\r\n\t\t\t\tsetEmail: setEmailHandler,\r\n\t\t\t\tcheckCred: updateCred,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</AccountCtx.Provider>\r\n\t);\r\n}\r\n","import { createContext, useState } from \"react\";\r\n\r\nexport const CsrfCtx = createContext({\r\n\ttoken: \"\",\r\n\tsetCsrfToken: (newToken) => {},\r\n});\r\n\r\n/**\r\n * Context Manager for Csrf\r\n *\r\n * @param {{children: any}} props\r\n * @returns Components that can use the csrf context\r\n */\r\nexport default function CsrfContextProvider(props) {\r\n\tconst [token, setToken] = useState(\"\");\r\n\r\n\t/**\r\n\t * Updates the csrf `token`\r\n\t *\r\n\t * @param {string} newToken\r\n\t */\r\n\tfunction updateToken(newToken) {\r\n\t\tsetToken(newToken);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<CsrfCtx.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\ttoken: token,\r\n\t\t\t\tsetCsrfToken: updateToken,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</CsrfCtx.Provider>\r\n\t);\r\n}\r\n","const BACKENDLOCAL = \"http://localhost:8000\";\r\nconst BACKENDIPHOME = \"http://192.168.0.30:8000\";\r\n\r\nlet domain = \"\";\r\nif (__DEV__) {\r\n\tdomain = BACKENDIPHOME;\r\n}\r\nconst BACKEND = domain;\r\nexport default BACKEND;","import { StyleSheet } from \"react-native\"\r\n\r\nexport const FormStyle = StyleSheet.create(\r\n    {\r\n        formInput: {\r\n            padding: 5,\r\n            marginTop: 10,\r\n            borderWidth: 2,\r\n            borderRadius: 20\r\n        },\r\n\r\n        formLabel: {\r\n            marginRight: 10,\r\n            textAlign: \"left\",\r\n            fontWeight: \"bold\",\r\n        },\r\n\r\n        submitButton: {\r\n            padding: 10,\r\n            margin: 10,\r\n            borderRadius: 15, \r\n            backgroundColor: \"#fd5d00\"\r\n        },\r\n    }\r\n);\r\n","import axios from \"axios\";\r\nimport { lazy, useContext, useEffect, useState } from \"react\";\r\nimport { Platform, Pressable, Text, View } from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport { FormStyle } from \"./FormStyles\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\nimport { CsrfCtx } from \"../../context/CsrfToken\";\r\nimport { AccountCtx } from \"../../context/account\";\r\n\r\nconst FormField = lazy(() => import(\"../../components/FormField/FormField\"));\r\nconst TextError = lazy(() => import(\"../../components/TextError/TextError\"));\r\nconst UserEmailForms = lazy(() => import(\"../../components/UserEmailForms/UserEmailForms\"));\r\n\r\nconst emailRegExp = /^([a-zA-Z0-9]+\\.?[a-zA-Z0-9]*)@[a-zA-Z0-9^\\.]+\\.([a-zA-Z]+\\.?[a-zA-Z]*)$/\r\n\r\n/**\r\n * Renders the Text Form with multiple fields\r\n * It can be either login or sign up form\r\n *\r\n * @param {\r\n * \t{\r\n * \t\tnavigation: *,\r\n * \t\troute: *\r\n * \t}} props\r\n * @returns Text Form\r\n */\r\nexport default function Form({ route, navigation }) {\r\n\t\r\n\tconst authCtx = useContext(CsrfCtx);\r\n\tconst accCtx = useContext(AccountCtx);\r\n\r\n\tconst [toLogin, setToLogin] = useState(route.params.toLogin);\r\n\tconst [username, setUsername] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\tconst [password, setPasword] = useState(\"\");\r\n    const [formValid, setFormValid] = useState(true);\r\n\tconst [errorMsg, setErrorMsg] = useState(\"\");\r\n\tconst [mount, setMount] = useState(true);\r\n\tconst [fieldWidth, setFieldWidth] = useState({\r\n\t\twidth: \"25%\",\r\n        minWidth: \"25%\",\r\n        maxWidth: \"25%\",\r\n\t});\r\n\t\r\n\t// Calls when `Form` component is mounted\r\n\tuseEffect(() => {\r\n\t\taccCtx.checkCred(authCtx, BACKEND);\r\n\t\t\r\n\t\tif (Platform.OS != \"web\") {\r\n\t\t\tsetFieldWidth({\r\n\t\t\t\twidth: \"50%\",\r\n        \t\tminWidth: \"50%\",\r\n        \t\tmaxWidth: \"50%\",\r\n\t\t\t});\r\n\t\t}\r\n\t}, [mount]);\r\n\r\n\t/**\r\n\t * Updates the `username` state with `newUsername`\r\n\t *\r\n\t * @param {string} newUsername\r\n\t */\r\n\tfunction usernameHandler(newUsername) {\r\n\t\tif (newUsername.length > 50) {\r\n\t\t\tsetFormValid(false);\r\n\t\t\tsetErrorMsg(\"Username too long\");\r\n\t\t} else {\r\n\t\t\tsetFormValid(true);\r\n\t\t\tsetUsername(newUsername);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the `email` state with `newEmail` if it's valid\r\n\t *\r\n\t * @param {string} newEmail\r\n\t */\r\n\tfunction emailHandler(newEmail) {\r\n\t\tif (\r\n\t\t\tnewEmail.match(emailRegExp) != null\r\n\t\t) {\r\n\t\t\tsetEmail(newEmail);\r\n\t\t} else {\r\n\t\t\tsetEmail(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the `password` state with `newPassword`\r\n\t *\r\n\t * @param {string} newPassword\r\n\t */\r\n\tfunction passwordHandler(newPassword) {\r\n\t\tsetPasword(newPassword);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Submits the sign up & login form with the user\r\n\t */\r\n    async function onSubmitHandler() {\r\n        if (toLogin && (username.length <= 0 || password <= 0)) {\r\n\t\t\tsetErrorMsg(\"Please fill all the fields/ enter corretly.\");\r\n            setFormValid(false);\r\n        }\r\n\t\telse if (!toLogin && (username.length <= 0 || email.length <=0 || password <= 0)) {\r\n\t\t\tsetErrorMsg(\"Please fill all the fields/ enter corretly.\");\r\n            setFormValid(false);\r\n\t\t}\r\n\t\telse {\r\n            setFormValid(true);\r\n\t\t\tlet method = \"post\";\r\n\t\t\tlet path = \"signup/\";\r\n\t\t\tif (toLogin) {\r\n\t\t\t\tmethod = \"put\";\r\n\t\t\t\tpath = \"login/\";\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await axios(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmethod: method,\r\n\t\t\t\t\t\theaders: {\"X-CSRFToken\": authCtx.token, \"credentials\": \"include\"},\r\n\t\t\t\t\t\twithCredentials: true,\r\n\t\t\t\t\t\turl: `${BACKEND}/api/${path}`,\r\n\t\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\tusername: username,\r\n\t\t\t\t\t\t\temail: email,\r\n\t\t\t\t\t\t\tpassword: password\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\t\t\r\n\t\t\t\tlet content = await response.data;\r\n\t\t\t\tif (content.signUpSuccess) {\r\n\t\t\t\t\taccCtx.setLoginStatus(true);\r\n\t\t\t\t\taccCtx.setUsername(username);\r\n\t\t\t\t\taccCtx.setEmail(email);\r\n\t\t\t\t\tnavigation.navigate(\"Home\");\r\n\t\t\t\t}\r\n\t\t\t\telse if (content.loginSuccess) {\r\n\t\t\t\t\taccCtx.setLoginStatus(true);\r\n\t\t\t\t\taccCtx.setUsername(content.user.username);\r\n\t\t\t\t\taccCtx.setEmail(content.user.email);\r\n\t\t\t\t\tnavigation.navigate(\"Home\");\r\n\t\t\t\t}\r\n\r\n\t\t\t} catch (error) {\r\n\t\t\t\tsetErrorMsg(error.response.data.message);\r\n\t\t\t\tsetFormValid(false)\r\n\t\t\t}\r\n        }\r\n    }\r\n\r\n\tfunction SubmitButton() {\r\n\t\treturn (\r\n\t\t\t<Pressable style={FormStyle.submitButton} onPress={onSubmitHandler}>\r\n\t\t\t\t<Text style={{fontWeight: \"bold\",}}>{toLogin ? \"Login\" : \"Sign Up\"}</Text>\r\n\t\t\t</Pressable>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<View style={{ ...styles.pageContainer, alignItems: \"center\"}}>\r\n\t\t\t<UserEmailForms\r\n\t\t\t\ttoLogin={toLogin}\r\n\t\t\t\tusernameHandler={usernameHandler}\r\n\t\t\t\temailHandler={emailHandler}\r\n\t\t\t\tcontainerStyle={fieldWidth}\r\n\t\t\t\tlabelStyle={FormStyle.formLabel}\r\n\t\t\t\tinputStyle={{...FormStyle.formInput, borderColor: formValid ? \"black\" : \"red\"}}\r\n\t\t\t/>\r\n\t\t\t<FormField\r\n\t\t\t\tlabel={\"Password:\"}\r\n\t\t\t\tplaceholder={\"Please enter password:\"}\r\n\t\t\t\tisPassword={true}\r\n\t\t\t\tonChangeTextHandler={passwordHandler}\r\n                containerStyle={fieldWidth}\r\n                labelStyle={FormStyle.formLabel}\r\n                inputStyle={{...FormStyle.formInput, borderColor: formValid ? \"black\" : \"red\"}}\r\n\t\t\t/>\r\n\t\t\t<SubmitButton />\r\n\r\n\t\t\t<TextError\r\n\t\t\t\thasError={!formValid}\r\n\t\t\t\tstyle={styles.errorMsg}\r\n\t\t\t\tmessage={errorMsg}\r\n\t\t\t/>\r\n\t\t</View>\r\n\t);\r\n}\r\n\r\n"],"sourceRoot":""}