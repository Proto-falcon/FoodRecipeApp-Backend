{"version":3,"sources":["node_modules/react-native-web/dist/exports/TextInput/index.js","src/components/IndividualForm/IndividualForm.js"],"names":["forwardPropsList","Object","assign","forwardedProps","autoCapitalize","autoComplete","autoCorrect","autoFocus","defaultValue","disabled","lang","maxLength","onChange","onScroll","placeholder","pointerEvents","readOnly","rows","spellCheck","value","type","focusTimeout","TextInput","React","props","forwardedRef","inputMode","_props$autoCapitalize","autoCompleteType","_props$autoCorrect","blurOnSubmit","clearTextOnFocus","dir","_props$editable","editable","_props$keyboardType","keyboardType","_props$multiline","multiline","_props$numberOfLines","numberOfLines","onBlur","onChangeText","onContentSizeChange","onFocus","onKeyPress","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderEnd","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderStart","onResponderTerminate","onResponderTerminationRequest","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","returnKeyType","_props$secureTextEntr","secureTextEntry","selection","selectTextOnFocus","dimensions","height","width","hostRef","handleContentSizeChange","hostNode","newHeight","scrollHeight","newWidth","scrollWidth","current","nativeEvent","contentSize","imperativeRef","clear","isFocused","TextInputState","currentlyFocusedField","useLayoutEffect","node","selectionEnd","selectionStart","start","end","isSelectionStale","setSelectionRange","e","setSelection","document","activeElement","_currentlyFocusedNode","component","useElementLayout","useResponderEvents","contextDirection","useLocaleContext","direction","supportedProps","pick","pickProps","undefined","enterKeyHint","text","target","clearTimeout","setTimeout","select","onKeyDown","stopPropagation","shouldBlurOnSubmit","isComposing","keyCode","isEventComposing","key","shiftKey","isDefaultPrevented","preventDefault","blur","onSelect","style","styles","textinput$raw","platformMethodsRef","usePlatformMethods","setRef","useMergeRefs","ref","langDirection","getLocaleDirection","writingDirection","createElement","displayName","State","StyleSheet","create","MozAppearance","WebkitAppearance","backgroundColor","border","borderRadius","boxSizing","font","margin","padding","resize","IndiviudalForm","containerStyle","labelStyle","label","labelValueHidden","labelValueStyle","labelValue","flexDirection","useWindowDimensions","justifyContent","alignItems","inputPromptStyle","submitStyle","onPress","submitHandler","textAlign","submitText"],"mappings":"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","file":"static/js/17.f6864cdd.chunk.js","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport * as React from 'react';\nimport createElement from '../createElement';\nimport * as forwardedProps from '../../modules/forwardedProps';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../modules/useElementLayout';\nimport useLayoutEffect from '../../modules/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../modules/usePlatformMethods';\nimport useResponderEvents from '../../modules/useResponderEvents';\nimport { getLocaleDirection, useLocaleContext } from '../../modules/useLocale';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\n\nvar isSelectionStale = (node, selection) => {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\n\n\nvar setSelection = (node, selection) => {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\n\nvar pickProps = props => pick(props, forwardPropsList); // If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\n\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar focusTimeout = null;\nvar TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(hostNode => {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(() => hostNode => {\n    // TextInput needs to add more methods to the hostNode in addition to those\n    // added by `usePlatformMethods`. This is temporarily until an API like\n    // `TextInput.clear(hostRef)` is added to React Native.\n    if (hostNode != null) {\n      hostNode.clear = function () {\n        if (hostNode != null) {\n          hostNode.value = '';\n        }\n      };\n\n      hostNode.isFocused = function () {\n        return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n      };\n\n      handleContentSizeChange(hostNode);\n    }\n  }, [handleContentSizeChange]);\n\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var hostNode = e.target;\n\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        // Safari requires selection to occur in a setTimeout\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n\n        focusTimeout = setTimeout(() => {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    var hostNode = e.target; // Prevent key events bubbling (see #612)\n\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && // Do not call submit if composition is occuring.\n    !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostNode != null) {\n        setTimeout(() => hostNode.blur(), 0);\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  useLayoutEffect(() => {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture,\n    onResponderEnd,\n    onResponderGrant,\n    onResponderMove,\n    onResponderReject,\n    onResponderRelease,\n    onResponderStart,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder,\n    onStartShouldSetResponderCapture\n  });\n\n  var _useLocaleContext = useLocaleContext(),\n      contextDirection = _useLocaleContext.direction;\n\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off'; // 'auto' by default allows browsers to infer writing direction\n\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterKeyHint = returnKeyType;\n  supportedProps.inputMode = inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    '--placeholderTextColor': placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style];\n  supportedProps.type = multiline ? undefined : type;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = createElement(component, supportedProps, {\n    writingDirection\n  });\n  return element;\n});\nTextInput.displayName = 'TextInput'; // $FlowFixMe\n\nTextInput.State = TextInputState;\nvar styles = StyleSheet.create({\n  textinput$raw: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  },\n  placeholder: {\n    placeholderTextColor: 'var(--placeholderTextColor)'\n  }\n});\nexport default TextInput;","import {\r\n\tPressable,\r\n\tText,\r\n\tTextInput,\r\n\tuseWindowDimensions,\r\n\tView,\r\n} from \"react-native\";\r\n\r\n/**\r\n * Renders a form with a single input text with submit button\r\n *\r\n * @param {{\r\n *      containerStyle: *,\r\n *      label: string,\r\n *      labelValueHidden: boolean,\r\n *      labelValue?: string,\r\n *      submitText: string,\r\n *      labelStyle: *,\r\n *      labelValueStyle?: *,\r\n *      inputPromptStyle: *,\r\n *      placeholder: string,\r\n *      onChangeText: (text: string) => void,\r\n *      submitHandler: () => void,\r\n *      submitStyle: *\r\n * }} props\r\n * @returns Form with 1 input text and a button\r\n */\r\nexport default function IndiviudalForm(props) {\r\n\tfunction DisplayValue() {\r\n\t\tif (!props.labelValueHidden) {\r\n\t\t\treturn (\r\n\t\t\t\t<Text style={props.labelValueStyle}>{props.labelValue}</Text>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn <Text />;\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<View style={props.containerStyle}>\r\n\t\t\t<Text style={props.labelStyle}>{props.label}</Text>\r\n\t\t\t<DisplayValue />\r\n\t\t\t<View\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tflexDirection:\r\n\t\t\t\t\t\tuseWindowDimensions().width < 700 ? \"column\" : \"row\",\r\n\t\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\t\talignItems: \"center\",\r\n                    width: \"200%\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<TextInput\r\n\t\t\t\t\tstyle={props.inputPromptStyle}\r\n\t\t\t\t\tplaceholder={props.placeholder}\r\n\t\t\t\t\tonChangeText={props.onChangeText}\r\n\t\t\t\t/>\r\n\t\t\t\t<Pressable\r\n\t\t\t\t\tstyle={props.submitStyle}\r\n\t\t\t\t\tonPress={props.submitHandler}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Text style={{textAlign: \"center\"}}>{props.submitText}</Text>\r\n\t\t\t\t</Pressable>\r\n\t\t\t</View>\r\n\t\t</View>\r\n\t);\r\n}\r\n"],"sourceRoot":""}