{"version":3,"sources":["node_modules/react-native-web/dist/exports/Linking/index.js","src/components/RecipeList/RecipeListStyle.js","src/pages/RecipeInfo/RecipeInfo.js"],"names":["initialURL","canUseDOM","window","location","href","Linking","this","_eventCallbacks","addEventListener","event","callback","push","removeEventListener","filteredCallbacks","filter","c","toString","_len","arguments","length","data","Array","_key","listeners","isArray","map","listener","Promise","resolve","url","target","open","_dispatchEvent","e","reject","invariant","urlToOpen","URL","indexOf","recipeListStyle","StyleSheet","create","foodPicContainer","alignItems","foodPic","height","width","resizeMode","foodName","marginTop","marginBottom","fontWeight","padding","borderWidth","textAlign","RecipeInfo","route","useState","workingLink","setWorkingLink","mounted","canOpenURL","params","source","useEffect","testLink","style","styles","pageContainer","fontSize","textDecorationLine","name","uri","image","backgroundColor","margin","borderRadius","onPress","openURL","ingredients","renderItem","item","index"],"mappings":"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","file":"static/js/13.70e75272.chunk.js","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport canUseDOM from '../../modules/canUseDom';\nvar initialURL = canUseDOM ? window.location.href : '';\n\nclass Linking {\n  constructor() {\n    this._eventCallbacks = {};\n\n    this.addEventListener = (event, callback) => {\n      if (!this._eventCallbacks[event]) {\n        this._eventCallbacks[event] = [callback];\n        return;\n      }\n\n      this._eventCallbacks[event].push(callback);\n    };\n\n    this.removeEventListener = (event, callback) => {\n      var callbacks = this._eventCallbacks[event];\n      var filteredCallbacks = callbacks.filter(c => c.toString() !== callback.toString());\n      this._eventCallbacks[event] = filteredCallbacks;\n    };\n  }\n\n  _dispatchEvent(event) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    var listeners = this._eventCallbacks[event];\n\n    if (listeners != null && Array.isArray(listeners)) {\n      listeners.map(listener => {\n        listener(...data);\n      });\n    }\n  }\n  /**\n   * Adds a event listener for the specified event. The callback will be called when the\n   * said event is dispatched.\n   */\n\n\n  canOpenURL() {\n    return Promise.resolve(true);\n  }\n\n  getInitialURL() {\n    return Promise.resolve(initialURL);\n  }\n  /**\n   * Try to open the given url in a secure fashion. The method returns a Promise object.\n   * If a target is passed (including undefined) that target will be used, otherwise '_blank'.\n   * If the url opens, the promise is resolved. If not, the promise is rejected.\n   * Dispatches the `onOpen` event if `url` is opened successfully.\n   */\n\n\n  openURL(url, target) {\n    if (arguments.length === 1) {\n      target = '_blank';\n    }\n\n    try {\n      open(url, target);\n\n      this._dispatchEvent('onOpen', url);\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  _validateURL(url) {\n    invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n\n}\n\nvar open = (url, target) => {\n  if (canUseDOM) {\n    var urlToOpen = new URL(url, window.location).toString();\n\n    if (urlToOpen.indexOf('tel:') === 0) {\n      window.location = urlToOpen;\n    } else {\n      window.open(urlToOpen, target, 'noopener');\n    }\n  }\n};\n\nexport default new Linking();","import { StyleSheet } from \"react-native\";\r\n\r\nexport const recipeListStyle = StyleSheet.create(\r\n    {\r\n        foodPicContainer:\r\n        {\r\n            alignItems: \"center\"\r\n        },\r\n        foodPic:\r\n        {\r\n            height: 200,\r\n            width: \"100%\",\r\n            resizeMode: \"contain\"\r\n        },\r\n\r\n        foodName:\r\n        {\r\n            marginTop: 20,\r\n            marginBottom: 20,\r\n            fontWeight: \"bold\",\r\n            padding: 10,\r\n            borderWidth: 1,\r\n            textAlign: \"center\"\r\n        }\r\n    });\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n\tFlatList,\r\n\tImage,\r\n\tLinking,\r\n\tPressable,\r\n\tText,\r\n\tView,\r\n} from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport { recipeListStyle } from \"../../components/RecipeList/RecipeListStyle\";\r\n\r\nexport default function RecipeInfo({ route }) {\r\n\r\n    const [workingLink, setWorkingLink] = useState(false);\r\n    const [mounted, setMounted] = useState(true);\r\n\r\n    async function testLink() {\r\n        let canOpen = await Linking.canOpenURL(route.params.source);\r\n        if (canOpen) {\r\n            setWorkingLink(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {testLink()}, [mounted]);\r\n\r\n\treturn (\r\n\t\t<View style={{ ...styles.pageContainer, alignItems: \"center\" }}>\r\n\t\t\t<Text\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\tfontSize: 30,\r\n\t\t\t\t\tfontWeight: \"bold\",\r\n\t\t\t\t\ttextDecorationLine: \"underline\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{route.params.name}\r\n\t\t\t</Text>\r\n\t\t\t<View\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\t...recipeListStyle.foodPicContainer,\r\n\t\t\t\t\t...recipeListStyle.foodPic,\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Image\r\n\t\t\t\t\tstyle={{ resizeMode: \"contain\" }}\r\n\t\t\t\t\tsource={{\r\n\t\t\t\t\t\turi: route.params.image,\r\n\t\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</View>\r\n\t\t\t<Pressable\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tbackgroundColor: \"#fd5d00\",\r\n\t\t\t\t\tmargin: 10,\r\n\t\t\t\t\tpadding: 10,\r\n\t\t\t\t\tborderRadius: 20,\r\n\t\t\t\t}}\r\n\t\t\t\tonPress={async () => {\r\n                    if (workingLink) {\r\n                        return Linking.openURL(route.params.source)}}\r\n                    }\r\n\t\t\t>\r\n\t\t\t\t<Text style={{ fontWeight: \"bold\", fontSize: 15 }}>{workingLink ? \"Source\": \"No Source\"}</Text>\r\n\t\t\t</Pressable>\r\n\t\t\t<FlatList\r\n\t\t\t\tdata={route.params.ingredients}\r\n\t\t\t\trenderItem={({ item, index }) => (\r\n\t\t\t\t\t<Text>\r\n\t\t\t\t\t\t{index + 1}. {item}\r\n\t\t\t\t\t</Text>\r\n\t\t\t\t)}\r\n\t\t\t/>\r\n\t\t</View>\r\n\t);\r\n}\r\n"],"sourceRoot":""}