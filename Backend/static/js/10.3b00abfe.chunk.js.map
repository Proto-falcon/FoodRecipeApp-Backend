{"version":3,"sources":["src/context/account.js","src/context/CsrfToken.js","src/ipaddressesports/BackEndIP.js","node_modules/react-native-web/dist/exports/useWindowDimensions/index.js","src/pages/Form/FormStyles.js","src/pages/Profile/ProfileStyles.js","src/pages/Profile/Profile.js"],"names":["AccountCtx","createContext","loggedIn","username","email","setLoginStatus","setUsername","newUsername","setEmail","newEmail","checkCred","csrfCtx","domain","AccountProvider","props","useState","isLoggedIn","setIsLoggedIn","response","axios","get","content","data","setCsrfToken","token","user","LogInHandler","setUsernameHandler","setEmailHandler","error","prevState","match","length","Provider","value","children","CsrfCtx","newToken","CsrfContextProvider","setToken","BACKEND","useWindowDimensions","_useState","Dimensions","dims","setDims","useEffect","handleChange","_ref","window","addEventListener","removeEventListener","FormStyle","StyleSheet","create","formInput","padding","marginTop","borderWidth","borderRadius","formLabel","marginRight","textAlign","fontWeight","submitButton","margin","backgroundColor","profileStyles","userField","fontSize","width","IndiviudalForm","lazy","TextError","emailRegExp","Profile","route","navigation","authCtx","useContext","accCtx","setNewUserName","setNewEmail","newPassword","setNewPassword","usernameUpdated","setUsernameUpdated","emailUpdated","setEmailUpdated","passwordUpdated","setPasswordUpdated","errorBackColor","setErrorBackColor","errorMsg","setErrorMsg","mount","put","headers","withCredentials","responseType","message","msg","ErrorHandler","password","fieldId","isError","customWidth","View","style","styles","pageContainer","alignItems","containerStyle","label","labelStyle","labelValueHidden","labelValue","labelValueStyle","placeholder","onChangeText","usernameTxt","inputPromptStyle","submitText","submitHandler","submitStyle","hasError","emailTxt","passwordTxt"],"mappings":"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","file":"static/js/10.3b00abfe.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { createContext, useState } from \"react\";\r\n\r\n// Context for account info\r\nexport const AccountCtx = createContext({\r\n\tloggedIn: false,\r\n\tusername: \"\",\r\n\temail: \"\",\r\n\tsetLoginStatus: () => {},\r\n\tsetUsername: (newUsername) => {},\r\n\tsetEmail: (newEmail) => {},\r\n\tcheckCred: (csrfCtx, domain) => {},\r\n});\r\n\r\n/**\r\n * Account System\r\n *\r\n * @param {{children: any}} props\r\n * @returns App UI\r\n */\r\nexport default function AccountProvider(props) {\r\n\tconst [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\tconst [username, setUsername] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\r\n\t/**\r\n\t * Checks whether the user is still logged in or not\r\n\t *\r\n\t * @param {{\r\n\t *     token: string;\r\n\t *     setCsrfToken: (newToken: any) => void;\r\n\t * }} csrfCtx\r\n\t * @param {string} domain\r\n\t */\r\n\tasync function updateCred(csrfCtx, domain) {\r\n\t\tif (!isLoggedIn) {\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await axios.get(`${domain}/api/checkLogin/`);\r\n\t\t\t\tlet content = await response.data;\r\n\t\t\t\tcsrfCtx.setCsrfToken(content.token);\r\n\t\t\t\tif (content.user != false) {\r\n\t\t\t\t\tLogInHandler();\r\n\t\t\t\t\tsetUsernameHandler(content.user.username);\r\n\t\t\t\t\tsetEmailHandler(content.user.email);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inverts the `isLoggedIn` state\r\n\t */\r\n\tfunction LogInHandler() {\r\n\t\tsetIsLoggedIn((prevState) => !prevState);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a new valid `email`\r\n\t *\r\n\t * @param {string} newEmail\r\n\t */\r\n\tfunction setEmailHandler(newEmail) {\r\n\t\tif (newEmail == \"\") {\r\n\t\t\tsetEmail(\"\");\r\n\t\t} else if (\r\n\t\t\tnewEmail.match(\r\n\t\t\t\t/^([a-zA-Z0-9]+\\.?[a-zA-Z0-9]*)@[a-zA-Z0-9^\\.]+\\.([a-zA-Z]+\\.?[a-zA-Z]*)$/\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\tsetEmail(newEmail);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a new `username`\r\n\t *\r\n\t * @param {string} newUsername\r\n\t */\r\n\tfunction setUsernameHandler(newUsername) {\r\n\t\tif (newUsername.length > 0) {\r\n\t\t\tsetUsername(newUsername);\r\n\t\t} else {\r\n\t\t\tsetUsername(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<AccountCtx.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tloggedIn: isLoggedIn,\r\n\t\t\t\tusername: username,\r\n\t\t\t\temail: email,\r\n\t\t\t\tsetLoginStatus: LogInHandler,\r\n\t\t\t\tsetUsername: setUsernameHandler,\r\n\t\t\t\tsetEmail: setEmailHandler,\r\n\t\t\t\tcheckCred: updateCred,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</AccountCtx.Provider>\r\n\t);\r\n}\r\n","import { createContext, useState } from \"react\";\r\n\r\nexport const CsrfCtx = createContext({\r\n\ttoken: \"\",\r\n\tsetCsrfToken: (newToken) => {},\r\n});\r\n\r\n/**\r\n * Context Manager for Csrf\r\n *\r\n * @param {{children: any}} props\r\n * @returns Components that can use the csrf context\r\n */\r\nexport default function CsrfContextProvider(props) {\r\n\tconst [token, setToken] = useState(\"\");\r\n\r\n\t/**\r\n\t * Updates the csrf `token`\r\n\t *\r\n\t * @param {string} newToken\r\n\t */\r\n\tfunction updateToken(newToken) {\r\n\t\tsetToken(newToken);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<CsrfCtx.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\ttoken: token,\r\n\t\t\t\tsetCsrfToken: updateToken,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</CsrfCtx.Provider>\r\n\t);\r\n}\r\n","const BACKENDLOCAL = \"http://localhost:8000\";\r\nconst BACKENDIPHOME = \"http://192.168.0.30:8000\";\r\n\r\nlet domain = \"\";\r\nif (__DEV__) {\r\n\tdomain = BACKENDIPHOME;\r\n}\r\nconst BACKEND = domain;\r\nexport default BACKEND;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport Dimensions from '../Dimensions';\nimport { useEffect, useState } from 'react';\nexport default function useWindowDimensions() {\n  var _useState = useState(() => Dimensions.get('window')),\n      dims = _useState[0],\n      setDims = _useState[1];\n\n  useEffect(() => {\n    function handleChange(_ref) {\n      var window = _ref.window;\n\n      if (window != null) {\n        setDims(window);\n      }\n    }\n\n    Dimensions.addEventListener('change', handleChange); // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n\n    setDims(Dimensions.get('window'));\n    return () => {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}","import { StyleSheet } from \"react-native\"\r\n\r\nexport const FormStyle = StyleSheet.create(\r\n    {\r\n        formInput: {\r\n            padding: 5,\r\n            marginTop: 10,\r\n            borderWidth: 2,\r\n            borderRadius: 20\r\n        },\r\n\r\n        formLabel: {\r\n            marginRight: 10,\r\n            textAlign: \"left\",\r\n            fontWeight: \"bold\",\r\n        },\r\n\r\n        submitButton: {\r\n            padding: 10,\r\n            margin: 10,\r\n            borderRadius: 15, \r\n            backgroundColor: \"#fd5d00\"\r\n        },\r\n    }\r\n);\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport const profileStyles = StyleSheet.create({\r\n\tuserField: {\r\n\t\ttextAlign: \"center\",\r\n\t\tfontSize: 25,\r\n\t},\r\n\r\n\tsubmitButton: {\r\n\t\tbackgroundColor: \"#ff9100\",\r\n\t\tfontWeight: \"bold\",\r\n\t\tpadding: 10,\r\n\t\tmargin: 10,\r\n\t\tborderRadius: 15,\r\n\t\tbackgroundColor: \"#fd5d00\",\r\n        width: 150\r\n\t},\r\n});\r\n","import axios from \"axios\";\r\nimport { lazy, useContext, useEffect, useState } from \"react\";\r\nimport { useWindowDimensions, View } from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport { FormStyle } from \"../Form/FormStyles\";\r\nimport { profileStyles } from \"./ProfileStyles\";\r\nimport { AccountCtx } from \"../../context/account\";\r\nimport { CsrfCtx } from \"../../context/CsrfToken\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\nconst IndiviudalForm = lazy(() => import(\"../../components/IndividualForm/IndividualForm\"));\r\nconst TextError = lazy(() => import(\"../../components/TextError/TextError\"));\r\n\r\nconst emailRegExp = /^([a-zA-Z0-9]+\\.?[a-zA-Z0-9]*)@[a-zA-Z0-9^\\.]+\\.([a-zA-Z]+\\.?[a-zA-Z]*)$/\r\n\r\nexport default function Profile({route, navigation }) {\r\n\r\n    const authCtx = useContext(CsrfCtx);\r\n    const accCtx = useContext(AccountCtx);\r\n\r\n    const [newUsername, setNewUserName] = useState(\"\");\r\n    const [newEmail, setNewEmail] = useState(\"\");\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [width, setWidth] = useState(useWindowDimensions().width);\r\n    const [usernameUpdated, setUsernameUpdated] = useState(false);\r\n    const [emailUpdated, setEmailUpdated] = useState(false);\r\n    const [passwordUpdated, setPasswordUpdated] = useState(false);\r\n    const [errorBackColor, setErrorBackColor] = useState(\"red\");\r\n    const [errorMsg, setErrorMsg] = useState(\"\");\r\n    const [mount, setMount] = useState(true);\r\n\r\n    // Calls when `Form` component is mounted\r\n    useEffect(() => {\r\n        accCtx.checkCred(authCtx, BACKEND)\r\n    }, [mount]);\r\n\r\n    /**\r\n     * Sets the new username\r\n     * \r\n     * @param {string} usernameTxt \r\n     */\r\n    function updateUsernameHandler(usernameTxt) {\r\n        setNewUserName(usernameTxt);\r\n    }\r\n\r\n    /**\r\n     * Sets the new email\r\n     * \r\n     * @param {string} emailTxt \r\n     */\r\n    function updateEmailHander(emailTxt) {\r\n        setNewEmail(emailTxt);\r\n    }\r\n\r\n    /**\r\n     * Sets then new password\r\n     * \r\n     * @param {string} passwordTxt \r\n     */\r\n    function updatePaswordHandler(passwordTxt) {\r\n        setNewPassword(passwordTxt);\r\n    }\r\n\t\r\n    /**\r\n     * Submits the updated username\r\n     */\r\n    async function submitUsername() {\r\n        if (newUsername === \"\") {\r\n            ErrorHandler(\"You haven't entered a username\", 0, true);\r\n            return;\r\n        }\r\n        try {\r\n            let response = await axios.put(`${BACKEND}/api/updateUserInfo/`, {username: newUsername}, {\r\n                headers: {\"X-CSRFToken\": authCtx.token, \"credentials\": \"include\"},\r\n\t\t\t\twithCredentials: true,\r\n                responseType: \"json\"\r\n            })\r\n            let content = await response.data;\r\n            \r\n            accCtx.setUsername(newUsername)\r\n            \r\n            let message = \"\";\r\n            for (const msg in content) {\r\n                message = content[msg];\r\n            }\r\n\r\n            ErrorHandler(message, 0, false);\r\n\r\n        } catch (error) {\r\n            ErrorHandler(error.response.data.message, 0, true);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Submits the updated email\r\n     */\r\n    async function submitEmail() {\r\n        if (newEmail === \"\" || newEmail.match(emailRegExp) === null) {\r\n            ErrorHandler(\"You haven't entered a valid email\", 1, true);\r\n            return;\r\n        }\r\n        try {\r\n            let response = await axios.put(`${BACKEND}/api/updateUserInfo/`, {email: newEmail}, {\r\n                headers: {\"X-CSRFToken\": authCtx.token, \"credentials\": \"include\"},\r\n\t\t\t\twithCredentials: true,\r\n                responseType: \"json\"\r\n            })\r\n            let content = await response.data;\r\n\r\n            accCtx.setEmail(newEmail)\r\n\r\n            let message = \"\";\r\n            for (const msg in content) {\r\n                message = content[msg];\r\n            }\r\n\r\n            ErrorHandler(message, 1, false);\r\n        } catch (error) {\r\n            ErrorHandler(error.response.data.message, 1, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Submits the updated password\r\n     */\r\n    async function submitPassword() {\r\n        if (newPassword === \"\") {\r\n            ErrorHandler(\"You haven't entered a password\", 2, true);\r\n            return;\r\n        }\r\n        try {\r\n            let response = await axios.put(`${BACKEND}/api/updateUserInfo/`, {password: newPassword}, {\r\n                headers: {\"X-CSRFToken\": authCtx.token, \"credentials\": \"include\"},\r\n\t\t\t\twithCredentials: true,\r\n                responseType: \"json\"\r\n            })\r\n            let content = await response.data;\r\n\r\n            let message = \"\";\r\n            for (const msg in content) {\r\n                message = content[msg];\r\n            }\r\n\r\n            ErrorHandler(message, 2, false);\r\n\r\n        } catch (error) {\r\n            ErrorHandler(error.response.data.message, 2, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Displays the error message via toggling the `error` state\r\n     * \r\n     * @param {string} message\r\n     * @param {number} fieldId\r\n     * @param {boolean} isError\r\n     */\r\n    function ErrorHandler(message, fieldId, isError) {\r\n        if (isError) {\r\n            setErrorBackColor(\"red\")\r\n        }\r\n        else {\r\n            setErrorBackColor(\"green\");\r\n        }\r\n        switch (fieldId) {\r\n            case 0:\r\n                setUsernameUpdated(true);\r\n                setEmailUpdated(false);\r\n                setPasswordUpdated(false);\r\n                break;\r\n            case 1:\r\n                setUsernameUpdated(false);\r\n                setEmailUpdated(true);\r\n                setPasswordUpdated(false);\r\n                break;\r\n            case 2:\r\n                setUsernameUpdated(false);\r\n                setEmailUpdated(false);\r\n                setPasswordUpdated(true);\r\n                break;\r\n            default:\r\n                setUsernameUpdated(false);\r\n                setEmailUpdated(false);\r\n                setPasswordUpdated(false);\r\n        }\r\n        setErrorMsg(message);\r\n    }\r\n\r\n    let customWidth = width < 700 ? width * 0.7 : width * 0.5;\r\n\r\n    return (\r\n        <View style={{...styles.pageContainer, alignItems: \"center\"}}>\r\n            <IndiviudalForm\r\n                containerStyle={{alignItems: \"center\"}}\r\n                label=\"Username:\"\r\n                labelStyle={{...profileStyles.userField, fontWeight: \"bold\"}}\r\n                labelValueHidden={false}\r\n                labelValue={accCtx.username}\r\n                labelValueStyle={profileStyles.userField}\r\n                placeholder=\"Please enter new username\"\r\n                onChangeText={updateUsernameHandler}\r\n                inputPromptStyle={{...FormStyle.formInput, width: customWidth}}\r\n                submitText=\"Update Username\"\r\n                submitHandler={submitUsername}\r\n                submitStyle={profileStyles.submitButton}\r\n            />\r\n            <TextError\r\n                style={{...styles.errorMsg, backgroundColor: errorBackColor}}\r\n                hasError={usernameUpdated}\r\n                message={errorMsg}\r\n            />\r\n            <IndiviudalForm\r\n                containerStyle={{alignItems: \"center\"}}\r\n                label=\"Email:\"\r\n                labelStyle={{...profileStyles.userField, fontWeight: \"bold\"}}\r\n                labelValueHidden={false}\r\n                labelValue={accCtx.email}\r\n                labelValueStyle={profileStyles.userField}\r\n                placeholder=\"Please enter new email\"\r\n                onChangeText={updateEmailHander}\r\n                inputPromptStyle={{...FormStyle.formInput, width: customWidth}}\r\n                submitText=\"Update Email\"\r\n                submitHandler={submitEmail}\r\n                submitStyle={profileStyles.submitButton}\r\n            />\r\n            <TextError\r\n                style={{...styles.errorMsg, backgroundColor: errorBackColor}}\r\n                hasError={emailUpdated}\r\n                message={errorMsg}\r\n            />\r\n            <IndiviudalForm\r\n                containerStyle={{alignItems: \"center\"}}\r\n                label=\"Password:\"\r\n                labelStyle={{...profileStyles.userField, fontWeight: \"bold\"}}\r\n                labelValueHidden={true}\r\n                placeholder=\"Please enter new Password\"\r\n                onChangeText={updatePaswordHandler}\r\n                inputPromptStyle={{...FormStyle.formInput, width: customWidth}}\r\n                submitText=\"Update Password\"\r\n                submitHandler={submitPassword}\r\n                submitStyle={profileStyles.submitButton}\r\n            />\r\n            <TextError\r\n                style={{...styles.errorMsg, backgroundColor: errorBackColor}}\r\n                hasError={passwordUpdated}\r\n                message={errorMsg}\r\n            />\r\n        </View>\r\n    );\r\n}"],"sourceRoot":""}