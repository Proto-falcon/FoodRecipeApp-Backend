{"version":3,"sources":["src/components/RecipeList/RecipeListStyle.js","src/components/WrappingItems/WrappingItems.js","src/components/RecipeCover/RecipeCover.js","src/components/RecipeList/RecipeList.js"],"names":["recipeListStyle","StyleSheet","create","foodPicContainer","alignItems","foodPic","height","width","resizeMode","nameRatingContainer","marginTop","marginBottom","borderWidth","padding","foodName","fontWeight","textAlign","WrappingItems","items","renderItems","style","flexDirection","flexWrap","renderedItems","forEach","item","i","push","index","RecipeCover","flexGrow","navigation","useNavigation","authCtx","useContext","CsrfCtx","recipeResultsCtx","RecipeResultsCtx","useState","rating","image","startsWith","uri","BACKEND","defaultImage","recipe","axios","post","id","headers","token","credentials","withCredentials","responseType","error","setCurrentRecipeURI","navigate","View","Image","source","Text","name","Pressable","onPress","toRecipeInfo","icon","RecipeList","props","recipes","setRecipes","Date","getTime","lastLoaded","setLastLoaded","loadedAllRecipes","setLoadedAllRecipes","loadMoreRecipes","distanceFromEnd","undefined","setData","canLoad","lastFetched","recipeLink","response","method","url","content","data","results","addRecipesLink","length","prevState","newState","NoMoreRecipes","useEffect","recArray","Platform","OS","FlatList","renderItem","onEndReached","onEndReachedThreshold","extraData","ScrollView","loadMore","backgroundColor","fontSize"],"mappings":"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","file":"static/js/11.76a14bd3.chunk.js","sourcesContent":["import { StyleSheet } from \"react-native\";\r\n\r\nexport const recipeListStyle = StyleSheet.create(\r\n    {\r\n        foodPicContainer:\r\n        {\r\n            alignItems: \"center\"\r\n        },\r\n        foodPic:\r\n        {\r\n            height: 200,\r\n            width: \"100%\",\r\n            resizeMode: \"contain\"\r\n        },\r\n\r\n        nameRatingContainer: {\r\n            marginTop: 20,\r\n            marginBottom: 20,\r\n            borderWidth: 1,\r\n            padding: 10,\r\n        },\r\n\r\n        foodName:\r\n        {\r\n            fontWeight: \"bold\",\r\n            textAlign: \"center\"\r\n        }\r\n    });\r\n","import { View } from \"react-native\";\n\n/**\n * List built for displaying items horizontally that can automatically\n * wraps to the next line.\n * \n * @param {{\n *      style?: any,\n *      items: any[],\n *      renderItems: ({item: any, index: number}) => JSX.Element\n * }} props \n * @returns Horizontal list of items that wraps to next line when\n * the list of items can't fit in 1 line.\n */\nexport default function WrappingItems({ items, renderItems, style }) {\n\n    function Items() {\n        let renderedItems = [];\n\t\titems.forEach((item, i) => {\n\t\t\trenderedItems.push(renderItems({ item: item, index: i }));\n\t\t});\n\t\treturn renderedItems;\n\t}\n\n    return (\n        <View\n            style={{\n                ...style,\n                flexDirection: \"row\",\n                flexWrap: \"wrap\",\n            }}\n        >\n            <Items />\n        </View>\n    );\n}","import { useNavigation } from \"@react-navigation/native\";\r\nimport axios from \"axios\";\r\nimport { useContext, useState } from \"react\";\r\nimport { Image, Pressable, Text, View } from \"react-native\";\r\nimport { CsrfCtx } from \"../../context/CsrfToken\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\nimport { recipeListStyle } from \"../RecipeList/RecipeListStyle\";\r\nimport { RecipeResultsCtx } from \"../../context/Context\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-native-fontawesome\";\r\nimport { defaultImage } from \"../../Constants\";\r\n\r\n/**\r\n * Renders a recipe with in image and name\r\n * \r\n * @typedef {import(\"../../Constants\").recipe} recipe \r\n * @param {{\r\n *      item: recipe,\r\n * \t\theight: number | string,\r\n * \t\twidth: number | string,\r\n * \t\tflexGrow?: number\r\n * }} prop\r\n * @returns A recipe with image and name\r\n */\r\nexport default function RecipeCover({ item, height, width, flexGrow }) {\r\n\tconst navigation = useNavigation();\r\n\tconst authCtx = useContext(CsrfCtx);\r\n\tconst recipeResultsCtx = useContext(RecipeResultsCtx);\r\n\tconst [rating, setRating] = useState(() => {\r\n\t\tif (item.rating === null) {\r\n\t\t\treturn \"No Rating\";\r\n\t\t} else {\r\n\t\t\treturn item.rating;\r\n\t\t}\r\n\t});\r\n\r\n\tconst [image, setImage] = useState(() => {\r\n\t\tif (item.image !== \"\") {\r\n\t\t\tlet image = item.image;\r\n\t\t\tif (!image.startsWith(\"http\")) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\turi: `${BACKEND}${item.image}`,\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\treturn { uri: item.image, height: \"100%\", width: \"100%\" };\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn defaultImage;\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t * Adds going to be viewed recipe in recents for the logged in user\r\n\t * before going to recipe page.\r\n\t *\r\n\t * @param {recipe} recipe\r\n\t */\r\n\tasync function toRecipeInfo(recipe) {\r\n\t\ttry {\r\n\t\t\tawait axios.post(\r\n\t\t\t\t`${BACKEND}/api/setRecentRecipe/`,\r\n\t\t\t\t{ id: recipe.id },\r\n\t\t\t\t{\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\"X-CSRFToken\": authCtx.token,\r\n\t\t\t\t\t\tcredentials: \"include\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\twithCredentials: true,\r\n\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (error) {}\r\n\t\trecipeResultsCtx.setCurrentRecipeURI(recipe.id);\r\n\t\tnavigation.navigate(\"RecipeInfo\", { id: recipe.id });\r\n\t}\r\n\r\n\tif (item.id === \"\") {\r\n\t\treturn (\r\n\t\t\t<View\r\n\t\t\t\tkey={item.id}\r\n\t\t\t\tstyle={{ width: width, height: height, flexGrow: flexGrow }}\r\n\t\t\t>\r\n\t\t\t\t<View style={recipeListStyle.foodPicContainer}>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tstyle={recipeListStyle.foodPic}\r\n\t\t\t\t\t\tsource={image}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\t\t\t\t<Text style={recipeListStyle.foodName}>{item.name}</Text>\r\n\t\t\t</View>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<Pressable\r\n\t\t\t\tkey={item.id}\r\n\t\t\t\tonPress={() => toRecipeInfo(item)}\r\n\t\t\t\tstyle={{ width: width, height: height, flexGrow: flexGrow }}\r\n\t\t\t>\r\n\t\t\t\t<View style={recipeListStyle.foodPicContainer}>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tstyle={recipeListStyle.foodPic}\r\n\t\t\t\t\t\tsource={image}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\t\t\t\t<View style={recipeListStyle.nameRatingContainer}>\r\n\t\t\t\t\t<Text style={recipeListStyle.foodName}>{item.name}</Text>\r\n\t\t\t\t\t<Text style={recipeListStyle.foodName}><FontAwesomeIcon icon={\"star\"} /> {rating}</Text>\r\n\t\t\t\t</View>\r\n\t\t\t</Pressable>\r\n\t\t);\r\n\t}\r\n}\r\n","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n\tFlatList,\r\n\tPlatform,\r\n\tPressable,\r\n\tScrollView,\r\n\tText,\r\n\tView,\r\n} from \"react-native\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\nimport RecipeCover from \"../RecipeCover/RecipeCover\";\r\nimport WrappingItems from \"../WrappingItems/WrappingItems\";\r\nimport { NoMoreRecipes } from \"../../Constants\";\r\n\r\n/**\r\n * Renders a list of Recipes\r\n * @typedef {import(\"../../Constants\").recipe} recipe\r\n * @param {{\r\n * \trecipes: Array<recipe>,\r\n * \tcanLoad: boolean\r\n *  recipeLink?: string,\r\n *  setData?: (recipeResults: Array<recipe>, addRecipesLink: string) => void,\r\n * }} props\r\n * @returns List of Recipes\r\n */\r\nexport default function RecipeList(props) {\r\n\r\n\tconst [recipes, setRecipes] = useState(props.recipes);\r\n\r\n\tconst [lastLoaded, setLastLoaded] = useState(new Date().getTime());\r\n\tconst [loadedAllRecipes, setLoadedAllRecipes] = useState(false);\r\n\r\n\t/**\r\n\t * Updates the `recipes` array and checks if there are more recipes to load\r\n\t *\r\n\t * When the Search page is the first screen loaded it will never `unmount` while navigating\r\n\t * to other screens then back to it because `react-navigation` it keeps previously loaded screens mounted.\r\n\t * If you go back to a previously loaded screen it will unmount the screens that you loaded after that screen.\r\n\t */\r\n\tuseEffect(() => {\r\n\t\tif (\r\n\t\t\tprops.canLoad && props.recipes.length < 20 &&\r\n\t\t\t(props.recipeLink !== \"\" || props.recipeLink !== undefined) &&\r\n\t\t\tprops.recipes[props.recipes.length - 1].id !== \"\"\r\n\t\t) {\r\n\t\t\tsetLoadedAllRecipes(true);\r\n\t\t\tsetRecipes(() => {\r\n\t\t\t\tlet recArray = props.recipes;\r\n\t\t\t\trecArray.push(NoMoreRecipes);\r\n\t\t\t\treturn recArray;\r\n\t\t\t});\r\n\t\t}\r\n\t\tsetRecipes(props.recipes);\r\n\t}, [props.recipes]);\r\n\r\n\t/**\r\n\t * Adds more recipes to the current list\r\n\t * when the user scrolls near the bottom\r\n\t *\r\n\t * @param {{distanceFromEnd: number}?} info\r\n\t */\r\n\tasync function loadMoreRecipes({ distanceFromEnd }) {\r\n\t\tif (props.setData !== undefined && props.canLoad) {\r\n\t\t\tconst lastFetched = new Date().getTime();\r\n\t\t\tif (\r\n\t\t\t\tprops.recipeLink != undefined &&\r\n\t\t\t\tprops.recipeLink != \"\" &&\r\n\t\t\t\t!loadedAllRecipes && (lastFetched - lastLoaded > 6000)\r\n\t\t\t) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlet response = await axios({\r\n\t\t\t\t\t\tmethod: \"get\",\r\n\t\t\t\t\t\turl: `${BACKEND}/api/addRecipes/?nextLink=${props.recipeLink}`,\r\n\t\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tlet content = await response.data;\r\n\t\t\t\t\tprops.setData(content.results, content.addRecipesLink);\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tsetLoadedAllRecipes(true);\r\n\t\t\t\t}\r\n\t\t\t\tsetLastLoaded(lastFetched);\r\n\t\t\t} else if (\r\n\t\t\t\trecipes[recipes.length - 1].id != \"\" &&\r\n\t\t\t\tloadedAllRecipes\r\n\t\t\t) {\r\n\t\t\t\tsetRecipes((prevState) => {\r\n\t\t\t\t\tlet newState = [...prevState];\r\n\t\t\t\t\tnewState.push(NoMoreRecipes);\r\n\r\n\t\t\t\t\treturn newState;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the load more button to load more recipes\r\n\t *\r\n\t * @param {{loadMore: boolean}} props\r\n\t * @returns Load more button\r\n\t */\r\n\tfunction LoadMoreRecipesButton({ loadMore }) {\r\n\t\tif (loadMore) {\r\n\t\t\treturn (\r\n\t\t\t\t<Pressable\r\n\t\t\t\t\tstyle={{ backgroundColor: \"ff6e00\", padding: 5 }}\r\n\t\t\t\t\tonPress={loadMoreRecipes}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Text\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\tfontWeight: \"bold\",\r\n\t\t\t\t\t\t\tfontSize: 50,\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tLoad More\r\n\t\t\t\t\t</Text>\r\n\t\t\t\t</Pressable>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<View style={{width: \"100%\"}}>\r\n\t\t\t{Platform.OS != \"web\" ? (\r\n\t\t\t\t<FlatList\r\n\t\t\t\t\tdata={recipes}\r\n\t\t\t\t\trenderItem={({ item }) => (\r\n\t\t\t\t\t\t<RecipeCover\r\n\t\t\t\t\t\t\theight={300}\r\n\t\t\t\t\t\t\twidth={\"100%\"}\r\n\t\t\t\t\t\t\titem={item}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\tonEndReached={loadMoreRecipes}\r\n\t\t\t\t\tonEndReachedThreshold={2}\r\n\t\t\t\t\textraData={recipes}\r\n\t\t\t\t/>\r\n\t\t\t) : (\r\n\t\t\t\t<ScrollView>\r\n\t\t\t\t\t<WrappingItems\r\n\t\t\t\t\t\titems={recipes}\r\n\t\t\t\t\t\trenderItems={({ item, index }) => (\r\n\t\t\t\t\t\t\t<RecipeCover\r\n\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\theight={300}\r\n\t\t\t\t\t\t\t\twidth={300}\r\n\t\t\t\t\t\t\t\titem={item}\r\n\t\t\t\t\t\t\t\tflexGrow={1}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<LoadMoreRecipesButton\r\n\t\t\t\t\t\tloadMore={props.canLoad && !loadedAllRecipes && props.recipeLink !== \"\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</ScrollView>\r\n\t\t\t)}\r\n\t\t</View>\r\n\t);\r\n}\r\n"],"sourceRoot":""}