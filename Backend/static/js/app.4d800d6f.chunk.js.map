{"version":3,"sources":["src/components/Buttons/SearchButton.js","src/pages/Search/SearchStyle.js","assets/favicon.png","src/Routes.js","src/components/RecipeCover/RecipeCover.js","src/components/Buttons/LogOutButton.js","src/AppStyles.js","src/context/Context.js","src/pages/Search/Search.js","src/pages/SearchOptions/SearchOptions.js","src/pages/Form/FormStyles.js","src/pages/Form/Form.js","src/pages/Profile/ProfileStyles.js","src/pages/Profile/Profile.js","src/components/NavBar/NavBarStyle.js","src/App.js","index.js","src/ipaddressesports/BackEndIP.js","src/context/account.js","src/context/CsrfToken.js","src/pages/SearchOptions/SearchOptionsStyle.js","src/components/RecipeList/RecipeListStyle.js","src/context/Navigation.js","src/components/NavBar/NavBar.js"],"names":["SearchButton","to","screen","style","SearchStyle","imgContainer","icon","size","StyleSheet","create","container","flex","alignItems","margin","module","exports","Routes","config","screens","Home","Search","RecipeInfo","SignIn","Login","Profile","RecipeCover","item","height","width","navigation","useNavigation","authCtx","useContext","CsrfCtx","accCtx","AccountCtx","useState","image","uri","require","recipe","loggedIn","axios","post","BACKEND","id","headers","token","credentials","withCredentials","responseType","error","navigate","source","recipeListStyle","foodPicContainer","foodPic","foodName","name","onPress","toRecipeInfo","LogOutButton","tokenCtx","response","get","content","data","loggedOut","logOut","setUsername","setEmail","setCsrfToken","padding","styles","navText","searchIcon","resizeMode","marginRight","navLink","color","fontSize","fontWeight","marginLeft","usernameText","marginTop","pageContainer","backgroundColor","errorMsg","borderRadius","RecipeResultsCtx","createContext","moreRecipesLink","setAddRecipesLink","link","exclusions","updateExclusions","newExclusions","results","ingredients","getRecipes","recipeList","addRecipes","isLoading","setIsLoading","boolean","ContextProvider","props","recipes","setRecipes","excluded","setExcluded","addRecipesLink","setAddLink","Provider","value","newExcludeState","newState","i","length","push","children","lazy","formInput","borderWidth","formLabel","textAlign","submitButton","userField","recentRecipes","borderTopWidth","flexDirection","flexWrap","justifyContent","NavBarStyle","library","add","faMagnifyingGlass","faBan","faXmark","registerRootComponent","createNativeStackNavigator","NavBar","StatusBar","username","email","login","newUsername","newEmail","checkCred","csrfCtx","domain","AccountProvider","isLoggedIn","setIsLoggedIn","user","LogInHandler","setUsernameHandler","setEmailHandler","match","newToken","CsrfContextProvider","setToken","SearchOptionsStyle","paddingTop","textButtonContainer","flexBasis","maxHeight","input","paddingBottom","borderColor","exclude","paddingLeft","marginBottom","excludedHeader","excludeList","borderLeftWidth","borderRightWidth","optionsContainer","minWidth","optionTypesContainer","optionTypes","text","optionTypeHeader","selectedMetaText","selectedOptionsContainer","minHeight","Navigation","route","updateRoute","newRoute","Nav","initRoutes","routeName","routes","console","log","View","Text"],"mappings":"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","file":"static/js/app.4d800d6f.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-native-fontawesome\";\r\nimport { Link } from \"@react-navigation/native\";\r\nimport { SearchStyle } from \"../../pages/Search/SearchStyle\";\r\n\r\n/**\r\n * Renders the Search Button\r\n * @returns Button that links to the Search Options page\r\n */\r\nexport default function SearchButton() {\r\n\treturn (\r\n\t\t<Link\r\n\t\t\tto={{ screen: \"Search\" }}\r\n\t\t\tstyle={SearchStyle.imgContainer}\r\n\t\t>\r\n\t\t\t<FontAwesomeIcon icon={\"magnifying-glass\"} size={20} />\r\n\t\t</Link>\r\n\t);\r\n}\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport const SearchStyle = StyleSheet.create(\r\n    {\r\n        container: {\r\n            flex: 2,\r\n            alignItems: \"center\",\r\n        },\r\n\r\n        imgContainer: {\r\n            margin: 7\r\n        },\r\n    });","module.exports = __webpack_public_path__ + \"static/media/favicon.fa4783d1.png\";","const Linking = {\r\n    config: {\r\n        screens: {\r\n            Home: \"Home\",\r\n            Search: \"Search\",\r\n            RecipeInfo: \"RecipeInfo/:id\",\r\n            SignIn: \"SignUp\",\r\n            Login: \"Login\",\r\n            Profile: \"Profile\",\r\n        },\r\n    },\r\n};\r\nlet Routes = {};\r\nexport default Routes = Linking;","import { useNavigation } from \"@react-navigation/native\";\r\nimport axios from \"axios\";\r\nimport { useContext, useState } from \"react\";\r\nimport { Image, Pressable, Text, useWindowDimensions, View } from \"react-native\";\r\nimport { AccountCtx } from \"../../context/account\";\r\nimport { CsrfCtx } from \"../../context/CsrfToken\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\nimport { recipeListStyle } from \"../RecipeList/RecipeListStyle\";\r\n\r\n/**\r\n * Renders a recipe with in image and name\r\n *\r\n * @typedef {{\r\n *  \tid: string,\r\n * \t\tname: string,\r\n *  \timage: any,\r\n *  \tingredients: Array<string>,\r\n * \t\tsource: string\r\n * \t}} recipe\r\n *\r\n * @param {{\r\n *      item: recipe,\r\n * \t\theight: number | string,\r\n * \t\twidth: number | string\r\n * }} prop\r\n * @returns A recipe with image and name\r\n */\r\nexport default function RecipeCover({ item, height,  width}) {\r\n\r\n    const navigation = useNavigation();\r\n\tconst authCtx = useContext(CsrfCtx);\r\n\tconst accCtx = useContext(AccountCtx);\r\n\r\n\t// const [width, setWidth] = useState(useWindowDimensions().width);\r\n\tconst [image, setImage] = useState(() => {\r\n        if (item.image !== \"\") {\r\n            return { uri: item.image, height: \"100%\", width: \"100%\" };\r\n        } else {\r\n            return require(\"../../../assets/favicon.png\");\r\n        }\r\n    });\r\n\r\n    /**\r\n\t * Adds going to be viewed recipe in recents for the logged in user\r\n\t * before going to recipe page.\r\n\t *\r\n\t * @param {recipe} recipe\r\n\t */\r\n\tasync function toRecipeInfo(recipe) {\r\n\t\tif (accCtx.loggedIn) {\r\n\t\t\ttry {\r\n\t\t\t\tawait axios.post(\r\n\t\t\t\t\t`${BACKEND}/api/setRecentRecipe/`,\r\n\t\t\t\t\t{ id: recipe.id },\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\"X-CSRFToken\": authCtx.token,\r\n\t\t\t\t\t\t\tcredentials: \"include\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\twithCredentials: true,\r\n\t\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t} catch (error) {}\r\n\t\t}\r\n\t\tnavigation.navigate(\"RecipeInfo\", { id: recipe.id });\r\n\t}\r\n\r\n\tif (item.source === \"\") {\r\n\t\treturn (\r\n\t\t\t<View key={item.id} style={{width: width, height: height}}>\r\n\t\t\t\t<View style={recipeListStyle.foodPicContainer}>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tstyle={recipeListStyle.foodPic}\r\n\t\t\t\t\t\tsource={image}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\t\t\t\t<Text style={recipeListStyle.foodName}>{item.name}</Text>\r\n\t\t\t</View>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<Pressable\r\n\t\t\t\tkey={item.id}\r\n\t\t\t\tonPress={() => toRecipeInfo(item)}\r\n\t\t\t\tstyle={{width: width, height: height}}\r\n\t\t\t>\r\n\t\t\t\t<View style={recipeListStyle.foodPicContainer}>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tstyle={recipeListStyle.foodPic}\r\n\t\t\t\t\t\tsource={image}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\t\t\t\t<Text style={recipeListStyle.foodName}>{item.name}</Text>\r\n\t\t\t</Pressable>\r\n\t\t);\r\n\t}\r\n}\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport axios from \"axios\";\r\nimport { useContext } from \"react\";\r\nimport { Pressable, Text } from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport { AccountCtx } from \"../../context/account\";\r\nimport { CsrfCtx } from \"../../context/CsrfToken\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\n\r\n/**\r\n * Renders the Logout Button\r\n *\r\n * @returns Logut Button\r\n */\r\nexport default function LogOutButton() {\r\n\tconst tokenCtx = useContext(CsrfCtx);\r\n\tconst accCtx = useContext(AccountCtx);\r\n\tconst navigation = useNavigation();\r\n\r\n\t/**\r\n\t * Logs the user out from the backend server `session`.\r\n\t */\r\n\tasync function LogOutHandler() {\r\n\t\tlet response = await axios.get(`${BACKEND}/api/logout/`);\r\n\t\tlet content = await response.data;\r\n\r\n\t\tif (content.loggedOut) {\r\n\t\t\taccCtx.logOut();\r\n\t\t\taccCtx.setUsername(\"\");\r\n\t\t\taccCtx.setEmail(\"\");\r\n\t\t\ttokenCtx.setCsrfToken(content.token);\r\n\t\t\tnavigation.navigate(\"Home\");\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Pressable\r\n\t\t\tstyle={{ padding: 5 }}\r\n\t\t\tonPress={LogOutHandler}\r\n\t\t>\r\n\t\t\t<Text style={styles.navText}>Sign Out</Text>\r\n\t\t</Pressable>\r\n\t);\r\n}\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport const styles = StyleSheet.create({\r\n\tsearchIcon: {\r\n\t\theight: 20,\r\n\t\twidth: 20,\r\n\t\tresizeMode: \"contain\",\r\n\t\tmarginRight: 10\r\n\t},\r\n\r\n\tnavLink: {\r\n\t\tpadding: 5\r\n\t},\r\n\r\n\tnavText: {\r\n\t\tcolor: \"white\",\r\n\t\tfontSize: 18,\r\n\t\tfontWeight: \"500\",\r\n\t\tmarginLeft: 10,\r\n\t},\r\n\r\n\tusernameText: {\r\n\t\tcolor: \"black\",\r\n\t\tfontSize: 12,\r\n\t\tfontWeight: \"400\",\r\n\t\tmarginLeft: 10,\r\n\t\tmarginTop: 5\r\n\t},\r\n\r\n\tpageContainer: {\r\n\t\tbackgroundColor: \"#ffffff\"\r\n\t},\r\n\r\n\terrorMsg: {\r\n\t\tcolor: \"white\",\r\n\t\tbackgroundColor: \"red\",\r\n\t\tpadding: 10,\r\n\t\tfontWeight: \"bold\",\r\n\t\tfontSize: 20,\r\n\t\tborderRadius: 20,\r\n\t},\r\n});","import { createContext, useState } from \"react\";\r\nimport AccountProvider from \"./account\";\r\nimport CsrfContextProvider from \"./CsrfToken\";\r\n\r\n// Creates a context for reciperesults\r\nexport const RecipeResultsCtx = createContext({\r\n\tmoreRecipesLink: \"\", // Link to fetch more recipes\r\n\tsetAddRecipesLink: (link) => {}, // set Recipes link\r\n\texclusions: [\"\"],\r\n\tupdateExclusions: (newExclusions) => {},\r\n\tresults: [\r\n\t\t// array of recipes\r\n\t\t{\r\n\t\t\tid: \"\",\r\n\t\t\tname: \"No Recipe Name Available\",\r\n\t\t\timage: require(\"../../assets/favicon.png\"),\r\n\t\t\tingredients: [\"\"],\r\n\t\t\tsource: \"\"\r\n\t\t},\r\n\t],\r\n\tgetRecipes: (recipeList) => {}, // Create a list of recipes\r\n\taddRecipes: (recipeList, link) => {}, // Add recipes to the current list\r\n\tisLoading: false,\r\n\tsetIsLoading: (boolean) => {}\r\n});\r\n\r\n/**\r\n * Component only used for managing context for the whole app\r\n * \r\n * @param {*} props \r\n * @returns Child Elements\r\n */\r\nexport default function ContextProvider(props) {\r\n\r\n\t// Array of recipes\r\n\tconst [recipes, setRecipes] = useState([\r\n\t\t{\r\n\t\t\tid: \"\",\r\n\t\t\tname: \"No Recipe Name Available\",\r\n\t\t\timage: \"\",\r\n\t\t\tingredients: [\"None\"],\r\n\t\t\tsource: \"\",\r\n\t\t},\r\n\t]);\r\n\r\n\tconst [excluded, setExcluded] = useState([]);\r\n\r\n\t/**\r\n\t * Updates the `excluded` state\r\n\t * \r\n\t * @param {string[]} newExcludeState \r\n\t */\r\n\tfunction changeExcluded(newExcludeState) {\r\n\t\tsetExcluded(newExcludeState);\r\n\t}\r\n\r\n\t// link to recipes\r\n\tconst [addRecipesLink, setAddRecipesLink] = useState(\"\");\r\n\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\t/**\r\n\t * Sets link to fetch more recipes\r\n\t *\r\n\t * @param {string} link\r\n\t */\r\n\tfunction setAddLink(link) {\r\n\t\tsetAddRecipesLink(link);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an array with recipes\r\n\t *\r\n\t * @param {Array<{\r\n\t * \tid: string,\r\n\t *  name: string,\r\n\t *  image: string,\r\n\t *  ingredients: Array<string>,\r\n\t *  source: string\r\n\t * }>} recipeList\r\n\t */\r\n\tfunction GetRecipes(recipeList) {\r\n\t\tif (recipeList[0].id != \"\") {\r\n\t\t\tsetRecipes([\r\n\t\t\t\t{\r\n\t\t\t\t\tid: \"\",\r\n\t\t\t\t\tname: \"No Recipe Name Available\",\r\n\t\t\t\t\timage: \"\",\r\n\t\t\t\t\tingredients: [\"None\"],\r\n\t\t\t\t\tsource: \"\",\r\n\t\t\t\t},\r\n\t\t\t]);\r\n\t\t\t\r\n            let newState = recipeList;\r\n            setRecipes(newState);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a new array that adds a new recipes\r\n\t * to the current list and updates link to\r\n\t * fetch more recipes\r\n\t *\r\n\t * @param {Array<{\r\n\t * \tid: string\r\n\t *  name: string,\r\n\t *  image: string,\r\n\t *  ingredients: Array<string>,\r\n\t *  source: string\r\n\t * }>} recipeList\r\n\t * @param {string} link\r\n\t */\r\n\tfunction addRecipes(recipeList, link) {\r\n\t\tlet newState = [];\r\n\r\n\t\tfor (let i = 0; i < recipes.length; i++) {\r\n\t\t\tnewState.push(recipes[i]);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < recipeList.length; i++) {\r\n\t\t\tnewState.push(recipeList[i]);\r\n\t\t}\r\n\r\n\t\tsetRecipes(newState);\r\n\t\tsetAddLink(link);\r\n\t}\r\n\r\n\t/**\r\n\t * Wraps the whole app in a context provider\r\n\t */\r\n\treturn (\r\n\t\t<CsrfContextProvider>\r\n\t\t\t<AccountProvider>\r\n\t\t\t\t<RecipeResultsCtx.Provider\r\n\t\t\t\t\tvalue={{\r\n\t\t\t\t\t\tmoreRecipesLink: addRecipesLink,\r\n\t\t\t\t\t\texclusions: excluded,\r\n\t\t\t\t\t\tupdateExclusions: changeExcluded,\r\n\t\t\t\t\t\tresults: recipes,\r\n\t\t\t\t\t\tgetRecipes: GetRecipes,\r\n\t\t\t\t\t\tsetAddRecipesLink: setAddLink,\r\n\t\t\t\t\t\taddRecipes: addRecipes,\r\n\t\t\t\t\t\tisLoading: isLoading,\r\n\t\t\t\t\t\tsetIsLoading: setIsLoading\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{props.children}\r\n\t\t\t\t</RecipeResultsCtx.Provider>\r\n\t\t\t</AccountProvider>\r\n\t\t</CsrfContextProvider>\r\n\t);\r\n}\r\n","import { lazy, Suspense, useContext, useEffect, useState } from \"react\";\r\nimport { ActivityIndicator, Text, View } from \"react-native\";\r\nimport { RecipeResultsCtx } from \"../../context/Context\";\r\nimport { Link } from \"@react-navigation/native\";\r\nimport { SearchStyle } from \"./SearchStyle\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport { CsrfCtx } from \"../../context/CsrfToken\";\r\nimport { AccountCtx } from \"../../context/account\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\nconst RecipeList = lazy(() => import(\"../../components/RecipeList/RecipeList\"));\r\nconst LogOutButton = lazy(() => import(\"../../components/Buttons/LogOutButton\"));\r\nconst NavBar = lazy(() => import(\"../../components/NavBar/NavBar\"));\r\nconst SearchButton = lazy(() => import(\"../../components/Buttons/SearchButton\"));\r\n\r\n/**\r\n * Renders the page with recipe results depending on\r\n * the options selected in Search Options page 🔎\r\n *\r\n * @returns Search Results Page\r\n */\r\nexport default function Search({ navigation }) {\r\n\tconst ctx = useContext(RecipeResultsCtx);\r\n\tconst csrfCtx = useContext(CsrfCtx);\r\n\tconst accCtx = useContext(AccountCtx);\r\n\r\n\tconst [isMounted, setIsMounted] = useState(true);\r\n\r\n\tuseEffect(() => ctx.setIsLoading(false), [ctx.isLoading]);\r\n\t\r\n\t// Checks the user has logged in when the app boots up\r\n\tuseEffect(() => {\r\n\t\taccCtx.checkCred(csrfCtx, BACKEND)\r\n\t}, [isMounted]);\r\n\r\n\ttry {\r\n\t\t// // Changes the navigation bar if the user is logged in or not.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (accCtx.loggedIn) {\r\n\t\t\t\tnavigation.setOptions({\r\n\t\t\t\t\theaderLeft: () => (\r\n\t\t\t\t\t\t<NavBar>\r\n\t\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t\t\tto={{ screen: \"Profile\" }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Text style={styles.navText}>Profile</Text>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t<Text style={styles.usernameText}>Username: {accCtx.username}</Text>\r\n\t\t\t\t\t\t</NavBar>\r\n\t\t\t\t\t),\r\n\t\t\t\t\theaderRight: () => (\r\n\t\t\t\t\t\t<NavBar>\r\n\t\t\t\t\t\t\t<LogOutButton />\r\n\t\t\t\t\t\t\t<SearchButton />\r\n\t\t\t\t\t\t</NavBar>\r\n\t\t\t\t\t),\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnavigation.setOptions({\r\n\t\t\t\t\theaderLeft: () => undefined,\r\n\t\t\t\t\theaderRight: () => (\r\n\t\t\t\t\t\t<NavBar>\r\n\t\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\t\tto={{ screen: \"Login\", params: {toLogin: true} }}\r\n\t\t\t\t\t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Text style={styles.navText}>Login</Text>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\t\tto={{ screen: \"SignUp\", params: {toLogin: false} }}\r\n\t\t\t\t\t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Text style={styles.navText}>Sign Up</Text>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t<SearchButton />\r\n\t\t\t\t\t\t</NavBar>\r\n\t\t\t\t\t),\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}, [accCtx.loggedIn, accCtx.username]);\r\n\t} catch (error) {\r\n\t\tconsole.log(error)\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<Suspense fallback={<ActivityIndicator size=\"large\"/>}>\r\n\t\t\t<View style={{...styles.pageContainer, ...SearchStyle.container}}>\r\n\t\t\t\t{!ctx.isLoading && (\r\n\t\t\t\t\t<RecipeList\r\n\t\t\t\t\t\trecipes={ctx.results}\r\n\t\t\t\t\t\tsetData={ctx.addRecipes}\r\n\t\t\t\t\t\trecipeLink={ctx.moreRecipesLink}\r\n\t\t\t\t\t\tshowEnd={true}\r\n\t\t\t\t\t\tnavigation={navigation}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</View>\r\n\t\t</Suspense>\r\n\t);\r\n}\r\n","import axios from \"axios\";\r\nimport { lazy, Suspense, useContext, useEffect, useState } from \"react\";\r\nimport {\r\n\tActivityIndicator,\r\n\tFlatList,\r\n\tPressable,\r\n\tText,\r\n\tTextInput,\r\n\tuseWindowDimensions,\r\n\tView,\r\n} from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport { SearchOptionsStyle } from \"./SearchOptionsStyle\";\r\nimport { Link } from \"@react-navigation/native\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-native-fontawesome\";\r\nimport { AccountCtx } from \"../../context/account\";\r\nimport { CsrfCtx } from \"../../context/CsrfToken\";\r\nimport { RecipeResultsCtx } from \"../../context/Context\";\r\nimport RecipeMetaOptions from \"../../RecipeMetaOptions\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\nconst RecipeOption = lazy(() =>\r\n\timport(\"../../components/RecipeOption/RecipeOption\")\r\n);\r\nconst TextError = lazy(() => import(\"../../components/TextError/TextError\"));\r\nconst NavBar = lazy(() => import(\"../../components/NavBar/NavBar\"));\r\nconst LogOutButton = lazy(() =>\r\n\timport(\"../../components/Buttons/LogOutButton\")\r\n);\r\nconst SelectedOptions = lazy(() =>\r\n\timport(\"../../components/SelectedOptions/SelectedOptions\")\r\n);\r\nconst WrappingItems = lazy(() =>\r\n\timport(\"../../components/WrappingItems/WrappingItems\")\r\n);\r\n\r\n/**\r\n * Renders a page that has options to search recipes\r\n *\r\n * @param {{ navigation: * }} props\r\n * @returns Search Options Page\r\n */\r\nexport default function SearchOptions({ navigation }) {\r\n\tconst ctx = useContext(RecipeResultsCtx);\r\n\tconst accCtx = useContext(AccountCtx);\r\n\tconst authCtx = useContext(CsrfCtx);\r\n\r\n\tconst [width, setWidth] = useState(useWindowDimensions().width);\r\n\r\n\t// collection of arrays of optional values\r\n\tconst [options, setOptions] = useState({\r\n\t\tdiet: [],\r\n\t\thealth: [],\r\n\t\tcuisineType: [],\r\n\t\tmealType: [],\r\n\t\tdishType: [],\r\n\t});\r\n\tconst [optionTypes, setNumOptions] = useState(() => {\r\n\t\tlet num = [];\r\n\t\tfor (const i in options) {\r\n\t\t\tnum.push(i);\r\n\t\t}\r\n\t\treturn num;\r\n\t});\r\n\tconst [optionType, setOptionType] = useState(optionTypes[0]);\r\n\tconst [inputIg, setinputIg] = useState(\"\"); // string of ingredients inputted by user\r\n\tconst [inputExclude, setInputExclude] = useState(\"\");\r\n\tconst [exclude, setExclude] = useState([]);\r\n\tconst [hasError, setHasError] = useState(false); // checks if the user hasn't inputted/selected ingredients\r\n\tconst [errorMsg, setErrorMsg] = useState(\"\");\r\n\tconst [mount, setMount] = useState(true);\r\n\r\n\t// Calls when `Form` component is mounted\r\n\tuseEffect(() => {\r\n\t\taccCtx.checkCred(authCtx, BACKEND);\r\n\t}, [mount]);\r\n\r\n\t// Changes the navigation bar if the user is logged in or not.\r\n\tuseEffect(() => {\r\n\t\tif (accCtx.loggedIn) {\r\n\t\t\tnavigation.setOptions({\r\n\t\t\t\theaderLeft: () => (\r\n\t\t\t\t\t<NavBar>\r\n\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t\tto={{ screen: \"Home\" }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Text style={styles.navText}>Home</Text>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t\tto={{ screen: \"Profile\" }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Text style={styles.navText}>Profile</Text>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t<Text style={styles.usernameText}>\r\n\t\t\t\t\t\t\tUsername: {accCtx.username}\r\n\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t</NavBar>\r\n\t\t\t\t),\r\n\t\t\t\theaderRight: () => <LogOutButton />,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tnavigation.setOptions({\r\n\t\t\t\theaderLeft: () => (\r\n\t\t\t\t\t<Link\r\n\t\t\t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\tto={{ screen: \"Home\" }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Text style={styles.navText}>Home</Text>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t),\r\n\t\t\t\theaderRight: () => (\r\n\t\t\t\t\t<NavBar>\r\n\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\tto={{ screen: \"Login\", params: { toLogin: true } }}\r\n\t\t\t\t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Text style={styles.navText}>Login</Text>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\tto={{\r\n\t\t\t\t\t\t\t\tscreen: \"SignUp\",\r\n\t\t\t\t\t\t\t\tparams: { toLogin: false },\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Text style={styles.navText}>Sign Up</Text>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</NavBar>\r\n\t\t\t\t),\r\n\t\t\t});\r\n\t\t}\r\n\t}, [accCtx.loggedIn]);\r\n\r\n\t/**\r\n\t * Updates the selected options\r\n\t *\r\n\t * @param {string} type\r\n\t * @param {Array<string>} optionsArray\r\n\t */\r\n\tfunction updateOptions(type, optionsArray) {\r\n\t\tsetOptions((preveState) => {\r\n\t\t\tlet newState = { ...preveState };\r\n\t\t\tnewState[type] = optionsArray;\r\n\r\n\t\t\treturn newState;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if all the options array are empty\r\n\t *\r\n\t * @returns true if all options are empty, false otherwise.\r\n\t */\r\n\tfunction isOptionsEmpty() {\r\n\t\tlet emptyCount = 0;\r\n\t\tfor (const option in options) {\r\n\t\t\tif (options[option].length <= 0) {\r\n\t\t\t\temptyCount += 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn emptyCount >= optionTypes.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches recipes using the options object and inputIg\r\n\t */\r\n\tasync function fetchFood() {\r\n\t\tif (inputIg.length <= 0 && isOptionsEmpty() && exclude.length <= 0) {\r\n\t\t\tsetHasError(true);\r\n\t\t\tsetErrorMsg(\"Please enter food name/ingredients\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsetHasError(false);\r\n\r\n\t\tlet query = \"\";\r\n\r\n\t\tif (!isOptionsEmpty()) {\r\n\t\t\tlet i = 0;\r\n\t\t\tfor (const option in options) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tquery.length > 0 &&\r\n\t\t\t\t\toptions[option].length > 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tquery += \"&\";\r\n\t\t\t\t}\r\n\t\t\t\toptions[option].forEach((item, index) => {\r\n\t\t\t\t\tquery += `${option}=${item}`;\r\n\t\t\t\t\tif (index < options[option].length - 1) {\r\n\t\t\t\t\t\tquery += \"&\";\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\ti += 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (exclude.length > 0) {\r\n\t\t\tif (query.length > 0) {\r\n\t\t\t\tquery += \"&\";\r\n\t\t\t}\r\n\t\t\texclude.forEach((item, i) => {\r\n\t\t\t\tquery += `excluded=${item.trim()}`;\r\n\t\t\t\tif (i < exclude.length - 1) {\r\n\t\t\t\t\tquery += \"&\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (inputIg.trim().length > 0) {\r\n\t\t\tif (query.length > 0) {\r\n\t\t\t\tquery += \"&\";\r\n\t\t\t}\r\n\t\t\tquery += `ingredients=${inputIg.trim()}`;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tlet response = await axios({\r\n\t\t\t\tmethod: \"get\",\r\n\t\t\t\turl: `${BACKEND}/api/fetchRecipes/?${query}`,\r\n\t\t\t\tresponseType: \"json\",\r\n\t\t\t});\r\n\t\t\tlet content = await response.data;\r\n\t\t\tctx.getRecipes(content.results);\r\n\t\t\tctx.setAddRecipesLink(content.addRecipesLink);\r\n\r\n\t\t\tctx.setIsLoading(true);\r\n\t\t\tnavigation.navigate(\"Home\");\r\n\t\t} catch (error) {\r\n\t\t\tsetHasError(true);\r\n\t\t\tsetErrorMsg(\"Unable to retrieve any recipes\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the inputIg with the text entered\r\n\t * by user.\r\n\t *\r\n\t * @param {string} igs\r\n\t */\r\n\tfunction inputIngredients(igs) {\r\n\t\tsetinputIg(igs);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates `inputExclude` by the text entered by the user\r\n\t *\r\n\t * @param {string} excluded\r\n\t */\r\n\tfunction inputExcludeHandler(excluded) {\r\n\t\tsetInputExclude(excluded);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an excluded ingredient\r\n\t */\r\n\tfunction addExcludeHandler() {\r\n\t\tif (inputExclude !== \"\") {\r\n\t\t\tsetExclude((preveState) => [...preveState, inputExclude]);\r\n\t\t\tsetInputExclude(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the available option.\r\n\t *\r\n\t * @param {{item: string}} param\r\n\t * @returns Button that toggles the option\r\n\t */\r\n\tfunction renderOptionTypes({ item }) {\r\n\t\treturn (\r\n\t\t\t<Pressable\r\n\t\t\t\tstyle={SearchOptionsStyle.optionTypes}\r\n\t\t\t\tonPress={() => setOptionType(item)}\r\n\t\t\t>\r\n\t\t\t\t<Text style={{ fontWeight: \"bold\" }}>{item}</Text>\r\n\t\t\t</Pressable>\r\n\t\t);\r\n\t}\r\n\r\n\tfunction removeExlcusions(index) {\r\n\t\tsetExclude((preveState) => {\r\n\t\t\tlet newState = [];\r\n\t\t\tpreveState.forEach((element, i) => {\r\n\t\t\t\tif (i != index) {\r\n\t\t\t\t\tnewState.push(element);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn newState;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Renders an excluded ingredient that the user doesn't want to be\r\n\t * displayed in the recipe results.\r\n\t *\r\n\t * @param {{\r\n\t * \t\titem: string,\r\n\t * \t\tindex: number\r\n\t * }} param\r\n\t * @returns An excluded ingredient\r\n\t */\r\n\tfunction renderExclusions({ item, index }) {\r\n\t\treturn (\r\n\t\t\t<View\r\n\t\t\t\tkey={index}\r\n\t\t\t\tstyle={SearchOptionsStyle.exclude}\r\n\t\t\t>\r\n\t\t\t\t<Text style={{ textAlign: \"center\" }}>{item}</Text>\r\n\t\t\t\t<Pressable onPress={() => removeExlcusions(index)}>\r\n\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\ticon={\"xmark\"}\r\n\t\t\t\t\t\tsize={20}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Pressable>\r\n\t\t\t</View>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Suspense fallback={<ActivityIndicator size=\"large\"/>}>\r\n\t\t\t<View\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\t...SearchOptionsStyle.container,\r\n\t\t\t\t\t...styles.pageContainer,\r\n\t\t\t\t\twidth: width,\r\n\t\t\t\t\theight: useWindowDimensions().height\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<View style={{...SearchOptionsStyle.textButtonContainer, width: width * 0.7}}>\r\n\t\t\t\t\t<Pressable\r\n\t\t\t\t\t\tstyle={SearchOptionsStyle.imgContainer}\r\n\t\t\t\t\t\tonPress={fetchFood}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\ticon=\"magnifying-glass\"\r\n\t\t\t\t\t\t\tsize={20}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Pressable>\r\n\r\n\t\t\t\t\t<TextInput\r\n\t\t\t\t\t\tstyle={[\r\n\t\t\t\t\t\t\tSearchOptionsStyle.input,\r\n\t\t\t\t\t\t\t{ borderColor: hasError ? \"red\" : \"black\" },\r\n\t\t\t\t\t\t]}\r\n\t\t\t\t\t\tonChangeText={inputIngredients}\r\n\t\t\t\t\t\tplaceholder=\"Enter recipe names/ingredients\"\r\n\t\t\t\t\t\tonSubmitEditing={fetchFood}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\t\t\t\t<View style={{...SearchOptionsStyle.textButtonContainer, width: width * 0.7}}>\r\n\t\t\t\t\t<Pressable\r\n\t\t\t\t\t\tonPress={addExcludeHandler}\r\n\t\t\t\t\t\tstyle={{ paddingTop: 12 }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\ticon={\"ban\"}\r\n\t\t\t\t\t\t\tsize={20}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Pressable>\r\n\t\t\t\t\t<TextInput\r\n\t\t\t\t\t\tstyle={[\r\n\t\t\t\t\t\t\tSearchOptionsStyle.input,\r\n\t\t\t\t\t\t\t{ borderColor: hasError ? \"red\" : \"black\" },\r\n\t\t\t\t\t\t]}\r\n\t\t\t\t\t\tonChangeText={inputExcludeHandler}\r\n\t\t\t\t\t\tvalue={inputExclude}\r\n\t\t\t\t\t\tplaceholder=\"Enter ingredients to exclude\"\r\n\t\t\t\t\t\tonSubmitEditing={addExcludeHandler}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\r\n\t\t\t\t<TextError\r\n\t\t\t\t\thasError={hasError}\r\n\t\t\t\t\tstyle={styles.errorMsg}\r\n\t\t\t\t\tmessage={errorMsg}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<View\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t...SearchOptionsStyle.optionsContainer,\r\n\t\t\t\t\t\tmaxHeight: useWindowDimensions().height / 2.5,\r\n\t\t\t\t\t\tflexDirection: \"row\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<View style={SearchOptionsStyle.excluded}>\r\n\t\t\t\t\t\t<Text\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t...SearchOptionsStyle.excludedHeader,\r\n\t\t\t\t\t\t\t\tborderBottomWidth: exclude.length <= 0 ? 0 : 2,\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tExcluded\r\n\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t<WrappingItems\r\n\t\t\t\t\t\t\tstyle={SearchOptionsStyle.excludeList}\r\n\t\t\t\t\t\t\titems={exclude}\r\n\t\t\t\t\t\t\trenderItems={renderExclusions}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</View>\r\n\r\n\t\t\t\t\t<SelectedOptions options={options} />\r\n\t\t\t\t\t<View style={SearchOptionsStyle.optionTypesContainer}>\r\n\t\t\t\t\t\t<FlatList\r\n\t\t\t\t\t\t\tdata={optionTypes}\r\n\t\t\t\t\t\t\trenderItem={renderOptionTypes}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</View>\r\n\t\t\t\t\t<RecipeOption\r\n\t\t\t\t\t\tstyle={{ height: 99 }}\r\n\t\t\t\t\t\ttype={optionType}\r\n\t\t\t\t\t\tdata={RecipeMetaOptions[optionType]}\r\n\t\t\t\t\t\tselectedData={options[optionType]}\r\n\t\t\t\t\t\tupdateData={updateOptions}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\t\t\t</View>\r\n\t\t</Suspense>\r\n\t);\r\n}\r\n","import { StyleSheet } from \"react-native\"\r\n\r\nexport const FormStyle = StyleSheet.create(\r\n    {\r\n        formInput: {\r\n            padding: 5,\r\n            marginTop: 10,\r\n            borderWidth: 2,\r\n            borderRadius: 20\r\n        },\r\n\r\n        formLabel: {\r\n            marginRight: 10,\r\n            textAlign: \"left\",\r\n            fontWeight: \"bold\",\r\n        },\r\n\r\n        submitButton: {\r\n            padding: 10,\r\n            margin: 10,\r\n            borderRadius: 15, \r\n            backgroundColor: \"#fd5d00\"\r\n        },\r\n    }\r\n);\r\n","import axios from \"axios\";\r\nimport { lazy, Suspense, useContext, useEffect, useState } from \"react\";\r\nimport { ActivityIndicator, Platform, Pressable, Text, View } from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport { FormStyle } from \"./FormStyles\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\nimport { CsrfCtx } from \"../../context/CsrfToken\";\r\nimport { AccountCtx } from \"../../context/account\";\r\n\r\nconst FormField = lazy(() => import(\"../../components/FormField/FormField\"));\r\nconst TextError = lazy(() => import(\"../../components/TextError/TextError\"));\r\nconst UserEmailForms = lazy(() =>\r\n\timport(\"../../components/UserEmailForms/UserEmailForms\")\r\n);\r\n\r\nconst emailRegExp =\r\n\t/^([a-zA-Z0-9]+\\.?[a-zA-Z0-9]*)@[a-zA-Z0-9^\\.]+\\.([a-zA-Z]+\\.?[a-zA-Z]*)$/;\r\n\r\n/**\r\n * Renders the Text Form with multiple fields\r\n * It can be either login or sign up form\r\n *\r\n * @param {\r\n * \t{\r\n * \t\tnavigation: *,\r\n * \t\troute: *\r\n * \t}} props\r\n * @returns Text Form\r\n */\r\nexport default function Form({ route, navigation }) {\r\n\tconst authCtx = useContext(CsrfCtx);\r\n\tconst accCtx = useContext(AccountCtx);\r\n\r\n\tconst [toLogin, setToLogin] = useState(route.params.toLogin);\r\n\tconst [username, setUsername] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\tconst [password, setPasword] = useState(\"\");\r\n\tconst [formValid, setFormValid] = useState(true);\r\n\tconst [errorMsg, setErrorMsg] = useState(\"\");\r\n\tconst [mount, setMount] = useState(true);\r\n\tconst [fieldWidth, setFieldWidth] = useState({\r\n\t\twidth: \"25%\",\r\n\t\tminWidth: \"25%\",\r\n\t\tmaxWidth: \"25%\",\r\n\t});\r\n\r\n\t// Calls when `Form` component is mounted\r\n\tuseEffect(() => {\r\n\t\taccCtx.checkCred(authCtx, BACKEND);\r\n\r\n\t\tif (Platform.OS != \"web\") {\r\n\t\t\tsetFieldWidth({\r\n\t\t\t\twidth: \"50%\",\r\n\t\t\t\tminWidth: \"50%\",\r\n\t\t\t\tmaxWidth: \"50%\",\r\n\t\t\t});\r\n\t\t}\r\n\t}, [mount]);\r\n\r\n\t/**\r\n\t * Updates the `username` state with `newUsername`\r\n\t *\r\n\t * @param {string} newUsername\r\n\t */\r\n\tfunction usernameHandler(newUsername) {\r\n\t\tif (newUsername.length > 50) {\r\n\t\t\tsetFormValid(false);\r\n\t\t\tsetErrorMsg(\"Username too long\");\r\n\t\t} else {\r\n\t\t\tsetFormValid(true);\r\n\t\t\tsetUsername(newUsername);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the `email` state with `newEmail` if it's valid\r\n\t *\r\n\t * @param {string} newEmail\r\n\t */\r\n\tfunction emailHandler(newEmail) {\r\n\t\tif (newEmail.match(emailRegExp) != null) {\r\n\t\t\tsetEmail(newEmail);\r\n\t\t} else {\r\n\t\t\tsetEmail(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the `password` state with `newPassword`\r\n\t *\r\n\t * @param {string} newPassword\r\n\t */\r\n\tfunction passwordHandler(newPassword) {\r\n\t\tsetPasword(newPassword);\r\n\t}\r\n\r\n\t/**\r\n\t * Submits the sign up & login form with the user\r\n\t */\r\n\tasync function onSubmitHandler() {\r\n\t\tif (toLogin && (username.length <= 0 || password <= 0)) {\r\n\t\t\tsetErrorMsg(\"Please fill all the fields/ enter corretly.\");\r\n\t\t\tsetFormValid(false);\r\n\t\t} else if (\r\n\t\t\t!toLogin &&\r\n\t\t\t(username.length <= 0 || email.length <= 0 || password <= 0)\r\n\t\t) {\r\n\t\t\tsetErrorMsg(\"Please fill all the fields/ enter corretly.\");\r\n\t\t\tsetFormValid(false);\r\n\t\t} else {\r\n\t\t\tsetFormValid(true);\r\n\t\t\tlet method = \"post\";\r\n\t\t\tlet path = \"signup/\";\r\n\t\t\tif (toLogin) {\r\n\t\t\t\tmethod = \"put\";\r\n\t\t\t\tpath = \"login/\";\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await axios({\r\n\t\t\t\t\tmethod: method,\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\"X-CSRFToken\": authCtx.token,\r\n\t\t\t\t\t\tcredentials: \"include\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\twithCredentials: true,\r\n\t\t\t\t\turl: `${BACKEND}/api/${path}`,\r\n\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tusername: username,\r\n\t\t\t\t\t\temail: email,\r\n\t\t\t\t\t\tpassword: password,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlet content = await response.data;\r\n\t\t\t\tif (content.signUpSuccess) {\r\n\t\t\t\t\taccCtx.login();\r\n\t\t\t\t\taccCtx.setUsername(username);\r\n\t\t\t\t\taccCtx.setEmail(email);\r\n\t\t\t\t\tnavigation.navigate(\"Home\");\r\n\t\t\t\t} else if (content.loginSuccess) {\r\n\t\t\t\t\taccCtx.login();\r\n\t\t\t\t\taccCtx.setUsername(content.user.username);\r\n\t\t\t\t\taccCtx.setEmail(content.user.email);\r\n\t\t\t\t\tnavigation.navigate(\"Home\");\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tsetErrorMsg(error.response.data.message);\r\n\t\t\t\tsetFormValid(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction SubmitButton() {\r\n\t\treturn (\r\n\t\t\t<Pressable\r\n\t\t\t\tstyle={FormStyle.submitButton}\r\n\t\t\t\tonPress={onSubmitHandler}\r\n\t\t\t>\r\n\t\t\t\t<Text style={{ fontWeight: \"bold\" }}>\r\n\t\t\t\t\t{toLogin ? \"Login\" : \"Sign Up\"}\r\n\t\t\t\t</Text>\r\n\t\t\t</Pressable>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Suspense fallback={<ActivityIndicator size=\"large\" />}>\r\n\t\t\t<View style={{ ...styles.pageContainer, alignItems: \"center\" }}>\r\n\t\t\t\t<UserEmailForms\r\n\t\t\t\t\ttoLogin={toLogin}\r\n\t\t\t\t\tusernameHandler={usernameHandler}\r\n\t\t\t\t\temailHandler={emailHandler}\r\n\t\t\t\t\tcontainerStyle={fieldWidth}\r\n\t\t\t\t\tlabelStyle={FormStyle.formLabel}\r\n\t\t\t\t\tinputStyle={{\r\n\t\t\t\t\t\t...FormStyle.formInput,\r\n\t\t\t\t\t\tborderColor: formValid ? \"black\" : \"red\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<FormField\r\n\t\t\t\t\tlabel={\"Password:\"}\r\n\t\t\t\t\tplaceholder={\"Please enter password:\"}\r\n\t\t\t\t\tisPassword={true}\r\n\t\t\t\t\tonChangeTextHandler={passwordHandler}\r\n\t\t\t\t\tcontainerStyle={fieldWidth}\r\n\t\t\t\t\tlabelStyle={FormStyle.formLabel}\r\n\t\t\t\t\tinputStyle={{\r\n\t\t\t\t\t\t...FormStyle.formInput,\r\n\t\t\t\t\t\tborderColor: formValid ? \"black\" : \"red\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<SubmitButton />\r\n\r\n\t\t\t\t<TextError\r\n\t\t\t\t\thasError={!formValid}\r\n\t\t\t\t\tstyle={styles.errorMsg}\r\n\t\t\t\t\tmessage={errorMsg}\r\n\t\t\t\t/>\r\n\t\t\t</View>\r\n\t\t</Suspense>\r\n\t);\r\n}\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport const profileStyles = StyleSheet.create({\r\n\tuserField: {\r\n\t\ttextAlign: \"center\",\r\n\t\tfontSize: 25,\r\n\t},\r\n\r\n\tsubmitButton: {\r\n\t\tbackgroundColor: \"#ff9100\",\r\n\t\tfontWeight: \"bold\",\r\n\t\tpadding: 10,\r\n\t\tmargin: 10,\r\n\t\tborderRadius: 15,\r\n\t\tbackgroundColor: \"#fd5d00\",\r\n\t\twidth: 150,\r\n\t},\r\n\r\n\trecentRecipes: {\r\n\t\tborderTopWidth: 2,\r\n\t\tflexDirection: \"row\",\r\n\t\tflexWrap: \"wrap\",\r\n\t\tjustifyContent: \"center\"\r\n\t},\r\n});\r\n","import axios from \"axios\";\r\nimport { lazy, Suspense, useContext, useEffect, useState } from \"react\";\r\nimport {\r\n\tActivityIndicator,\r\n\tScrollView,\r\n\tText,\r\n\tuseWindowDimensions,\r\n\tView,\r\n} from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport { FormStyle } from \"../Form/FormStyles\";\r\nimport { profileStyles } from \"./ProfileStyles\";\r\nimport { AccountCtx } from \"../../context/account\";\r\nimport { CsrfCtx } from \"../../context/CsrfToken\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\nimport RecipesArray from \"../../components/RecipesArray/RecipesArray\";\r\nimport RecipeCover from \"../../components/RecipeCover/RecipeCover\";\r\nconst IndiviudalForm = lazy(() =>\r\n\timport(\"../../components/IndividualForm/IndividualForm\")\r\n);\r\nconst TextError = lazy(() => import(\"../../components/TextError/TextError\"));\r\n\r\nconst emailRegExp =\r\n\t/^([a-zA-Z0-9]+\\.?[a-zA-Z0-9]*)@[a-zA-Z0-9^\\.]+\\.([a-zA-Z]+\\.?[a-zA-Z]*)$/;\r\n\r\n/**\r\n * Renders the profile page\r\n *\r\n * @param {{route: any, navigation: any}} prop\r\n * @returns Profile Page\r\n */\r\nexport default function Profile({ route, navigation }) {\r\n\tconst authCtx = useContext(CsrfCtx);\r\n\tconst accCtx = useContext(AccountCtx);\r\n\r\n\tconst [newUsername, setNewUserName] = useState(\"\");\r\n\tconst [newEmail, setNewEmail] = useState(\"\");\r\n\tconst [newPassword, setNewPassword] = useState(\"\");\r\n\tconst [width, setWidth] = useState(useWindowDimensions().width);\r\n\tconst [usernameUpdated, setUsernameUpdated] = useState(false);\r\n\tconst [emailUpdated, setEmailUpdated] = useState(false);\r\n\tconst [passwordUpdated, setPasswordUpdated] = useState(false);\r\n\r\n\tconst [recentRecipes, setRecentRecipes] = useState([]);\r\n\r\n\tconst [errorBackColor, setErrorBackColor] = useState(\"red\");\r\n\tconst [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n\tconst [mount, setMount] = useState(true);\r\n\r\n\t/**\r\n\t * Fetches most recent recipes that the user has viewd\r\n\t */\r\n\tasync function getRecentRecipes() {\r\n\t\ttry {\r\n\t\t\tlet response = await axios.get(`${BACKEND}/api/getRecentRecipes/`);\r\n\t\t\tlet content = await response.data;\r\n\t\t\tsetRecentRecipes(content[\"results\"]);\r\n\t\t} catch (error) {}\r\n\t}\r\n\r\n\t// Calls when `Form` component is mounted\r\n\tuseEffect(() => {\r\n\t\tgetRecentRecipes();\r\n\t\taccCtx.checkCred(authCtx, BACKEND);\r\n\t}, [mount]);\r\n\r\n\t/**\r\n\t * Sets the new username\r\n\t *\r\n\t * @param {string} usernameTxt\r\n\t */\r\n\tfunction updateUsernameHandler(usernameTxt) {\r\n\t\tsetNewUserName(usernameTxt);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the new email\r\n\t *\r\n\t * @param {string} emailTxt\r\n\t */\r\n\tfunction updateEmailHander(emailTxt) {\r\n\t\tsetNewEmail(emailTxt);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets then new password\r\n\t *\r\n\t * @param {string} passwordTxt\r\n\t */\r\n\tfunction updatePaswordHandler(passwordTxt) {\r\n\t\tsetNewPassword(passwordTxt);\r\n\t}\r\n\r\n\t/**\r\n\t * Submits the updated username\r\n\t */\r\n\tasync function submitUsername() {\r\n\t\tif (newUsername === \"\") {\r\n\t\t\tErrorHandler(\"You haven't entered a username\", 0, true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tlet response = await axios.put(\r\n\t\t\t\t`${BACKEND}/api/updateUserInfo/`,\r\n\t\t\t\t{ username: newUsername },\r\n\t\t\t\t{\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\"X-CSRFToken\": authCtx.token,\r\n\t\t\t\t\t\tcredentials: \"include\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\twithCredentials: true,\r\n\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tlet content = await response.data;\r\n\r\n\t\t\taccCtx.setUsername(newUsername);\r\n\r\n\t\t\tlet message = \"\";\r\n\t\t\tfor (const msg in content) {\r\n\t\t\t\tmessage = content[msg];\r\n\t\t\t}\r\n\r\n\t\t\tErrorHandler(message, 0, false);\r\n\t\t} catch (error) {\r\n\t\t\tErrorHandler(error.response.data.message, 0, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Submits the updated email\r\n\t */\r\n\tasync function submitEmail() {\r\n\t\tif (newEmail === \"\" || newEmail.match(emailRegExp) === null) {\r\n\t\t\tErrorHandler(\"You haven't entered a valid email\", 1, true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tlet response = await axios.put(\r\n\t\t\t\t`${BACKEND}/api/updateUserInfo/`,\r\n\t\t\t\t{ email: newEmail },\r\n\t\t\t\t{\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\"X-CSRFToken\": authCtx.token,\r\n\t\t\t\t\t\tcredentials: \"include\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\twithCredentials: true,\r\n\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tlet content = await response.data;\r\n\r\n\t\t\taccCtx.setEmail(newEmail);\r\n\r\n\t\t\tlet message = \"\";\r\n\t\t\tfor (const msg in content) {\r\n\t\t\t\tmessage = content[msg];\r\n\t\t\t}\r\n\r\n\t\t\tErrorHandler(message, 1, false);\r\n\t\t} catch (error) {\r\n\t\t\tErrorHandler(error.response.data.message, 1, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Submits the updated password\r\n\t */\r\n\tasync function submitPassword() {\r\n\t\tif (newPassword === \"\") {\r\n\t\t\tErrorHandler(\"You haven't entered a password\", 2, true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tlet response = await axios.put(\r\n\t\t\t\t`${BACKEND}/api/updateUserInfo/`,\r\n\t\t\t\t{ password: newPassword },\r\n\t\t\t\t{\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\"X-CSRFToken\": authCtx.token,\r\n\t\t\t\t\t\tcredentials: \"include\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\twithCredentials: true,\r\n\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tlet content = await response.data;\r\n\r\n\t\t\tlet message = \"\";\r\n\t\t\tfor (const msg in content) {\r\n\t\t\t\tmessage = content[msg];\r\n\t\t\t}\r\n\r\n\t\t\tErrorHandler(message, 2, false);\r\n\t\t} catch (error) {\r\n\t\t\tErrorHandler(error.response.data.message, 2, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Displays the error message via toggling the `error` state\r\n\t *\r\n\t * @param {string} message\r\n\t * @param {number} fieldId\r\n\t * @param {boolean} isError\r\n\t */\r\n\tfunction ErrorHandler(message, fieldId, isError) {\r\n\t\tif (isError) {\r\n\t\t\tsetErrorBackColor(\"red\");\r\n\t\t} else {\r\n\t\t\tsetErrorBackColor(\"green\");\r\n\t\t}\r\n\t\tswitch (fieldId) {\r\n\t\t\tcase 0:\r\n\t\t\t\tsetUsernameUpdated(true);\r\n\t\t\t\tsetEmailUpdated(false);\r\n\t\t\t\tsetPasswordUpdated(false);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tsetUsernameUpdated(false);\r\n\t\t\t\tsetEmailUpdated(true);\r\n\t\t\t\tsetPasswordUpdated(false);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tsetUsernameUpdated(false);\r\n\t\t\t\tsetEmailUpdated(false);\r\n\t\t\t\tsetPasswordUpdated(true);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tsetUsernameUpdated(false);\r\n\t\t\t\tsetEmailUpdated(false);\r\n\t\t\t\tsetPasswordUpdated(false);\r\n\t\t}\r\n\t\tsetErrorMsg(message);\r\n\t}\r\n\r\n\tconst recentRecipesBorders = {\r\n\t\tborderLeftWidth: width < 700 ? 0 : 2,\r\n\t\tborderRightWidth: width < 700 ? 0 : 2,\r\n\t\tborderBottomWidth: width < 700 ? 0 : 2,\r\n\t};\r\n\r\n\tlet customWidth = width < 700 ? width * 0.7 : width * 0.3;\r\n\treturn (\r\n\t\t<Suspense fallback={<ActivityIndicator size=\"large\" />}>\r\n\t\t\t<View style={styles.pageContainer}>\r\n\t\t\t\t<ScrollView>\r\n\t\t\t\t\t<View\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\talignItems: \"center\",\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<IndiviudalForm\r\n\t\t\t\t\t\t\tcontainerStyle={{ alignItems: \"center\" }}\r\n\t\t\t\t\t\t\tlabel=\"Username:\"\r\n\t\t\t\t\t\t\tlabelStyle={{\r\n\t\t\t\t\t\t\t\t...profileStyles.userField,\r\n\t\t\t\t\t\t\t\tfontWeight: \"bold\",\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tlabelValueHidden={false}\r\n\t\t\t\t\t\t\tlabelValue={accCtx.username}\r\n\t\t\t\t\t\t\tlabelValueStyle={profileStyles.userField}\r\n\t\t\t\t\t\t\tplaceholder=\"Please enter new username\"\r\n\t\t\t\t\t\t\tonChangeText={updateUsernameHandler}\r\n\t\t\t\t\t\t\tinputPromptStyle={{\r\n\t\t\t\t\t\t\t\t...FormStyle.formInput,\r\n\t\t\t\t\t\t\t\twidth: customWidth,\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tsubmitText=\"Update Username\"\r\n\t\t\t\t\t\t\tsubmitHandler={submitUsername}\r\n\t\t\t\t\t\t\tsubmitStyle={profileStyles.submitButton}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<TextError\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t...styles.errorMsg,\r\n\t\t\t\t\t\t\t\tbackgroundColor: errorBackColor,\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\thasError={usernameUpdated}\r\n\t\t\t\t\t\t\tmessage={errorMsg}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<IndiviudalForm\r\n\t\t\t\t\t\t\tcontainerStyle={{ alignItems: \"center\" }}\r\n\t\t\t\t\t\t\tlabel=\"Email:\"\r\n\t\t\t\t\t\t\tlabelStyle={{\r\n\t\t\t\t\t\t\t\t...profileStyles.userField,\r\n\t\t\t\t\t\t\t\tfontWeight: \"bold\",\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tlabelValueHidden={false}\r\n\t\t\t\t\t\t\tlabelValue={accCtx.email}\r\n\t\t\t\t\t\t\tlabelValueStyle={profileStyles.userField}\r\n\t\t\t\t\t\t\tplaceholder=\"Please enter new email\"\r\n\t\t\t\t\t\t\tonChangeText={updateEmailHander}\r\n\t\t\t\t\t\t\tinputPromptStyle={{\r\n\t\t\t\t\t\t\t\t...FormStyle.formInput,\r\n\t\t\t\t\t\t\t\twidth: customWidth,\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tsubmitText=\"Update Email\"\r\n\t\t\t\t\t\t\tsubmitHandler={submitEmail}\r\n\t\t\t\t\t\t\tsubmitStyle={profileStyles.submitButton}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<TextError\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t...styles.errorMsg,\r\n\t\t\t\t\t\t\t\tbackgroundColor: errorBackColor,\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\thasError={emailUpdated}\r\n\t\t\t\t\t\t\tmessage={errorMsg}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<IndiviudalForm\r\n\t\t\t\t\t\t\tcontainerStyle={{ alignItems: \"center\" }}\r\n\t\t\t\t\t\t\tlabel=\"Password:\"\r\n\t\t\t\t\t\t\tlabelStyle={{\r\n\t\t\t\t\t\t\t\t...profileStyles.userField,\r\n\t\t\t\t\t\t\t\tfontWeight: \"bold\",\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tlabelValueHidden={true}\r\n\t\t\t\t\t\t\tplaceholder=\"Please enter new Password\"\r\n\t\t\t\t\t\t\tonChangeText={updatePaswordHandler}\r\n\t\t\t\t\t\t\tinputPromptStyle={{\r\n\t\t\t\t\t\t\t\t...FormStyle.formInput,\r\n\t\t\t\t\t\t\t\twidth: customWidth,\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tsubmitText=\"Update Password\"\r\n\t\t\t\t\t\t\tsubmitHandler={submitPassword}\r\n\t\t\t\t\t\t\tsubmitStyle={profileStyles.submitButton}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<TextError\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t...styles.errorMsg,\r\n\t\t\t\t\t\t\t\tbackgroundColor: errorBackColor,\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\thasError={passwordUpdated}\r\n\t\t\t\t\t\t\tmessage={errorMsg}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</View>\r\n\t\t\t\t\t<Text\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tfontSize: 30,\r\n\t\t\t\t\t\t\tfontWeight: \"bold\",\r\n\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tRecent Recipes\r\n\t\t\t\t\t</Text>\r\n\t\t\t\t\t<View\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t...recentRecipesBorders,\r\n\t\t\t\t\t\t\t...profileStyles.recentRecipes,\r\n\t\t\t\t\t\t\tpadding: width < 700 ? 0 : 3,\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{recentRecipes.length > 0 ? (<RecipesArray\r\n\t\t\t\t\t\t\tdata={recentRecipes}\r\n\t\t\t\t\t\t\trenderItem={({ item }) => (\r\n\t\t\t\t\t\t\t\t<RecipeCover\r\n\t\t\t\t\t\t\t\t\tkey={item.id}\r\n\t\t\t\t\t\t\t\t\twidth={300}\r\n\t\t\t\t\t\t\t\t\theight={300}\r\n\t\t\t\t\t\t\t\t\titem={item}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t/>) : (\r\n\t\t\t\t\t\t\t<ActivityIndicator size=\"large\" />\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</View>\r\n\t\t\t\t</ScrollView>\r\n\t\t\t</View>\r\n\t\t</Suspense>\r\n\t);\r\n}\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport const NavBarStyle = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tbackgroundColor: \"#fd5d00\",\r\n\t\tflexDirection: \"row\",\r\n\t\theight: 9.671875,\r\n\t\tpadding: 10,\r\n        justifyContent: \"space-around\"\r\n\t},\r\n});\r\n","import React, { Suspense } from \"react\";\r\nimport { ActivityIndicator, Text } from \"react-native\";\r\nimport { Link, NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport { styles } from \"./AppStyles\";\r\nimport ContextProvider from \"./context/Context\";\r\n\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons/faMagnifyingGlass\";\r\nimport { faBan } from \"@fortawesome/free-solid-svg-icons/faBan\";\r\nimport { faXmark } from \"@fortawesome/free-solid-svg-icons/faXmark\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport SearchButton from \"./components/Buttons/SearchButton\";\r\nimport Search from \"./pages/Search/Search\";\r\nimport SearchOptions from \"./pages/SearchOptions/SearchOptions\";\r\nimport RecipeInfo from \"./pages/RecipeInfo/RecipeInfo\";\r\nimport Form from \"./pages/Form/Form\";\r\nimport Profile from \"./pages/Profile/Profile\";\r\nimport Routes from \"./Routes\";\r\nimport { NavBarStyle } from \"./components/NavBar/NavBarStyle\";\r\n\r\nlibrary.add(faMagnifyingGlass, faBan, faXmark);\r\n\r\n/**\r\n * Render the enter APP UI and use React navigation to\r\n * navigate different screens and update urls on browser\r\n *\r\n * @returns {JSX.Element} The whole app UI\r\n */\r\nexport default function App() {\r\n\tconst Stack = createNativeStackNavigator();\r\n\r\n\treturn (\r\n\t\t<ContextProvider>\r\n\t\t\t<NavBar style={NavBarStyle}/>\r\n\t\t\t{/* <Suspense fallback={<ActivityIndicator size=\"large\" />}>\r\n\t\t\t\t<NavigationContainer linking={Routes}>\r\n\t\t\t\t\t<Stack.Navigator\r\n\t\t\t\t\t\tscreenOptions={{\r\n\t\t\t\t\t\t\theaderShown: false,\r\n\t\t\t\t\t\t\t// headerStyle: { backgroundColor: \"#fd5d00\" },\r\n\t\t\t\t\t\t\t// headerTitle: () => undefined,\r\n\t\t\t\t\t\t\t// headerLeft: () => undefined,\r\n\t\t\t\t\t\t\t// headerRight: () => (\r\n\t\t\t\t\t\t\t// \t<NavBar>\r\n\t\t\t\t\t\t\t// \t\t<Link\r\n\t\t\t\t\t\t\t// \t\t\tto={{\r\n\t\t\t\t\t\t\t// \t\t\t\tscreen: \"Login\",\r\n\t\t\t\t\t\t\t// \t\t\t\tparams: { toLogin: true },\r\n\t\t\t\t\t\t\t// \t\t\t}}\r\n\t\t\t\t\t\t\t// \t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t\t// \t\t>\r\n\t\t\t\t\t\t\t// \t\t\t<Text style={styles.navText}>\r\n\t\t\t\t\t\t\t// \t\t\t\tLogin\r\n\t\t\t\t\t\t\t// \t\t\t</Text>\r\n\t\t\t\t\t\t\t// \t\t</Link>\r\n\t\t\t\t\t\t\t// \t\t<Link\r\n\t\t\t\t\t\t\t// \t\t\tto={{\r\n\t\t\t\t\t\t\t// \t\t\t\tscreen: \"SignUp\",\r\n\t\t\t\t\t\t\t// \t\t\t\tparams: { toLogin: false },\r\n\t\t\t\t\t\t\t// \t\t\t}}\r\n\t\t\t\t\t\t\t// \t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t\t// \t\t>\r\n\t\t\t\t\t\t\t// \t\t\t<Text style={styles.navText}>\r\n\t\t\t\t\t\t\t// \t\t\t\tSign Up\r\n\t\t\t\t\t\t\t// \t\t\t</Text>\r\n\t\t\t\t\t\t\t// \t\t</Link>\r\n\t\t\t\t\t\t\t// \t\t<SearchButton />\r\n\t\t\t\t\t\t\t// \t</NavBar>\r\n\t\t\t\t\t\t\t// ),\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Stack.Screen\r\n\t\t\t\t\t\t\tname=\"Home\"\r\n\t\t\t\t\t\t\tcomponent={Search}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Stack.Group\r\n\t\t\t\t\t\t\t// screenOptions={({ route, navigation }) => {\r\n\t\t\t\t\t\t\t// \treturn {\r\n\t\t\t\t\t\t\t// \t\theaderLeft: () => (\r\n\t\t\t\t\t\t\t// \t\t\t<Link\r\n\t\t\t\t\t\t\t// \t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t\t// \t\t\t\tto={{ screen: \"Home\" }}\r\n\t\t\t\t\t\t\t// \t\t\t>\r\n\t\t\t\t\t\t\t// \t\t\t\t<Text style={styles.navText}>\r\n\t\t\t\t\t\t\t// \t\t\t\t\tHome\r\n\t\t\t\t\t\t\t// \t\t\t\t</Text>\r\n\t\t\t\t\t\t\t// \t\t\t</Link>\r\n\t\t\t\t\t\t\t// \t\t),\r\n\t\t\t\t\t\t\t// \t};\r\n\t\t\t\t\t\t\t// }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Stack.Group\r\n\t\t\t\t\t\t\t\t// screenOptions={{\r\n\t\t\t\t\t\t\t\t// \theaderRight: () => (\r\n\t\t\t\t\t\t\t\t// \t\t<NavBar>\r\n\t\t\t\t\t\t\t\t// \t\t\t<Link\r\n\t\t\t\t\t\t\t\t// \t\t\t\tto={{\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\tscreen: \"Login\",\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\tparams: {\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\t\ttoLogin: true,\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t// \t\t\t\t}}\r\n\t\t\t\t\t\t\t\t// \t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t\t\t// \t\t\t>\r\n\t\t\t\t\t\t\t\t// \t\t\t\t<Text style={styles.navText}>\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\tLogin\r\n\t\t\t\t\t\t\t\t// \t\t\t\t</Text>\r\n\t\t\t\t\t\t\t\t// \t\t\t</Link>\r\n\t\t\t\t\t\t\t\t// \t\t\t<Link\r\n\t\t\t\t\t\t\t\t// \t\t\t\tto={{\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\tscreen: \"SignUp\",\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\tparams: {\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\t\ttoLogin: false,\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t// \t\t\t\t}}\r\n\t\t\t\t\t\t\t\t// \t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t\t\t// \t\t\t>\r\n\t\t\t\t\t\t\t\t// \t\t\t\t<Text style={styles.navText}>\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\tSign Up\r\n\t\t\t\t\t\t\t\t// \t\t\t\t</Text>\r\n\t\t\t\t\t\t\t\t// \t\t\t</Link>\r\n\t\t\t\t\t\t\t\t// \t\t\t<SearchButton />\r\n\t\t\t\t\t\t\t\t// \t\t</NavBar>\r\n\t\t\t\t\t\t\t\t// \t),\r\n\t\t\t\t\t\t\t\t// }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Stack.Screen\r\n\t\t\t\t\t\t\t\t\tname=\"Search\"\r\n\t\t\t\t\t\t\t\t\tcomponent={SearchOptions}\r\n\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t\t<Stack.Screen\r\n\t\t\t\t\t\t\t\t\tname=\"RecipeInfo\"\r\n\t\t\t\t\t\t\t\t\tcomponent={RecipeInfo}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Stack.Group>\r\n\r\n\t\t\t\t\t\t\t<Stack.Screen\r\n\t\t\t\t\t\t\t\tname=\"SignUp\"\r\n\t\t\t\t\t\t\t\tcomponent={Form}\r\n\t\t\t\t\t\t\t\t// options={{\r\n\t\t\t\t\t\t\t\t// \theaderRight: () => (\r\n\t\t\t\t\t\t\t\t// \t\t<NavBar>\r\n\t\t\t\t\t\t\t\t// \t\t\t<Link\r\n\t\t\t\t\t\t\t\t// \t\t\t\tto={{\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\tscreen: \"Login\",\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\tparams: {\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\t\ttoLogin: true,\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t// \t\t\t\t}}\r\n\t\t\t\t\t\t\t\t// \t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t\t\t// \t\t\t>\r\n\t\t\t\t\t\t\t\t// \t\t\t\t<Text style={styles.navText}>\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\tLogin\r\n\t\t\t\t\t\t\t\t// \t\t\t\t</Text>\r\n\t\t\t\t\t\t\t\t// \t\t\t</Link>\r\n\t\t\t\t\t\t\t\t// \t\t\t<SearchButton />\r\n\t\t\t\t\t\t\t\t// \t\t</NavBar>\r\n\t\t\t\t\t\t\t\t// \t),\r\n\t\t\t\t\t\t\t\t// }}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<Stack.Screen\r\n\t\t\t\t\t\t\t\tname=\"Login\"\r\n\t\t\t\t\t\t\t\tcomponent={Form}\r\n\t\t\t\t\t\t\t\t// options={{\r\n\t\t\t\t\t\t\t\t// \theaderRight: () => (\r\n\t\t\t\t\t\t\t\t// \t\t<NavBar>\r\n\t\t\t\t\t\t\t\t// \t\t\t<Link\r\n\t\t\t\t\t\t\t\t// \t\t\t\tto={{\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\tscreen: \"SignUp\",\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\tparams: {\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\t\ttoLogin: false,\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t// \t\t\t\t}}\r\n\t\t\t\t\t\t\t\t// \t\t\t\tstyle={styles.navLink}\r\n\t\t\t\t\t\t\t\t// \t\t\t>\r\n\t\t\t\t\t\t\t\t// \t\t\t\t<Text style={styles.navText}>\r\n\t\t\t\t\t\t\t\t// \t\t\t\t\tSign Up\r\n\t\t\t\t\t\t\t\t// \t\t\t\t</Text>\r\n\t\t\t\t\t\t\t\t// \t\t\t</Link>\r\n\t\t\t\t\t\t\t\t// \t\t\t<SearchButton />\r\n\t\t\t\t\t\t\t\t// \t\t</NavBar>\r\n\t\t\t\t\t\t\t\t// \t),\r\n\t\t\t\t\t\t\t\t// }}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Stack.Screen\r\n\t\t\t\t\t\t\t\tname=\"Profile\"\r\n\t\t\t\t\t\t\t\tcomponent={Profile}\r\n\t\t\t\t\t\t\t\t// options={{\r\n\t\t\t\t\t\t\t\t// \theaderRight: () => <SearchButton />,\r\n\t\t\t\t\t\t\t\t// }}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Stack.Group>\r\n\t\t\t\t\t</Stack.Navigator>\r\n\t\t\t\t</NavigationContainer>\r\n\t\t\t</Suspense> */}\r\n\t\t\t<StatusBar />\r\n\t\t</ContextProvider>\r\n\t);\r\n}\r\n","import { registerRootComponent } from 'expo';\n\nimport App from './src/App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","const BACKENDLOCAL = \"http://localhost:8000\";\r\nconst BACKENDIPHOME = \"http://192.168.0.30:8000\";\r\n\r\nlet domain = \"\";\r\nif (__DEV__) {\r\n\tdomain = BACKENDIPHOME;\r\n}\r\nconst BACKEND = domain;\r\nexport default BACKEND;","import axios from \"axios\";\r\nimport { createContext, useState } from \"react\";\r\n\r\n// Context for account info\r\nexport const AccountCtx = createContext({\r\n\tloggedIn: false,\r\n\tusername: \"\",\r\n\temail: \"\",\r\n\tlogin: () =>{},\r\n\tlogOut: () => {},\r\n\tsetUsername: (newUsername) => {},\r\n\tsetEmail: (newEmail) => {},\r\n\tcheckCred: (csrfCtx, domain) => {},\r\n});\r\n\r\n/**\r\n * Account System\r\n *\r\n * @param {{children: any}} props\r\n * @returns App UI\r\n */\r\nexport default function AccountProvider(props) {\r\n\tconst [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\tconst [username, setUsername] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\r\n\t/**\r\n\t * Checks whether the user is still logged in or not\r\n\t *\r\n\t * @param {{\r\n\t *     token: string;\r\n\t *     setCsrfToken: (newToken: any) => void;\r\n\t * }} csrfCtx\r\n\t * @param {string} domain\r\n\t */\r\n\tasync function updateCred(csrfCtx, domain) {\r\n\t\t// if (!isLoggedIn) {\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await axios.get(`${domain}/api/checkLogin/`);\r\n\t\t\t\tlet content = await response.data;\r\n\t\t\t\tcsrfCtx.setCsrfToken(content.token);\r\n\t\t\t\tif (content.user != false) {\r\n\t\t\t\t\tLogInHandler();\r\n\t\t\t\t\tsetUsernameHandler(content.user.username);\r\n\t\t\t\t\tsetEmailHandler(content.user.email);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t}\r\n\t\t// }\r\n\t}\r\n\r\n\t/**\r\n\t * Logs the user in\r\n\t */\r\n\tfunction LogInHandler() {\r\n\t\tsetIsLoggedIn(true);\r\n\t}\r\n\r\n\t/**\r\n\t * Logs the user out\r\n\t */\r\n\tfunction LogOutHandler() {\r\n\t\tsetIsLoggedIn(false);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a new valid `email`\r\n\t *\r\n\t * @param {string} newEmail\r\n\t */\r\n\tfunction setEmailHandler(newEmail) {\r\n\t\tif (newEmail == \"\") {\r\n\t\t\tsetEmail(\"\");\r\n\t\t} else if (\r\n\t\t\tnewEmail.match(\r\n\t\t\t\t/^([a-zA-Z0-9]+\\.?[a-zA-Z0-9]*)@[a-zA-Z0-9^\\.]+\\.([a-zA-Z]+\\.?[a-zA-Z]*)$/\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\tsetEmail(newEmail);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a new `username`\r\n\t *\r\n\t * @param {string} newUsername\r\n\t */\r\n\tfunction setUsernameHandler(newUsername) {\r\n\t\tif (newUsername.length > 0) {\r\n\t\t\tsetUsername(newUsername);\r\n\t\t} else {\r\n\t\t\tsetUsername(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<AccountCtx.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tloggedIn: isLoggedIn,\r\n\t\t\t\tusername: username,\r\n\t\t\t\temail: email,\r\n\t\t\t\tlogin: LogInHandler,\r\n\t\t\t\tlogOut: LogOutHandler,\r\n\t\t\t\tsetUsername: setUsernameHandler,\r\n\t\t\t\tsetEmail: setEmailHandler,\r\n\t\t\t\tcheckCred: updateCred,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</AccountCtx.Provider>\r\n\t);\r\n}\r\n","import { createContext, useState } from \"react\";\r\n\r\nexport const CsrfCtx = createContext({\r\n\ttoken: \"\",\r\n\tsetCsrfToken: (newToken) => {},\r\n});\r\n\r\n/**\r\n * Context Manager for Csrf\r\n *\r\n * @param {{children: any}} props\r\n * @returns Components that can use the csrf context\r\n */\r\nexport default function CsrfContextProvider(props) {\r\n\tconst [token, setToken] = useState(\"\");\r\n\r\n\t/**\r\n\t * Updates the csrf `token`\r\n\t *\r\n\t * @param {string} newToken\r\n\t */\r\n\tfunction updateToken(newToken) {\r\n\t\tsetToken(newToken);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<CsrfCtx.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\ttoken: token,\r\n\t\t\t\tsetCsrfToken: updateToken,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</CsrfCtx.Provider>\r\n\t);\r\n}\r\n","import { StyleSheet } from \"react-native\";\r\nconst HEIGHT = \"80%\";\r\nexport const SearchOptionsStyle = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tflex: 1,\r\n\t\talignItems: \"center\",\r\n\t\tpaddingTop: 10,\r\n\t\tmarginLeft: \"auto\",\r\n\t\tmarginRight: \"auto\",\r\n\t},\r\n\r\n\ttextButtonContainer: {\r\n\t\tflexDirection: \"row\",\r\n\t\tjustifyContent: \"center\",\r\n\t\tflexBasis: 50,\r\n\t\tmaxHeight: 50,\r\n\t},\r\n\r\n\tsearchIcon: {\r\n\t\theight: 25,\r\n\t\tmarginTop: 7,\r\n\t\twidth: \"100%\",\r\n\t\tresizeMode: \"contain\",\r\n\t},\r\n\r\n\timgContainer: {\r\n\t\tflexBasis: 20,\r\n\t\theight: 30,\r\n\t\tjustifyContent: \"center\",\r\n\t\tpaddingTop: 10,\r\n\t},\r\n\r\n\tinput: {\r\n\t\theight: 40,\r\n\t\tmarginLeft: 10,\r\n\t\tpadding: 15,\r\n\t\tpaddingBottom: 10,\r\n\t\tborderColor: \"black\",\r\n\t\tborderWidth: 1,\r\n\t\tborderRadius: 20,\r\n\t},\r\n\r\n\texclude: {\r\n\t\tflexDirection: \"row\",\r\n\t\tpadding: 5,\r\n\t\tpaddingLeft: 7,\r\n\t\tmarginLeft: 5,\r\n\t\tmarginTop: 5,\r\n\t\tmarginBottom: 5,\r\n\t\tbackgroundColor: \"#ff5c5c\",\r\n\t\tborderRadius: 10,\r\n\t},\r\n\r\n\texcludedHeader: {\r\n\t\tfontWeight: \"bold\",\r\n\t\tfontSize: 20,\r\n\t\ttextAlign: \"center\",\r\n\t},\r\n\r\n\texcludeList: { paddingLeft: 5, justifyContent: \"center\" },\r\n\r\n\texcluded: {\r\n\t\twidth: \"100%\",\r\n\t\tborderTopWidth: 2,\r\n\t\tborderLeftWidth: 2,\r\n\t\tborderRightWidth: 2,\r\n\t},\r\n\r\n\toptionsContainer: {\r\n\t\tflexDirection: \"row\",\r\n\t\tflexWrap: \"wrap\",\r\n\t\tjustifyContent: \"space-evenly\",\r\n\t\tminWidth: 400,\r\n\t\twidth: \"30%\",\r\n\t},\r\n\r\n\toptionTypesContainer: { borderWidth: 2, marginBottom: 5, height: 99 },\r\n\r\n\toptionTypes: {\r\n\t\twidth: 100,\r\n\t\tbackgroundColor: \"#ff9100\",\r\n\t\talignItems: \"center\",\r\n\t},\r\n\r\n\ttext: {\r\n\t\ttextAlign: \"center\",\r\n\t\tpadding: 5,\r\n\t},\r\n\r\n\toptionTypeHeader: {\r\n\t\tbackgroundColor: \"#ffee00\",\r\n\t\tfontWeight: \"bold\",\r\n\t},\r\n\r\n\tselectedMetaText: {\r\n\t\tfontSize: 25,\r\n\t},\r\n\r\n\tselectedOptionsContainer: {\r\n\t\theight: HEIGHT,\r\n\t\tminHeight: HEIGHT,\r\n\t\tmaxHeight: HEIGHT,\r\n\t\tborderWidth: 2,\r\n\t\tmarginBottom: 5,\r\n\t},\r\n});\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport const recipeListStyle = StyleSheet.create(\r\n    {\r\n        foodPicContainer:\r\n        {\r\n            alignItems: \"center\"\r\n        },\r\n        foodPic:\r\n        {\r\n            height: 200,\r\n            width: \"100%\",\r\n            resizeMode: \"contain\"\r\n        },\r\n\r\n        foodName:\r\n        {\r\n            marginTop: 20,\r\n            marginBottom: 20,\r\n            fontWeight: \"bold\",\r\n            padding: 10,\r\n            borderWidth: 1,\r\n            textAlign: \"center\"\r\n        }\r\n    });\r\n","import { createContext, useState } from \"react\";\r\n\r\nexport const Navigation = createContext({\r\n    route: \"\",\r\n    updateRoute: (newRoute) => {}\r\n});\r\n\r\n/**\r\n * Keeps track of the current route for the navigation bar\r\n * \r\n * @param {{children: any}} props \r\n * @returns Context provider to assist navigation bar\r\n */\r\nexport default function NavigationProvider(props) {\r\n    const [route, setRoute] = useState(\"\");\r\n\r\n    /**\r\n     * Updates the route\r\n     * \r\n     * @param {string} newRoute \r\n     */\r\n    function updateRoute(newRoute) {\r\n        if (newRoute !== \"\" || newRoute !== undefined) {\r\n            setRoute(newRoute);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Navigation.Provider\r\n            value={{\r\n                route: route,\r\n                updateRoute: updateRoute\r\n            }}\r\n        >\r\n            {props.children}\r\n        </Navigation.Provider>\r\n    );\r\n};","import { useContext, useState } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { Navigation } from \"../../context/Navigation\";\r\nimport Routes from \"../../Routes\";\r\n\r\n/**\r\n * Renders a NavBar\r\n *\r\n * @param {{\r\n * \t\tstyle?: any,\r\n * }} props\r\n * @returns Row of buttons that facilitate in navigating the application\r\n */\r\nexport default function NavBar(props) {\r\n\r\n\tconst Nav = useContext(Navigation);\r\n\tconst [routes, setRoute] = useState((initRoutes=[]) => {\r\n\t\t\r\n\t\tconst screens = Routes.config.screens;\r\n\t\tfor (const routeName in screens) {\r\n\t\t\tinitRoutes.push(screens[routeName]);\r\n\t\t}\r\n\r\n\t\treturn initRoutes;\r\n\t});\r\n\r\n\r\n\tlet leftButtons = [];\r\n\tlet rightButtons = [];\r\n\r\n\tconsole.log(`CurrentRoute: ${Nav.route}`)\r\n\tconsole.log(`Routes: ${routes}`)\r\n\t\r\n\treturn (\r\n\t\t<View style={props.style}>\r\n\t\t\t<Text>NavBar</Text>\r\n\t\t</View>\r\n\t);\r\n}\r\n"],"sourceRoot":""}