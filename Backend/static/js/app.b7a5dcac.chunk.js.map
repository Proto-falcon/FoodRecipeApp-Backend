{"version":3,"sources":["assets/favicon.png","assets/searchIcon.png","src/context/account.js","src/context/CsrfToken.js","src/context/Context.js","src/ipaddressesports/BackEndIP.js","src/components/RecipeList/RecipeListStyle.js","src/components/RecipeList/RecipeList.js","src/pages/Search/SearchStyle.js","src/AppStyles.js","src/components/Buttons/LogOutButton.js","src/components/NavBar/NavBar.js","src/components/Buttons/SearchButton.js","src/components/Buttons/LogInButton.js","src/components/Buttons/SignUpButton.js","src/pages/Search/Search.js","src/components/RecipeOption/RecipeOptionStyle.js","src/components/RecipeOption/RecipeOption.js","src/pages/SearchOptions/SearchOptionsStyle.js","src/RecipeMetaOptions.js","src/components/TextError/TextError.js","src/pages/SearchOptions/SearchOptions.js","src/components/FormField/FormField.js","src/pages/SignUp/SignUpStyles.js","src/components/Buttons/HomeButton.js","src/components/UserEmailForms/UserEmailForms.js","src/components/Form/Form.js","index.js","src/App.js"],"names":["module","exports","AccountCtx","createContext","loggedIn","username","email","setLoginStatus","setUsername","newUsername","setEmail","newEmail","checkCred","csrfCtx","domain","AccountProvider","props","useState","isLoggedIn","setIsLoggedIn","response","axios","get","content","data","setCsrfToken","token","user","LogInHandler","setUsernameHandler","setEmailHandler","prevState","match","length","Provider","value","children","CsrfCtx","newToken","CsrfContextProvider","setToken","RecipeResultsCtx","moreRecipesLink","setAddRecipesLink","link","results","name","image","require","ingredients","source","getRecipes","recipeList","addRecipes","isLoading","setIsLoading","boolean","ContextProvider","recipes","setRecipes","addRecipesLink","setAddLink","newState","i","push","recipeListStyle","StyleSheet","create","list","flex","width","maxWidth","foodPicContainer","alignItems","foodPic","height","resizeMode","foodName","marginTop","marginBottom","fontWeight","padding","borderWidth","textAlign","RecipeList","isMoreRecipes","setIsMoreRecipes","loadedAllRecipes","setLoadedAllRecipes","useWindowDimensions","distanceFromEnd","undefined","recipeLink","method","url","responseType","setData","error","useEffect","listStyle","View","style","FlatList","renderItem","item","uri","Image","Text","onEndReached","onEndReachedThreshold","extraData","SearchStyle","container","imgContainer","flexBasis","styles","searchIcon","marginRight","navText","color","fontSize","marginLeft","pageContainer","errorMsg","backgroundColor","borderRadius","LogOutButton","tokenCtx","useContext","accCtx","navigation","useNavigation","loggedOut","navigate","Pressable","onPress","NavBar","flexDirection","flexWrap","SearchButton","Link","to","screen","LoginButton","params","toLogin","SignUpButton","Search","ctx","isMounted","setOptions","headerRight","optionStyles","listContainer","RecipeOption","selectedData","setSelectedData","optionIncluded","exists","forEach","option","selectOptionHandler","RMoption","newList","concat","addOptions","type","updateData","e","SearchOptionsStyle","textButtonContainer","maxHeight","input","paddingBottom","borderColor","optionsContainer","justifyContent","minWidth","optionTypes","text","optionTypeHeader","selectedMetaText","selectedOptionsContainer","minHeight","diet","health","mealType","dishType","cuisineType","TextError","hasError","message","SearchOptions","accountCtx","options","num","optionType","setOptionType","inputIg","setinputIg","setHasError","isOptionsEmpty","emptyCount","queryOptions","index","query","trim","status","TextInput","onChangeText","igs","placeholder","optionObjArray","SectionList","sections","renderSectionHeader","section","RecipeMetaOptions","optionsArray","preveState","FormField","label","isPassword","onChangeTextHandler","inputStyle","labelStyle","containerStyle","secureTextEntry","SignUpStyles","formContainer","formInput","formLabel","submitButton","margin","HomeButton","UserEmailForms","usernameHandler","emailHandler","emailRegExp","Form","route","authCtx","password","setPasword","formValid","setFormValid","setErrorMsg","path","headers","withCredentials","signUpSuccess","loginSuccess","newPassword","registerRootComponent","Stack","createNativeStackNavigator","NavigationContainer","linking","config","screens","Home","SignIn","Login","Navigator","screenOptions","headerStyle","headerTitleStyle","headerTitleAlign","headerLeft","Screen","component","Group","StatusBar"],"mappings":"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AkB,CACjB7D,SAAU,IAGX8D,yBAA0B,CACzB3G,OAnEa,OAoEb4G,UApEa,OAqEbZ,UArEa,OAsEbzF,YAAa,EACbH,aAAc,KCkCD,IACdyG,KA3Ga,CACb,WACA,aACA,eACA,WACA,UACA,cAsGAC,OApGe,CACf,mBACA,eACA,cACA,kBACA,aACA,OACA,WACA,YACA,cACA,cACA,oBACA,gBACA,kBACA,SACA,gBACA,YACA,cACA,gBACA,eACA,eACA,eACA,QACA,cACA,aACA,YACA,gBACA,cACA,iBACA,WACA,kBACA,eACA,gBACA,QACA,aACA,cAkEAC,SA/DiB,CACjB,YACA,SACA,eACA,QACA,WA2DGC,SAxDc,CACjB,mBACA,uBACA,QACA,UACA,wBACA,WACA,SACA,MACA,wBACA,cACA,UACA,QACA,SACA,iBACA,QACA,QACA,WACA,QACA,aACA,UACA,YACA,OACA,oBACA,UACA,UAgCGC,YA7BiB,CACpB,WACA,QACA,UACA,YACA,iBACA,iBACA,UACA,SACA,QACA,SACA,UACA,WACA,SACA,SACA,gBACA,UACA,iBACA,SACA,iBACA,kBACA,UC1Fc,SAASC,GAAU7K,GACjC,OAAOA,EAAM8K,SACZ,cAACnF,EAAA,QAAI,CAACN,MAAOrF,EAAMqF,MAAM,SAAErF,EAAM+K,UAC9B,K,qkBCgBU,SAASC,GAAc,GAAiB,IAAf9D,EAAU,EAAVA,WACjCkB,EAAMpB,qBAAWvF,GACjBwF,EAASD,qBAAWiE,GAG1B,EAA8BhL,mBAAS,CACtCuK,KAAM,GACNC,OAAQ,GACRG,YAAa,GACbF,SAAU,GACVC,SAAU,KACT,WANKO,EAAO,KAAE5C,EAAU,KAO1B,EAAqCrI,oBAAS,WAC7C,IAAIkL,EAAM,GACV,IAAK,IAAMpI,KAAKmI,EACfC,EAAInI,KAAKD,GAEV,OAAOoI,KACN,WANKjB,EAAW,KAOlB,GAPiC,KAOGjK,mBAASiK,EAAY,KAAG,WAArDkB,EAAU,KAAEC,EAAa,KAChC,EAA8BpL,mBAAS,IAAG,WAAnCqL,EAAO,KAAEC,EAAU,KAC1B,EAAgCtL,oBAAS,GAAM,WAAxC6K,EAAQ,KAAEU,EAAW,KAC5B,EAA0BvL,mBAASwE,oBAAsBnB,OAAM,WAAxDA,EAAK,KACZ,GADsB,KACMrD,mBAASwE,oBAAsBd,SAAO,WAA3DA,EAAM,KAAW,KA6CxB,SAAS8H,IACR,IAAIC,EAAa,EACjB,IAAK,IAAM1C,KAAUkC,EAChBA,EAAQlC,GAAQ/H,QAAU,IAC7ByK,GAAc,GAGhB,OAAOA,GAAcxB,EAAYjJ,OAMV,aA8DvB,OA9DuB,OAAxB,YACC,KAAIqK,EAAQrK,QAAU,GAAKwK,KAA3B,CAKAD,GAAY,GAEZ,IAAIG,EAAe,GAEnB,GAAIF,EAAgB,CACnB,IAAI1I,EAAI,EAAE,WACCiG,GACVkC,EAAQlC,GAAQD,SAAQ,SAACvD,EAAMoG,GAC9BD,GAAmB3C,EAAM,IAAIxD,EACzBoG,EAAQV,EAAQlC,GAAQ/H,OAAS,IACpC0K,GAAgB,QAGdA,EAAa1K,OAAS,GAAM8B,EAAImH,EAAYjJ,SAC/C0K,GAAgB,KAEjB5I,GAAK,GAVN,IAAK,IAAMiG,KAAUkC,EAAU,EAApBlC,GAcZ,IAAI6C,EAAQ,GACRP,EAAQQ,OAAO7K,OAAS,GAAK0K,EAAa1K,OAAS,EACtD4K,EAAK,eAAkBP,EAAQQ,OAAM,IAAIH,EAC/BL,EAAQQ,OAAO7K,OAAS,EAClC4K,EAAK,eAAkBP,EAAQQ,OACrBH,EAAa1K,OAAS,IAChC4K,EAAQF,GAGT,IACC,IAAIvL,QAAiBC,kBAAM,CAC1BwE,OAAQ,MACRC,IAAiB,sBAAsB+G,EACvC9G,aAAc,SAGf,GAAI,IAAM3E,EAAS2L,OAAS,IAAK,CAChC,IAAIxL,QAAgBH,EAASI,KAE7B4H,EAAIjG,WAAW5B,EAAQsB,SACvBuG,EAAIzG,kBAAkBpB,EAAQqC,iBAE9B,SACDwF,EAAIjG,WAAW,CACd,CACCL,KAAM,2BACNC,MAAOC,EAAQ,KACfC,YAAa,CAAC,QACdC,OAAQ,MAOX,OAFAkG,EAAI7F,cAAa,GAEV2E,EAAWG,SAAS,QA3D1BmE,GAAY,OA4Db,sBAmDD,OAxKAtG,qBAAU,WACL+B,EAAO7H,SACV8H,EAAWoB,WAAW,CACrBC,YAAa,kBACZ,cAACf,EAAM,UACN,cAACV,EAAY,SAMhBI,EAAWoB,WAAW,CACrBC,YAAa,kBACZ,eAACf,EAAM,WACN,cAACO,EAAW,IACZ,cAACG,EAAY,YAKf,CAACjB,EAAO7H,WAqJV,eAACgG,EAAA,QAAI,CACJC,MAAK,YACDoE,GAAmBzD,WACnBG,EAAOO,eAAa,IACvBpD,MAAOA,EAAQ,IAAM,OAAS,QAC7B,UAEF,eAAC8B,EAAA,QAAI,CAACC,MAAOoE,GAAmBC,oBAAoB,UACnD,cAACpC,EAAA,QAAS,CACTjC,MAAOoE,GAAmBxD,aAC1BsB,QAjIH,WAKuB,gCA4HD,SAEnB,cAAC7B,EAAA,QAAK,CACLL,MAAOoE,GAAmBrD,WAC1BlE,OAAQF,EAAQ,SAIlB,cAACgK,EAAA,QAAS,CACT3G,MAAO,CACNoE,GAAmBG,MACnB,CAAEE,YAAagB,EAAW,MAAQ,UAEnCmB,aAnEJ,SAA0BC,GACzBX,EAAWW,IAmERC,YAAY,cAId,cAACtB,GAAS,CACTC,SAAUA,EACVzF,MAAOc,EAAOQ,SACdoE,QAAS,uCAGV,eAAC3F,EAAA,QAAI,CACJC,MAAK,SACDoE,GAAmBM,kBAAgB,IACtCJ,UAAWhG,EAAS,IACpB8D,cAAe,QACd,UAEF,eAtEH,WACC,IACI2E,EAAiB,GAErB,IAAK,IAAMpD,KAAUkC,EACpBkB,EAAepJ,KAAK,CACnBoI,WAAYpC,EACZxI,KAAM0K,EAAQlC,KAIhB,OACC,eAAC5D,EAAA,QAAI,CAACC,MAAK,SAAMoE,GAAmBa,0BAAwB,IAAEhH,MAXvC,SAW+D,UACrF,cAACqC,EAAA,QAAI,CAACN,MAAK,YAAMoE,GAAmBU,MAASV,GAAmBY,kBAAgB,IAAErG,WAAY,SAAQ,8BACtG,cAACqI,EAAA,QAAW,CACZhH,MAAO,CAAC/B,MAAO,QACdgJ,SAAUF,EACV7G,WAAY,gBAAEC,EAAI,EAAJA,KAAI,OAAM,cAACG,EAAA,QAAI,CAACN,MAAK,MAAMoE,GAAmBU,MAAM,SAAE3E,KACpE+G,oBAAqB,YAA8B,IAAlBnB,EAAU,EAApBoB,QAAUpB,WAChC,OACC,cAACzF,EAAA,QAAI,CAACN,MAAK,YAAMoE,GAAmBW,kBAAqBX,GAAmBY,kBAAqBZ,GAAmBU,MAAM,SACxHiB,YAiDW,IAChB,cAAChG,EAAA,QAAI,CAACC,MAAO,CAAEnB,YAAa,EAAGH,aAAc,EAAGJ,OAAQ,IAAK,SAC5D,cAAC2B,EAAA,QAAQ,CACR9E,KAAM0J,EACN3E,WArFL,SAA2B,GAAW,IAATC,EAAI,EAAJA,KAC5B,OACC,cAAC8B,EAAA,QAAS,CACTjC,MAAOoE,GAAmBS,YAC1B3C,QAAS,kBAAM8D,EAAc7F,IAAM,SAEnC,cAACG,EAAA,QAAI,CAACN,MAAO,CAACrB,WAAW,QAAQ,SAAEwB,WAkFnC,cAACkD,EAAY,CACZrD,MAAO,CAAC1B,OAAQ,MAAOgG,UAAW,OAClCL,KAAM8B,EACN5K,KAAMiM,GAAkBrB,GACxBzC,aAAcuC,EAAQE,GACtB7B,WAlMJ,SAAuBD,EAAMoD,GAC5BpE,GAAW,SAACqE,GACX,IAAI7J,EAAQ,MAAQ6J,GAGpB,OAFA7J,EAASwG,GAAQoD,EAEV5J,c,qkBCzEK,SAAS8J,GAAU,GAQ9B,IAPHC,EAAK,EAALA,MAAM,EAAD,EACLV,mBAAW,MAAG,GAAE,MAChBW,kBAAU,OAAQ,MAClBC,2BAAmB,WAAGpI,EAAS,MAC/BqI,kBAAU,MAAG,GAAE,MACfC,kBAAU,MAAG,GAAE,MACfC,sBAAc,MAAG,GAAE,EAEnB,OACC,eAAC9H,EAAA,QAAI,CAACC,MAAK,MAAO6H,GAAiB,UAClC,cAACvH,EAAA,QAAI,CAACN,MAAK,MAAO4H,GAAa,SAAEJ,IACjC,cAACb,EAAA,QAAS,CACT3G,MAAK,MAAO2H,GACZG,gBAAiBL,EACjBb,aAAcc,EACdZ,YAAaA,OChCV,IAAMiB,GAAelK,UAAWC,OACnC,CACIkK,cAAe,CACX/J,MAAO,MACP2G,SAAU,MACV1G,SAAU,OAGd+J,UAAW,CACPrJ,QAAS,EACTH,UAAW,GACXI,YAAa,EACb2C,aAAc,IAGlB0G,UAAW,CACPlH,YAAa,GACblC,UAAW,OACXH,WAAY,QAGhBwJ,aAAc,CACVvJ,QAAS,GACTwJ,OAAQ,GACR5G,aAAc,GACdD,gBAAiB,aClBd,SAAS8G,KACvB,OACC,cAAC9F,EAAA,QAAI,CACJvC,MAAO,CACNuB,gBAAiB,QAElBiB,GAAI,CAAEC,OAAQ,QAAS,SAEvB,cAACnC,EAAA,QAAI,CAACN,MAAOc,EAAOG,QAAQ,oBCChB,SAASqH,GAAe3N,GACtC,OAAIA,EAAMiI,QAER,cAAC2E,GAAS,CACTC,MAAO,kBACPV,YAAa,+BACbY,oBAAqB/M,EAAM4N,gBAC3BV,eAAgBlN,EAAMkN,eACtBD,WAAYjN,EAAMiN,WAClBD,WAAYhN,EAAMgN,aAKnB,qCACC,cAACJ,GAAS,CACTC,MAAO,YACPV,YAAa,yBACbY,oBAAqB/M,EAAM4N,gBAC3BV,eAAgBlN,EAAMkN,eACtBD,WAAYjN,EAAMiN,WAClBD,WAAYhN,EAAMgN,aAEnB,cAACJ,GAAS,CACTC,MAAO,SACPV,YAAa,sBACbY,oBAAqB/M,EAAM6N,aAC3BX,eAAgBlN,EAAMkN,eACtBD,WAAYjN,EAAMiN,WAClBD,WAAYhN,EAAMgN,gB,qkBCnCvB,IAAMc,GAAc,2EAaL,SAASC,GAAK,GAAuB,IAAtBC,EAAK,EAALA,MAAO9G,EAAU,EAAVA,WAE9B+G,EAAUjH,qBAAW3F,GACrB4F,EAASD,qBAAW9H,GAC1B,EAA8Be,mBAAS+N,EAAMhG,OAAOC,SAAQ,WAArDA,EAAO,KACd,GAD0B,KACMhI,mBAAS,KAAG,WAArCZ,EAAQ,KAAEG,EAAW,KAC5B,EAA0BS,mBAAS,IAAG,WAA/BX,EAAK,KAAEI,EAAQ,KACtB,EAA+BO,mBAAS,IAAG,WAApCiO,EAAQ,KAAEC,EAAU,KACxB,EAAkClO,oBAAS,GAAK,WAAzCmO,EAAS,KAAEC,EAAY,KACjC,EAAgCpO,mBAAS,IAAG,WAArC0G,EAAQ,KAAE2H,EAAW,KAuCK,aAsD7B,OAtD6B,OAA9B,YACI,GAAIrG,IAAY5I,EAAS4B,QAAU,GAAKiN,GAAY,GACzDI,EAAY,+CACHD,GAAa,QAElB,IAAKpG,IAAY5I,EAAS4B,QAAU,GAAK3B,EAAM2B,QAAS,GAAKiN,GAAY,GAC7EI,EAAY,+CACHD,GAAa,OAElB,CACKA,GAAa,GACtB,IAAIxJ,EAAS,OACT0J,EAAO,UACPtG,IACHpD,EAAS,MACT0J,EAAO,UAGR,IAAInO,QAAiBC,kBACpB,CACCwE,OAAQA,EACR2J,QAAS,CAAC,cAAeP,EAAQvN,MAAO,YAAe,WACvD+N,iBAAiB,EACjB3J,IAAiB,QAAQyJ,EACzBxJ,aAAc,OACdvE,KAAM,CACLnB,SAAUA,EACVC,MAAOA,EACP4O,SAAUA,KAKT3N,QAAgBH,EAASI,KACzB,IAAMJ,EAAS2L,OAAS,KACvBxL,EAAQmO,eAMHnO,EAAQoO,gBALhB1H,EAAO1H,gBAAe,GACtB0H,EAAOzH,YAAYH,GACnB4H,EAAOvH,SAASJ,GAChB4H,EAAWG,SAAS,UAUrBiH,EAAY/N,EAAQwK,SACpBsD,GAAa,SAIZ,sBAEJ,OACC,eAACjJ,EAAA,QAAI,CAACC,MAAK,SAAOc,EAAOO,eAAa,IAAEjD,WAAY,WAAW,UAC9D,cAACkK,GAAc,CACd1F,QAASA,EACT2F,gBA5FH,SAAyBnO,GACxBD,EAAYC,IA4FVoO,aApFH,SAAsBlO,GAEW,MAA/BA,EAASqB,MAAM8M,IAEfpO,EAASC,GAETD,EAAS,KA+ERwN,eAAgBE,GAAaC,cAC7BJ,WAAYG,GAAaG,UACzBP,WAAYI,GAAaE,YAE1B,cAACV,GAAS,CACTC,MAAO,YACPV,YAAa,yBACbW,YAAY,EACZC,oBA9EH,SAAyB6B,GACxBT,EAAWS,IA8EG1B,eAAgBE,GAAaC,cAC7BJ,WAAYG,GAAaG,UACzBP,WAAYI,GAAaE,YAEtC,cAAChG,EAAA,QAAS,CAACjC,MAAO+H,GAAaI,aAAcjG,QAjF9C,WAMgC,gCA2EuC,SACrE,cAAC5B,EAAA,QAAI,CAACN,MAAO,CAACrB,WAAY,QAAS,uBAGpC,cAAC6G,GAAS,CACTC,UAAWsD,EACX/I,MAAOc,EAAOQ,SACdoE,QAASpE,OCpJbkI,mBCce,WAEd,IAAMC,EAAQC,oBAad,OACC,eAACtM,EAAe,WACf,cAACuM,EAAA,QAAmB,CAACC,QAdP,CACfC,OAAQ,CACPC,QAAS,CACRC,KAAM,OACNjH,OAAQ,SACRkH,OAAQ,SACRC,MAAO,WAQ8B,SACrC,eAACR,EAAMS,UAAS,CACfC,cAAe,CACdC,YAAa,CAAE7I,gBAAiB,WAChC8I,iBAAkB,CAAEnJ,MAAO,SAC3BoJ,iBAAkB,SAClBC,WAAY,aACZrH,YAAa,kBAAM,eAACf,EAAM,WAAC,cAACO,EAAW,IAAG,cAACG,EAAY,IAAG,cAACP,EAAY,SACtE,UAEF,cAACmH,EAAMe,OAAM,CACZ/N,KAAK,OACLgO,UAAW3H,IAEZ,eAAC2G,EAAMiB,MAAK,CACXP,cAAe,YAAQ,EAALxB,MAAiB,EAAV9G,WACxB,MAAO,CACN0I,WAAY,kBAAM,cAAClC,GAAU,OAE7B,UAEF,cAACoB,EAAMe,OAAM,CACZ/N,KAAK,SACLgO,UAAW9E,GACXE,QAAS,CAAC3C,YAAa,kBAAM,eAACf,EAAM,WAAC,cAACO,EAAW,IAAE,cAACG,EAAY,WAGjE,cAAC4G,EAAMe,OAAM,CACZ/N,KAAK,SACLgO,UAAW/B,GACX7C,QAAS,CAAC3C,YAAa,kBAAM,eAACf,EAAM,WAAC,cAACO,EAAW,IAAE,cAACJ,EAAY,WAGjE,cAACmH,EAAMe,OAAM,CACZ/N,KAAK,QACLgO,UAAW/B,GACX7C,QAAS,CAAC3C,YAAa,kBAAM,eAACf,EAAM,WAAC,cAACU,EAAY,IAAE,cAACP,EAAY,mBAKrE,cAACqI,EAAA,UAAS,Y","file":"static/js/app.b7a5dcac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.fa4783d1.png\";","module.exports = __webpack_public_path__ + \"static/media/searchIcon.498a808b.png\";","import axios from \"axios\";\r\nimport { createContext, useState } from \"react\";\r\n\r\n// Context for account info\r\nconst AccountCtx = createContext({\r\n\tloggedIn: false,\r\n\tusername: \"\",\r\n\temail: \"\",\r\n\tsetLoginStatus: () => {},\r\n\tsetUsername: (newUsername) => {},\r\n\tsetEmail: (newEmail) => {},\r\n\tcheckCred: (csrfCtx, domain) => {},\r\n});\r\n\r\n/**\r\n * Account System\r\n *\r\n * @param {{children: any}} props\r\n * @returns App UI\r\n */\r\nexport function AccountProvider(props) {\r\n\tconst [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\tconst [username, setUsername] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\r\n\t/**\r\n\t * Checks whether the user is still logged in or not\r\n\t *\r\n\t * @param {{\r\n\t *     token: string;\r\n\t *     setCsrfToken: (newToken: any) => void;\r\n\t * }} csrfCtx\r\n\t * @param {string} domain\r\n\t */\r\n\tasync function updateCred(csrfCtx, domain) {\r\n\t\tif (!isLoggedIn) {\r\n\t\t\tlet response = await axios.get(`${domain}/api/checkLogin/`);\r\n\t\t\tlet content = await response.data;\r\n\t\t\tcsrfCtx.setCsrfToken(content.token);\r\n\t\t\tif (content.user != false) {\r\n\t\t\t\tLogInHandler();\r\n\t\t\t\tsetUsernameHandler(content.user.username);\r\n\t\t\t\tsetEmailHandler(content.user.email);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inverts the `isLoggedIn` state\r\n\t */\r\n\tfunction LogInHandler() {\r\n\t\tsetIsLoggedIn((prevState) => !prevState);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a new valid `email`\r\n\t *\r\n\t * @param {string} newEmail\r\n\t */\r\n\tfunction setEmailHandler(newEmail) {\r\n\t\tif (newEmail == \"\") {\r\n\t\t\tsetEmail(\"\");\r\n\t\t} else if (\r\n\t\t\tnewEmail.match(\r\n\t\t\t\t/^([a-zA-Z0-9]+\\.?[a-zA-Z0-9]*)@[a-zA-Z0-9^\\.]+\\.([a-zA-Z]+\\.?[a-zA-Z]*)$/\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\tsetEmail(newEmail);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a new `username`\r\n\t *\r\n\t * @param {string} newUsername\r\n\t */\r\n\tfunction setUsernameHandler(newUsername) {\r\n\t\tif (newUsername.length > 0) {\r\n\t\t\tsetUsername(newUsername);\r\n\t\t} else {\r\n\t\t\tsetUsername(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<AccountCtx.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tloggedIn: isLoggedIn,\r\n\t\t\t\tusername: username,\r\n\t\t\t\temail: email,\r\n\t\t\t\tsetLoginStatus: LogInHandler,\r\n\t\t\t\tsetUsername: setUsernameHandler,\r\n\t\t\t\tsetEmail: setEmailHandler,\r\n\t\t\t\tcheckCred: updateCred,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</AccountCtx.Provider>\r\n\t);\r\n}\r\n\r\nexport default AccountCtx;\r\n","import { createContext, useState } from \"react\";\r\n\r\nconst CsrfCtx = createContext({\r\n\ttoken: \"\",\r\n\tsetCsrfToken: (newToken) => {},\r\n});\r\n\r\n/**\r\n * Context Manager for Csrf\r\n *\r\n * @param {{children: any}} props\r\n * @returns Components that can use the csrf context\r\n */\r\nexport function CsrfContextProvider(props) {\r\n\tconst [token, setToken] = useState(\"\");\r\n\r\n\t/**\r\n\t * Updates the csrf `token`\r\n\t *\r\n\t * @param {string} newToken\r\n\t */\r\n\tfunction updateToken(newToken) {\r\n\t\tsetToken(newToken);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<CsrfCtx.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\ttoken: token,\r\n\t\t\t\tsetCsrfToken: updateToken,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</CsrfCtx.Provider>\r\n\t);\r\n}\r\n\r\nexport default CsrfCtx;\r\n","import { createContext, useState } from \"react\";\r\nimport { AccountProvider } from \"./account\";\r\nimport { CsrfContextProvider } from \"./CsrfToken\";\r\n\r\n// Creates a context for reciperesults\r\nconst RecipeResultsCtx = createContext({\r\n\tmoreRecipesLink: \"\", // Link to fetch more recipes\r\n\tsetAddRecipesLink: (link) => {}, // set Recipes link\r\n\tresults: [\r\n\t\t// array of recipes\r\n\t\t{\r\n\t\t\tname: \"No Recipe Name Available\",\r\n\t\t\timage: require(\"../../assets/favicon.png\"),\r\n\t\t\tingredients: [\"None\"],\r\n\t\t\tsource: \"\",\r\n\t\t},\r\n\t],\r\n\tgetRecipes: (recipeList) => {}, // Create a list of recipes\r\n\taddRecipes: (recipeList, link) => {}, // Add recipes to the current list\r\n\tisLoading: false,\r\n\tsetIsLoading: (boolean) => {}\r\n});\r\n\r\n/**\r\n * Component only used for managing context for the whole app\r\n * \r\n * @param {*} props \r\n * @returns Child Elements\r\n */\r\nexport function ContextProvider(props) {\r\n\r\n\t// Array of recipes\r\n\tconst [recipes, setRecipes] = useState([\r\n\t\t{\r\n\t\t\tname: \"No Recipe Name Available\",\r\n\t\t\timage: \"\",\r\n\t\t\tingredients: [\"None\"],\r\n\t\t\tsource: \"\",\r\n\t\t},\r\n\t]);\r\n\r\n\t// link to recipes\r\n\tconst [addRecipesLink, setAddRecipesLink] = useState(\"\");\r\n\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\t/**\r\n\t * Sets link to fetch more recipes\r\n\t *\r\n\t * @param {string} link\r\n\t */\r\n\tfunction setAddLink(link) {\r\n\t\tsetAddRecipesLink(link);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an array with recipes\r\n\t *\r\n\t * @param {Array<{\r\n\t *  name: string,\r\n\t *  image: string,\r\n\t *  ingredients: Array<string>,\r\n\t *  source: string\r\n\t * }>} recipeList\r\n\t */\r\n\tfunction GetRecipes(recipeList) {\r\n\t\tif (recipeList[0].source != \"\") {\r\n\t\t\tsetRecipes([\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"No Recipe Name Available\",\r\n\t\t\t\t\timage: \"\",\r\n\t\t\t\t\tingredients: [\"None\"],\r\n\t\t\t\t\tsource: \"\",\r\n\t\t\t\t},\r\n\t\t\t]);\r\n\t\t\t\r\n            let newState = recipeList;\r\n            setRecipes(newState);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a new array that adds a new recipes\r\n\t * to the current list and updates link to\r\n\t * fetch more recipes\r\n\t *\r\n\t * @param {Array<{\r\n\t *  name: string,\r\n\t *  image: string,\r\n\t *  ingredients: Array<string>,\r\n\t *  source: string\r\n\t * }>} recipeList\r\n\t * @param {string} link\r\n\t */\r\n\tfunction addRecipes(recipeList, link) {\r\n\t\tlet newState = [];\r\n\r\n\t\tfor (let i = 0; i < recipes.length; i++) {\r\n\t\t\tnewState.push(recipes[i]);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < recipeList.length; i++) {\r\n\t\t\tnewState.push(recipeList[i]);\r\n\t\t}\r\n\r\n\t\tsetRecipes(newState);\r\n\t\tsetAddLink(link);\r\n\t}\r\n\r\n\t/**\r\n\t * Wraps the whole app in a context provider\r\n\t */\r\n\treturn (\r\n\t\t<CsrfContextProvider>\r\n\t\t\t<AccountProvider>\r\n\t\t\t\t<RecipeResultsCtx.Provider\r\n\t\t\t\t\tvalue={{\r\n\t\t\t\t\t\tmoreRecipesLink: addRecipesLink,\r\n\t\t\t\t\t\tresults: recipes,\r\n\t\t\t\t\t\tgetRecipes: GetRecipes,\r\n\t\t\t\t\t\tsetAddRecipesLink: setAddLink,\r\n\t\t\t\t\t\taddRecipes: addRecipes,\r\n\t\t\t\t\t\tisLoading: isLoading,\r\n\t\t\t\t\t\tsetIsLoading: setIsLoading\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{props.children}\r\n\t\t\t\t</RecipeResultsCtx.Provider>\r\n\t\t\t</AccountProvider>\r\n\t\t</CsrfContextProvider>\r\n\t);\r\n}\r\n\r\nexport default RecipeResultsCtx;\r\n","const BACKENDLOCAL = \"http://localhost:8000\";\r\nconst BACKENDIPHOME = \"http://192.168.0.30:8000\";\r\n\r\nlet domain = \"\";\r\nif (__DEV__) {\r\n\tdomain = BACKENDIPHOME;\r\n}\r\nconst BACKEND = domain;\r\nexport default BACKEND;","import { StyleSheet } from \"react-native\";\r\n\r\nexport const recipeListStyle = StyleSheet.create(\r\n    {\r\n        list: {\r\n            flex: 1,\r\n            width: \"50%\",\r\n            maxWidth: 300,\r\n        },\r\n        foodPicContainer:\r\n        {\r\n            alignItems: \"center\"\r\n        },\r\n        foodPic:\r\n        {\r\n            height: 200,\r\n            width: \"100%\",\r\n            resizeMode: \"contain\"\r\n        },\r\n\r\n        foodName:\r\n        {\r\n            marginTop: 20,\r\n            marginBottom: 20,\r\n            fontWeight: \"bold\",\r\n            padding: 10,\r\n            borderWidth: 1,\r\n            textAlign: \"center\"\r\n        }\r\n    });\r\n","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { FlatList, Image, Text, useWindowDimensions, View } from \"react-native\";\r\nimport BackEndIP from \"../../ipaddressesports/BackEndIP\";\r\nimport { recipeListStyle } from \"./RecipeListStyle\";\r\n\r\n\r\n/**\r\n * Renders a list of Recipes\r\n * @typedef {{\r\n * \t\tname: string,\r\n *  \timage: any,\r\n *  \tingredients: Array<string>,\r\n *  \tsource: string\r\n * \t}} recipe\r\n * \r\n * @param {{\r\n * \trecipes:\r\n * \t\tArray<recipe>,\r\n *  recipeLink: string,\r\n *  setData: (recipeResults: Array<recipe>, addRecipesLink: string) => void\r\n * }} props \r\n * @returns List of Recipes\r\n */\r\nexport default function RecipeList(props) {\r\n\r\n\tconst [recipes, setRecipes] = useState(props.recipes); // List of recipes\r\n\tconst [isMoreRecipes, setIsMoreRecipes] = useState(true);\r\n\tconst [loadedAllRecipes, setLoadedAllRecipes] = useState(false);\r\n\tconst [width, setWidth] = useState(useWindowDimensions().width);\r\n\r\n\t/**\r\n\t * Forces it to update the list because some reason\r\n\t * it doens't register it on first render\r\n\t */\r\n\tuseEffect(() => {\r\n\t\tsetRecipes(props.recipes)\r\n\t}, [props.recipes]);\r\n\r\n\t/**\r\n\t * Renders a recipe with in image and name\r\n\t * \r\n\t * @param {recipe} item \r\n\t * @returns A recipe with image and name\r\n\t */\r\n\tfunction renderRecipe({ item }) {\r\n\t\tlet image = \"\";\r\n\t\tif (item.image != \"\")\r\n\t\t{\r\n\t\t\timage = {uri:item.image, height: width, width: \"100%\"};\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\timage = require(\"../../../assets/favicon.png\");\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<View>\r\n\t\t\t\t<View style={recipeListStyle.foodPicContainer}>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tstyle={recipeListStyle.foodPic}\r\n\t\t\t\t\t\tsource={image}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\t\t\t\t<Text style={recipeListStyle.foodName}>{item.name}</Text>\r\n\t\t\t</View>\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds more recipes to the current list\r\n\t * when the user scrolls near the bottom\r\n\t * \r\n\t * @param {number} distanceFromEnd \r\n\t */\r\n    async function loadMoreRecipes({distanceFromEnd})\r\n    {\r\n\t\tif (props.recipeLink != undefined && props.recipeLink != \"\" && isMoreRecipes)\r\n\t\t{\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await axios({\r\n\t\t\t\t\tmethod: \"get\",\r\n\t\t\t\t\turl: `${BackEndIP}/api/addRecipes/?nextLink=${props.recipeLink}`,\r\n\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlet content = await response.data;\r\n\t\t\t\tprops.setData(content.results, content.addRecipesLink);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tsetIsMoreRecipes(false);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (recipes[recipes.length - 1].source != \"\" && !loadedAllRecipes) {\r\n\t\t\tsetRecipes((prevState) => {\r\n\t\t\t\tlet newState = [...prevState]\r\n\t\t\t\tnewState.push({\r\n\t\t\t\t\tname: \"No more Recipes\",\r\n\t\t\t\t\timage: \"\",\r\n\t\t\t\t\tingredients: [],\r\n\t\t\t\t\tsource: \"\",\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t\t\treturn newState\r\n\t\t\t});\r\n\t\t\tsetLoadedAllRecipes(prevState => !prevState);\r\n\t\t}\r\n    }\r\n\r\n\tlet listStyle = {\r\n\t\tflex: 1,\r\n\t\twidth: width > 700 ? \"30%\" : \"100%\",\r\n\t\t\r\n\t};\r\n\r\n\treturn (\r\n\t\t<View style={[listStyle]}>\r\n\t\t\t<FlatList\r\n\t\t\t\tdata={recipes}\r\n\t\t\t\trenderItem={renderRecipe}\r\n                onEndReached={loadMoreRecipes}\r\n                onEndReachedThreshold={2}\r\n\t\t\t\textraData={recipes}\r\n\t\t\t/>\r\n\t\t</View>\r\n\t);\r\n}\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport const SearchStyle = StyleSheet.create(\r\n    {\r\n        container: {\r\n            flex: 2,\r\n            alignItems: \"center\",\r\n        },\r\n\r\n        imgContainer: {\r\n            flexBasis:30,\r\n            height: 30,\r\n            marginTop: 7,\r\n            marginBottom: 7,\r\n        },\r\n    });","import { StyleSheet } from \"react-native\";\r\n\r\nexport const styles = StyleSheet.create({\r\n\tsearchIcon: {\r\n\t\theight: 20,\r\n\t\twidth: 20,\r\n\t\tresizeMode: \"contain\",\r\n\t\tmarginRight: 10\r\n\t},\r\n\r\n\tnavText: {\r\n\t\tcolor: \"white\",\r\n\t\tfontSize: 18,\r\n\t\tfontWeight: \"500\",\r\n\t\tmarginLeft: 10,\r\n\t},\r\n\r\n\tpageContainer: {\r\n\t\tmarginTop: 10,\r\n\t\ttextAlign: \"center\",\r\n\t},\r\n\r\n\terrorMsg: {\r\n\t\tcolor: \"white\",\r\n\t\tbackgroundColor: \"red\",\r\n\t\tpadding: 10,\r\n\t\tfontWeight: \"bold\",\r\n\t\tfontSize: 20,\r\n\t\tborderRadius: 20,\r\n\t},\r\n});","import { useNavigation } from \"@react-navigation/native\";\r\nimport axios from \"axios\";\r\nimport { useContext } from \"react\";\r\nimport { Pressable, Text } from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport AccountCtx from \"../../context/account\";\r\nimport CsrfCtx from \"../../context/CsrfToken\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\n\r\n/**\r\n * Renders the Logout Button\r\n *\r\n * @returns Logut Button\r\n */\r\nexport default function LogOutButton() {\r\n\tconst tokenCtx = useContext(CsrfCtx);\r\n\tconst accCtx = useContext(AccountCtx);\r\n\tconst navigation = useNavigation();\r\n\r\n\t/**\r\n\t * Logs the user out from the backend server `session`.\r\n\t */\r\n\tasync function LogOutHandler() {\r\n\t\tlet response = await axios.get(`${BACKEND}/api/logout/`);\r\n\t\tlet content = await response.data;\r\n\r\n\t\tif (content.loggedOut) {\r\n\t\t\taccCtx.setLoginStatus(false);\r\n\t\t\taccCtx.setUsername(\"\");\r\n\t\t\taccCtx.setEmail(\"\");\r\n\t\t\ttokenCtx.setCsrfToken(content.token);\r\n\t\t\tnavigation.navigate(\"Home\");\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Pressable\r\n\t\t\tstyle={{ padding: 5 }}\r\n\t\t\tonPress={LogOutHandler}\r\n\t\t>\r\n\t\t\t<Text style={styles.navText}>Sign Out</Text>\r\n\t\t</Pressable>\r\n\t);\r\n}\r\n","import { View } from \"react-native\";\r\n\r\n/**\r\n * Renders a NavBar\r\n *\r\n * @param {*} props\r\n * @returns Row of buttons that facilitate in navigating the application\r\n */\r\nexport default function NavBar(props) {\r\n\treturn (\r\n\t\t<View style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\r\n\t\t\t{props.children}\r\n\t\t</View>\r\n\t);\r\n}\r\n","import { Link } from \"@react-navigation/native\";\r\nimport { Image } from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport { SearchStyle } from \"../../pages/Search/SearchStyle\";\r\n\r\n/**\r\n * Renders the Search Button\r\n * @returns Button that links to the Search Options page\r\n */\r\nexport default function SearchButton() {\r\n\tconst image = require(\"../../../assets/searchIcon.png\");\r\n\treturn (\r\n\t\t<Link\r\n\t\t\tto={{ screen: \"Search\" }}\r\n\t\t\tstyle={SearchStyle.imgContainer}\r\n\t\t>\r\n\t\t\t<Image\r\n\t\t\t\tstyle={styles.searchIcon}\r\n\t\t\t\tsource={image}\r\n\t\t\t/>\r\n\t\t</Link>\r\n\t);\r\n}\r\n","import { Link } from \"@react-navigation/native\";\r\nimport { Text } from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\n\r\n/**\r\n * Renders the Login Button\r\n *\r\n * @returns Button that links to the Login page\r\n */\r\nexport default function LoginButton() {\r\n\treturn (\r\n\t\t<Link\r\n\t\t\tto={{ screen: \"Login\", params: {toLogin: true} }}\r\n\t\t\tstyle={{ padding: 5 }}\r\n\t\t>\r\n\t\t\t<Text style={styles.navText}>Login</Text>\r\n\t\t</Link>\r\n\t);\r\n}\r\n","import { Link } from \"@react-navigation/native\";\r\nimport { Text } from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\n\r\n/**\r\n * Renders the Sign Up Page\r\n *\r\n * @returns Button that links to the Sign In page\r\n */\r\nexport default function SignUpButton() {\r\n\treturn (\r\n\t\t<Link\r\n\t\t\tto={{ screen: \"SignUp\", params: {toLogin: false} }}\r\n\t\t\tstyle={{ padding: 5 }}\r\n\t\t>\r\n\t\t\t<Text style={styles.navText}>Sign Up</Text>\r\n\t\t</Link>\r\n\t);\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { Platform, View } from \"react-native\";\r\nimport RecipeResultsCtx from \"../../context/Context\";\r\nimport RecipeList from \"../../components/RecipeList/RecipeList\";\r\nimport { SearchStyle } from \"./SearchStyle\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport CsrfCtx from \"../../context/CsrfToken\";\r\nimport BackEndIP from \"../../ipaddressesports/BackEndIP\";\r\nimport AccountCtx from \"../../context/account\";\r\nimport LogOutButton from \"../../components/Buttons/LogOutButton\";\r\nimport NavBar from \"../../components/NavBar/NavBar\";\r\nimport SearchButton from \"../../components/Buttons/SearchButton\";\r\nimport LoginButton from \"../../components/Buttons/LogInButton\";\r\nimport SignUpButton from \"../../components/Buttons/SignUpButton\";\r\n\r\n/**\r\n * Renders the page with recipe results depending on\r\n * the options selected in Search Options page 🔎\r\n *\r\n * @returns Search Results Page\r\n */\r\nexport default function Search({ navigation }) {\r\n\tconst ctx = useContext(RecipeResultsCtx);\r\n\tconst csrfCtx = useContext(CsrfCtx);\r\n\tconst accCtx = useContext(AccountCtx);\r\n\r\n\tconst [isMounted, setIsMounted] = useState(true);\r\n\r\n\tuseEffect(() => ctx.setIsLoading(false), [ctx.isLoading]);\r\n\r\n\r\n\t// Checks the user has logged in when the app boots up\r\n\tuseEffect(() => {\r\n\t\taccCtx.checkCred(csrfCtx, BackEndIP)\r\n\t}, [isMounted]);\r\n\r\n\t// Changes the navigation bar if the user is logged in or not.\r\n\tuseEffect(() => {\r\n\t\tif (accCtx.loggedIn) {\r\n\t\t\tnavigation.setOptions({\r\n\t\t\t\theaderRight: () => (\r\n\t\t\t\t\t<NavBar>\r\n\t\t\t\t\t\t<LogOutButton />\r\n\t\t\t\t\t\t<SearchButton />\r\n\t\t\t\t\t</NavBar>\r\n\t\t\t\t),\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnavigation.setOptions({\r\n\t\t\t\theaderRight: () => (\r\n\t\t\t\t\t<NavBar>\r\n\t\t\t\t\t\t<LoginButton />\r\n\t\t\t\t\t\t<SignUpButton />\r\n\t\t\t\t\t\t<SearchButton />\r\n\t\t\t\t\t</NavBar>\r\n\t\t\t\t),\r\n\t\t\t});\r\n\t\t}\r\n\t}, [accCtx.loggedIn]);\r\n\r\n\treturn (\r\n\t\t<View style={{ ...SearchStyle.container, ...styles.pageContainer }}>\r\n\t\t\t{!ctx.isLoading && (\r\n\t\t\t\t<RecipeList\r\n\t\t\t\t\trecipes={ctx.results}\r\n\t\t\t\t\tsetData={ctx.addRecipes}\r\n\t\t\t\t\trecipeLink={ctx.moreRecipesLink}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</View>\r\n\t);\r\n}\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport const optionStyles = StyleSheet.create(\r\n    {\r\n        listContainer: {\r\n            borderWidth: 2\r\n        },\r\n    });","import { useEffect, useState } from \"react\";\r\nimport { FlatList, Pressable, Text, View } from \"react-native\";\r\nimport { optionStyles } from \"./RecipeOptionStyle\";\r\n\r\n/**\r\n * Displays a list of recipe options from the data given via\r\n *\r\n * @param {{\r\n *      type: string\r\n *      updateData: (type:string, options: Array<str>) => void,\r\n *      data: Array<string>,\r\n * \t\tselectedData: Array<string>\r\n * \t\tstyle: any\r\n *  }\r\n * } props\r\n *\r\n * `data` is array of data to be displayed and\r\n * `updateData` is for updating data of the parent component.\r\n * `selectedData` is data that is already selected.\r\n *\r\n * @returns List of Recipe Options\r\n */\r\nexport default function RecipeOption(props) {\r\n\tconst [selectedData, setSelectedData] = useState(props.selectedData);\r\n\r\n\t/**\r\n\t * Selects the type of data within an object to be displayed when `props.type` changes.\r\n\t */\r\n\tuseEffect(() => setSelectedData(props.selectedData), [props.type]);\r\n\r\n\t/**\r\n\t * Updates the data in the parent component when changing `selectedData changes`.\r\n\t */\r\n\tuseEffect(\r\n\t\t() => props.updateData(props.type, selectedData),\r\n\t\t[selectedData]\r\n\t);\r\n\r\n\t/**\r\n\t * Add selected options to selectedData\r\n\t *\r\n\t * @param {string} option\r\n\t */\r\n\tfunction addOptions(option) {\r\n\t\tsetSelectedData((prevState) => {\r\n\t\t\tlet newList = [];\r\n\t\t\tnewList = newList.concat(prevState);\r\n\t\t\tnewList.push(option);\r\n\r\n\t\t\treturn newList;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Removes option from selectedData\r\n\t *\r\n\t * @param {string} RMoption\r\n\t */\r\n\tfunction removeOptions(RMoption) {\r\n\t\tsetSelectedData((prevState) => {\r\n\t\t\tlet newState = [];\r\n\r\n\t\t\tprevState.forEach((option) =>\r\n\t\t\t\toption != RMoption ? newState.push(option) : null\r\n\t\t\t);\r\n\t\t\treturn newState;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Checks that the option is included in selectedData\r\n\t *\r\n\t * @param {string} item\r\n\t * @returns True if exists otherwise false.\r\n\t */\r\n\tfunction optionIncluded(item) {\r\n\t\tlet exists = false;\r\n\t\tselectedData.forEach((option) => {\r\n\t\t\tif (option == item) {\r\n\t\t\t\texists = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn exists;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds selected option when it doesn't existin in selectedData\r\n\t * or removes it when it already exists in selectedData\r\n\t *\r\n\t * @param {string} option\r\n\t */\r\n\tfunction selectOptionHandler(option) {\r\n\t\tlet exists = optionIncluded(option);\r\n\r\n\t\tif (exists) {\r\n\t\t\tremoveOptions(option);\r\n\t\t} else {\r\n\t\t\taddOptions(option);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Renders a button that corresponds to an option.\r\n\t * Changes color depending if it's added or not\r\n\t *\r\n\t * @param {string} item\r\n\t * @returns Button to be rendered in List\r\n\t */\r\n\tfunction renderOptions({ item }) {\r\n\t\treturn (\r\n\t\t\t<Pressable\r\n\t\t\t\tonPress={(e) => selectOptionHandler(item)}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\twidth: 175,\r\n\t\t\t\t\tbackgroundColor: optionIncluded(item)\r\n\t\t\t\t\t\t? \"#00ff0d\"\r\n\t\t\t\t\t\t: \"#fd5d00\",\r\n\t\t\t\t\tpadding: 5,\r\n\t\t\t\t\talignItems: \"center\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Text style={{fontWeight:\"bold\"}}>{item}</Text>\r\n\t\t\t</Pressable>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<View style={{ ...optionStyles.listContainer, ...props.style }}>\r\n\t\t\t<FlatList\r\n\t\t\t\tdata={props.data}\r\n\t\t\t\trenderItem={renderOptions}\r\n\t\t\t\textraData={selectedData}\r\n\t\t\t/>\r\n\t\t</View>\r\n\t);\r\n}\r\n","import { StyleSheet } from \"react-native\";\r\nconst HEIGHT = \"100%\";\r\nexport const SearchOptionsStyle = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tflex: 1,\r\n\t\talignItems: \"center\",\r\n\t\tmarginTop: 10,\r\n\t\tmarginLeft: \"auto\",\r\n\t\tmarginRight: \"auto\",\r\n\t},\r\n\r\n\ttextButtonContainer: {\r\n\t\tflexDirection: \"row\",\r\n\t\tflexBasis: 50,\r\n\t\tmaxHeight: 50,\r\n\t},\r\n\r\n\tsearchIcon: {\r\n\t\theight: 25,\r\n\t\tmarginTop: 7,\r\n\t\twidth: \"100%\",\r\n\t\tresizeMode: \"contain\",\r\n\t},\r\n\r\n\timgContainer: {\r\n\t\tflexBasis: 20,\r\n\t\theight: 30,\r\n\t},\r\n\r\n\tinput: {\r\n\t\theight: 40,\r\n\t\tmarginLeft: 10,\r\n\t\tpadding: 15,\r\n\t\tpaddingBottom: 10,\r\n\t\tborderColor: \"black\",\r\n\t\tborderWidth: 1,\r\n\t\tborderRadius: 20,\r\n\t},\r\n\r\n\toptionsContainer: {\r\n\t\tflexDirection: \"row\",\r\n\t\tflexWrap: \"wrap\",\r\n\t\tjustifyContent: \"space-evenly\",\r\n\t\tminWidth: 400,\r\n\t\twidth: \"30%\",\r\n\t},\r\n\r\n\toptionTypes: {\r\n\t\twidth: 100,\r\n\t\tbackgroundColor: \"#ff9100\",\r\n\t\talignItems: \"center\",\r\n\t},\r\n\r\n\ttext: {\r\n\t\ttextAlign: \"center\",\r\n\t\tpadding: 5,\r\n\t},\r\n\r\n\toptionTypeHeader: {\r\n\t\tbackgroundColor: \"#ffee00\",\r\n\t\tfontWeight: \"bold\",\r\n\t},\r\n\r\n\tselectedMetaText: {\r\n\t\tfontSize: 25\r\n\t},\r\n\r\n\tselectedOptionsContainer: {\r\n\t\theight: HEIGHT,\r\n\t\tminHeight: HEIGHT,\r\n\t\tmaxHeight: HEIGHT,\r\n\t\tborderWidth: 2,\r\n\t\tmarginBottom: 5\r\n\t},\r\n});\r\n","const DIETS = [\r\n\t\"balanced\",\r\n\t\"high-fiber\",\r\n\t\"high-protein\",\r\n\t\"low-carb\",\r\n\t\"low-fat\",\r\n\t\"low-sodium\",\r\n];\r\nconst HEALTHS = [\r\n\t\"alcohol-cocktail\",\r\n\t\"alcohol-free\",\r\n\t\"celery-free\",\r\n\t\"crustacean-free\",\r\n\t\"dairy-free\",\r\n\t\"DASH\",\r\n\t\"egg-free\",\r\n\t\"fish-free\",\r\n\t\"fodmap-free\",\r\n\t\"gluten-free\",\r\n\t\"immuno-supportive\",\r\n\t\"keto-friendly\",\r\n\t\"kidney-friendly\",\r\n\t\"kosher\",\r\n\t\"low-potassium\",\r\n\t\"low-sugar\",\r\n\t\"lupine-free\",\r\n\t\"Mediterranean\",\r\n\t\"mollusk-free\",\r\n\t\"mustard-free\",\r\n\t\"No-oil-added\",\r\n\t\"paleo\",\r\n\t\"peanut-free\",\r\n\t\"pecatarian\",\r\n\t\"pork-free\",\r\n\t\"red-meat-free\",\r\n\t\"sesame-free\",\r\n\t\"shellfish-free\",\r\n\t\"soy-free\",\r\n\t\"sugar-conscious\",\r\n\t\"sulfite-free\",\r\n\t\"tree-nut-free\",\r\n\t\"vegan\",\r\n\t\"vegetarian\",\r\n\t\"wheat-free\",\r\n];\r\n\r\nconst MEALTYPES = [\r\n\t\"breakfast\",\r\n\t\"brunch\",\r\n\t\"lunch/dinner\",\r\n\t\"snack\",\r\n\t\"teatime\",\r\n];\r\n\r\nconst DISHTYPES = [\r\n\t\"alcohol cocktail\",\r\n\t\"biscuits and cookies\",\r\n\t\"bread\",\r\n\t\"cereals\",\r\n\t\"condiments and sauces\",\r\n\t\"desserts\",\r\n\t\"drinks\",\r\n\t\"egg\",\r\n\t\"ice cream and custard\",\r\n\t\"main course\",\r\n\t\"pancake\",\r\n\t\"pasta\",\r\n\t\"pastry\",\r\n\t\"pies and tarts\",\r\n\t\"pizza\",\r\n\t\"preps\",\r\n\t\"preserve\",\r\n\t\"salad\",\r\n\t\"sandwiches\",\r\n\t\"seafood\",\r\n\t\"side dish\",\r\n\t\"soup\",\r\n\t\"special occasions\",\r\n\t\"starter\",\r\n\t\"sweets\",\r\n];\r\n\r\nconst CUISINETYPES = [\r\n\t\"american\",\r\n\t\"asian\",\r\n\t\"british\",\r\n\t\"caribbean\",\r\n\t\"central europe\",\r\n\t\"eastern europe\",\r\n\t\"chinese\",\r\n\t\"french\",\r\n\t\"greek\",\r\n\t\"indian\",\r\n\t\"italian\",\r\n\t\"japanese\",\r\n\t\"korean\",\r\n\t\"kosher\",\r\n\t\"mediterranean\",\r\n\t\"mexican\",\r\n\t\"middle eastern\",\r\n\t\"nordic\",\r\n\t\"south american\",\r\n\t\"south east asia\",\r\n\t\"world\",\r\n];\r\n\r\nexport default {\r\n\tdiet: DIETS,\r\n\thealth: HEALTHS,\r\n\tmealType: MEALTYPES,\r\n    dishType: DISHTYPES,\r\n    cuisineType: CUISINETYPES\r\n};\r\n","import { Text } from \"react-native\";\r\n\r\n/**\r\n * Displays an error message.\r\n *\r\n * @param {{\r\n *      style:*,\r\n * \t\tmessage: string,\r\n *      hasError: boolean\r\n * }} props\r\n *\r\n * @returns Error display message or none.\r\n */\r\nexport default function TextError(props) {\r\n\treturn props.hasError ? (\r\n\t\t<Text style={props.style}>{props.message}</Text>\r\n\t) : null;\r\n}\r\n","import axios from \"axios\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n\tFlatList,\r\n\tImage,\r\n\tPressable,\r\n\tSectionList,\r\n\tText,\r\n\tTextInput,\r\n\tuseWindowDimensions,\r\n\tView,\r\n} from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport RecipeOption from \"../../components/RecipeOption/RecipeOption\";\r\nimport RecipeResultsCtx from \"../../context/Context\";\r\nimport { SearchOptionsStyle } from \"./SearchOptionsStyle\";\r\nimport RecipeMetaOptions from \"../../RecipeMetaOptions\";\r\nimport TextError from \"../../components/TextError/TextError\";\r\nimport BackEndIP from \"../../ipaddressesports/BackEndIP\";\r\nimport accountCtx from \"../../context/account\";\r\nimport NavBar from \"../../components/NavBar/NavBar\";\r\nimport LogOutButton from \"../../components/Buttons/LogOutButton\";\r\nimport SearchButton from \"../../components/Buttons/SearchButton\";\r\nimport LoginButton from \"../../components/Buttons/LogInButton\";\r\nimport SignUpButton from \"../../components/Buttons/SignUpButton\";\r\n\r\n/**\r\n * Renders a page that has options to search recipes\r\n *\r\n * @param {*} navigation\r\n * @returns Search Options Page\r\n */\r\nexport default function SearchOptions({ navigation }) {\r\n\tconst ctx = useContext(RecipeResultsCtx);\r\n\tconst accCtx = useContext(accountCtx);\r\n\r\n\t// collection of arrays of optional values\r\n\tconst [options, setOptions] = useState({\r\n\t\tdiet: [],\r\n\t\thealth: [],\r\n\t\tcuisineType: [],\r\n\t\tmealType: [],\r\n\t\tdishType: [],\r\n\t});\r\n\tconst [optionTypes, setNumOptions] = useState(() => {\r\n\t\tlet num = [];\r\n\t\tfor (const i in options) {\r\n\t\t\tnum.push(i);\r\n\t\t}\r\n\t\treturn num;\r\n\t});\r\n\tconst [optionType, setOptionType] = useState(optionTypes[0]);\r\n\tconst [inputIg, setinputIg] = useState(\"\"); // string of ingredients inputted by user\r\n\tconst [hasError, setHasError] = useState(false); // checks if the user hasn't inputted/selected ingredients\r\n\tconst [width, setWidth] = useState(useWindowDimensions().width);\r\n\tconst [height, setHeight] = useState(useWindowDimensions().height);\r\n\r\n\t// Changes the navigation bar if the user is logged in or not.\r\n\tuseEffect(() => {\r\n\t\tif (accCtx.loggedIn) {\r\n\t\t\tnavigation.setOptions({\r\n\t\t\t\theaderRight: () => (\r\n\t\t\t\t\t<NavBar>\r\n\t\t\t\t\t\t<LogOutButton />\r\n\t\t\t\t\t</NavBar>\r\n\t\t\t\t),\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnavigation.setOptions({\r\n\t\t\t\theaderRight: () => (\r\n\t\t\t\t\t<NavBar>\r\n\t\t\t\t\t\t<LoginButton />\r\n\t\t\t\t\t\t<SignUpButton />\r\n\t\t\t\t\t</NavBar>\r\n\t\t\t\t),\r\n\t\t\t});\r\n\t\t}\r\n\t}, [accCtx.loggedIn]);\r\n\r\n\t/**\r\n\t * Updates the selected options\r\n\t *\r\n\t * @param {string} type\r\n\t * @param {Array<string>} optionsArray\r\n\t */\r\n\tfunction updateOptions(type, optionsArray) {\r\n\t\tsetOptions((preveState) => {\r\n\t\t\tlet newState = { ...preveState };\r\n\t\t\tnewState[type] = optionsArray;\r\n\r\n\t\t\treturn newState;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if all the options array are empty\r\n\t *\r\n\t * @returns true if all options are empty, false otherwise.\r\n\t */\r\n\tfunction isOptionsEmpty() {\r\n\t\tlet emptyCount = 0;\r\n\t\tfor (const option in options) {\r\n\t\t\tif (options[option].length <= 0) {\r\n\t\t\t\temptyCount += 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn emptyCount >= optionTypes.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches recipes using the options object and inputIg\r\n\t */\r\n\tasync function fetchFood() {\r\n\t\tif (inputIg.length <= 0 && isOptionsEmpty()) {\r\n\t\t\tsetHasError(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsetHasError(false);\r\n\r\n\t\tlet queryOptions = \"\";\r\n\r\n\t\tif (isOptionsEmpty) {\r\n\t\t\tlet i = 0;\r\n\t\t\tfor (const option in options) {\r\n\t\t\t\toptions[option].forEach((item, index) => {\r\n\t\t\t\t\tqueryOptions += `${option}=${item}`;\r\n\t\t\t\t\tif (index < options[option].length - 1) {\r\n\t\t\t\t\t\tqueryOptions += \"&\";\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif (queryOptions.length > 0 && (i < optionTypes.length)) {\r\n\t\t\t\t\tqueryOptions += \"&\";\r\n\t\t\t\t}\r\n\t\t\t\ti += 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet query = \"\";\r\n\t\tif (inputIg.trim().length > 0 && queryOptions.length > 0) {\r\n\t\t\tquery = `ingredients=${inputIg.trim()}&${queryOptions}`;\r\n\t\t} else if (inputIg.trim().length > 0) {\r\n\t\t\tquery = `ingredients=${inputIg.trim()}`;\r\n\t\t} else if (queryOptions.length > 0) {\r\n\t\t\tquery = queryOptions;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tlet response = await axios({\r\n\t\t\t\tmethod: \"get\",\r\n\t\t\t\turl: `${BackEndIP}/api/fetchRecipes/?${query}`,\r\n\t\t\t\tresponseType: \"json\",\r\n\t\t\t});\r\n\r\n\t\t\tif (199 < response.status < 300) {\r\n\t\t\t\tlet content = await response.data;\r\n\r\n\t\t\t\tctx.getRecipes(content.results);\r\n\t\t\t\tctx.setAddRecipesLink(content.addRecipesLink);\r\n\t\t\t}\r\n\t\t} catch {\r\n\t\t\tctx.getRecipes([\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"No Recipe Name Available\",\r\n\t\t\t\t\timage: require(\"../../../assets/favicon.png\"),\r\n\t\t\t\t\tingredients: [\"None\"],\r\n\t\t\t\t\tsource: \"\",\r\n\t\t\t\t},\r\n\t\t\t]);\r\n\t\t}\r\n\r\n\t\tctx.setIsLoading(true);\r\n\r\n\t\treturn navigation.navigate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the inputIg with the text entered\r\n\t * by user.\r\n\t *\r\n\t * @param {string} igs\r\n\t */\r\n\tfunction inputIngredients(igs) {\r\n\t\tsetinputIg(igs);\r\n\t}\r\n\r\n\tfunction renderOptionTypes({ item }) {\r\n\t\treturn (\r\n\t\t\t<Pressable\r\n\t\t\t\tstyle={SearchOptionsStyle.optionTypes}\r\n\t\t\t\tonPress={() => setOptionType(item)}\r\n\t\t\t>\r\n\t\t\t\t<Text style={{fontWeight:\"bold\"}}>{item}</Text>\r\n\t\t\t</Pressable>\r\n\t\t);\r\n\t}\r\n\r\n\tfunction SelectedOptions() {\r\n\t\tconst OPTIONLISTWIDTH = \"100%\";\r\n\t\tlet optionObjArray = []\r\n\r\n\t\tfor (const option in options) {\r\n\t\t\toptionObjArray.push({\r\n\t\t\t\toptionType: option,\r\n\t\t\t\tdata: options[option]\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<View style={{...SearchOptionsStyle.selectedOptionsContainer, width: OPTIONLISTWIDTH}}>\r\n\t\t\t\t<Text style={{...SearchOptionsStyle.text, ...SearchOptionsStyle.selectedMetaText, fontWeight: \"bold\"}}>Selected Options</Text>\r\n\t\t\t\t<SectionList\r\n\t\t\t\tstyle={{width: \"100%\"}}\r\n\t\t\t\t\tsections={optionObjArray}\r\n\t\t\t\t\trenderItem={({item}) => <Text style={{...SearchOptionsStyle.text}}>{item}</Text>}\r\n\t\t\t\t\trenderSectionHeader={({section: {optionType}}) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Text style={{...SearchOptionsStyle.optionTypeHeader, ...SearchOptionsStyle.selectedMetaText, ...SearchOptionsStyle.text}}>\r\n\t\t\t\t\t\t\t\t{optionType}\r\n\t\t\t\t\t\t\t</Text>);\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</View>);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<View\r\n\t\t\tstyle={{\r\n\t\t\t\t...SearchOptionsStyle.container,\r\n\t\t\t\t...styles.pageContainer,\r\n\t\t\t\twidth: width < 700 ? \"100%\" : \"70%\",\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<View style={SearchOptionsStyle.textButtonContainer}>\r\n\t\t\t\t<Pressable\r\n\t\t\t\t\tstyle={SearchOptionsStyle.imgContainer}\r\n\t\t\t\t\tonPress={fetchFood}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tstyle={SearchOptionsStyle.searchIcon}\r\n\t\t\t\t\t\tsource={require(\"../../../assets/searchIcon.png\")}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Pressable>\r\n\r\n\t\t\t\t<TextInput\r\n\t\t\t\t\tstyle={[\r\n\t\t\t\t\t\tSearchOptionsStyle.input,\r\n\t\t\t\t\t\t{ borderColor: hasError ? \"red\" : \"black\" },\r\n\t\t\t\t\t]}\r\n\t\t\t\t\tonChangeText={inputIngredients}\r\n\t\t\t\t\tplaceholder=\"Search\"\r\n\t\t\t\t/>\r\n\t\t\t</View>\r\n\r\n\t\t\t<TextError\r\n\t\t\t\thasError={hasError}\r\n\t\t\t\tstyle={styles.errorMsg}\r\n\t\t\t\tmessage={\"Please enter food name/ingredients\"}\r\n\t\t\t/>\r\n\r\n\t\t\t<View\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\t...SearchOptionsStyle.optionsContainer,\r\n\t\t\t\t\tmaxHeight: height / 2.5,\r\n\t\t\t\t\tflexDirection: \"row\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<SelectedOptions/>\r\n\t\t\t\t<View style={{ borderWidth: 2, marginBottom: 5, height: 99 }}>\r\n\t\t\t\t\t<FlatList\r\n\t\t\t\t\t\tdata={optionTypes}\r\n\t\t\t\t\t\trenderItem={renderOptionTypes}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\t\t\t\t<RecipeOption\r\n\t\t\t\t\tstyle={{height: \"55%\", maxHeight: \"55%\" }}\r\n\t\t\t\t\ttype={optionType}\r\n\t\t\t\t\tdata={RecipeMetaOptions[optionType]}\r\n\t\t\t\t\tselectedData={options[optionType]}\r\n\t\t\t\t\tupdateData={updateOptions}\r\n\t\t\t\t/>\r\n\t\t\t</View>\r\n\t\t</View>\r\n\t);\r\n}\r\n","import { Text, TextInput, View } from \"react-native\";\r\n\r\n/**\r\n * Renders a form field\r\n *\r\n * @param { {\r\n *      label: string,\r\n *      placeholder: string,\r\n *      isPassword: boolean,\r\n *      onChangeTextHandler: (text: string) => void,\r\n *      inputStyle: *,\r\n *      labelStyle: *,\r\n *      containerStyle: *,\r\n *  }\r\n * } props\r\n *\r\n * @returns A text label with text field\r\n */\r\nexport default function FormField({\r\n\tlabel,\r\n\tplaceholder = \"\",\r\n\tisPassword = false,\r\n\tonChangeTextHandler = undefined,\r\n\tinputStyle = {},\r\n\tlabelStyle = {},\r\n\tcontainerStyle = {},\r\n}) {\r\n\treturn (\r\n\t\t<View style={{ ...containerStyle }}>\r\n\t\t\t<Text style={{ ...labelStyle }}>{label}</Text>\r\n\t\t\t<TextInput\r\n\t\t\t\tstyle={{ ...inputStyle }}\r\n\t\t\t\tsecureTextEntry={isPassword}\r\n\t\t\t\tonChangeText={onChangeTextHandler}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t/>\r\n\t\t</View>\r\n\t);\r\n}\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport const SignUpStyles = StyleSheet.create(\r\n    {\r\n        formContainer: {\r\n            width: \"25%\",\r\n            minWidth: \"25%\",\r\n            maxWidth: \"25%\",\r\n        },\r\n\r\n        formInput: {\r\n            padding: 5,\r\n            marginTop: 10,\r\n            borderWidth: 2,\r\n            borderRadius: 20\r\n        },\r\n\r\n        formLabel: {\r\n            marginRight: 10,\r\n            textAlign: \"left\",\r\n            fontWeight: \"bold\",\r\n        },\r\n\r\n        submitButton: {\r\n            padding: 10,\r\n            margin: 10,\r\n            borderRadius: 15, \r\n            backgroundColor: \"#fd5d00\"\r\n        },\r\n    }\r\n);","import { Link } from \"@react-navigation/native\";\r\nimport { Text } from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\n\r\n/**\r\n * Renders the Home Button\r\n *\r\n * @returns Button that links to the Home page\r\n */\r\nexport default function HomeButton() {\r\n\treturn (\r\n\t\t<Link\r\n\t\t\tstyle={{\r\n\t\t\t\tbackgroundColor: \"none\",\r\n\t\t\t}}\r\n\t\t\tto={{ screen: \"Home\" }}\r\n\t\t>\r\n\t\t\t<Text style={styles.navText}>Home</Text>\r\n\t\t</Link>\r\n\t);\r\n}\r\n","import FormField from \"../FormField/FormField\";\r\n\r\n/**\r\n * Renders a username and email field or combination of both for\r\n * sign up or login respectively.\r\n *\r\n * @param {{\r\n *      toLogin :boolean,\r\n *      usernameHandler: (newUsername: string) => void,\r\n *      emailHandler: (newEmail: string) => void,\r\n *      inputStyle: *,\r\n *      labelStyle: *,\r\n *      containerStyle: *,\r\n *  }} props\r\n *\r\n * @returns Username and Email fields for sign up or\r\n * a combined field for login\r\n */\r\nexport default function UserEmailForms(props) {\r\n\tif (props.toLogin) {\r\n\t\treturn (\r\n\t\t\t<FormField\r\n\t\t\t\tlabel={\"Username/Email:\"}\r\n\t\t\t\tplaceholder={\"Enter either username/email:\"}\r\n\t\t\t\tonChangeTextHandler={props.usernameHandler}\r\n\t\t\t\tcontainerStyle={props.containerStyle}\r\n\t\t\t\tlabelStyle={props.labelStyle}\r\n\t\t\t\tinputStyle={props.inputStyle}\r\n\t\t\t/>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<FormField\r\n\t\t\t\t\tlabel={\"Username:\"}\r\n\t\t\t\t\tplaceholder={\"Please enter username:\"}\r\n\t\t\t\t\tonChangeTextHandler={props.usernameHandler}\r\n\t\t\t\t\tcontainerStyle={props.containerStyle}\r\n\t\t\t\t\tlabelStyle={props.labelStyle}\r\n\t\t\t\t\tinputStyle={props.inputStyle}\r\n\t\t\t\t/>\r\n\t\t\t\t<FormField\r\n\t\t\t\t\tlabel={\"Email:\"}\r\n\t\t\t\t\tplaceholder={\"Please enter email:\"}\r\n\t\t\t\t\tonChangeTextHandler={props.emailHandler}\r\n\t\t\t\t\tcontainerStyle={props.containerStyle}\r\n\t\t\t\t\tlabelStyle={props.labelStyle}\r\n\t\t\t\t\tinputStyle={props.inputStyle}\r\n\t\t\t\t/>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n","import axios from \"axios\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Platform, Pressable, Text, View } from \"react-native\";\r\nimport { styles } from \"../../AppStyles\";\r\nimport FormField from \"../../components/FormField/FormField\";\r\nimport TextError from \"../../components/TextError/TextError\";\r\nimport CsrfCtx from \"../../context/CsrfToken\";\r\nimport BackEndIP from \"../../ipaddressesports/BackEndIP\";\r\nimport AccountCtx from \"../../context/account\";\r\nimport UserEmailForms from \"../UserEmailForms/UserEmailForms\";\r\nimport { SignUpStyles } from \"../../pages/SignUp/SignUpStyles\";\r\n\r\nconst emailRegExp = /^([a-zA-Z0-9]+\\.?[a-zA-Z0-9]*)@[a-zA-Z0-9^\\.]+\\.([a-zA-Z]+\\.?[a-zA-Z]*)$/\r\n\r\n/**\r\n * Renders the Text Form with multiple fields\r\n * It can be either login or sign up form\r\n *\r\n * @param {\r\n * \t{\r\n * \t\tnavigation: *,\r\n * \t\troute: *\r\n * \t}} props\r\n * @returns Text Form\r\n */\r\nexport default function Form({route, navigation }) {\r\n\r\n\tconst authCtx = useContext(CsrfCtx);\r\n\tconst accCtx = useContext(AccountCtx);\r\n\tconst [toLogin, setToLogin] = useState(route.params.toLogin);\r\n\tconst [username, setUsername] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\tconst [password, setPasword] = useState(\"\");\r\n    const [formValid, setFormValid] = useState(true);\r\n\tconst [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n\t/**\r\n\t * Updates the `username` state with `newUsername`\r\n\t *\r\n\t * @param {string} newUsername\r\n\t */\r\n\tfunction usernameHandler(newUsername) {\r\n\t\tsetUsername(newUsername);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the `email` state with `newEmail` if it's valid\r\n\t *\r\n\t * @param {string} newEmail\r\n\t */\r\n\tfunction emailHandler(newEmail) {\r\n\t\tif (\r\n\t\t\tnewEmail.match(emailRegExp) != null\r\n\t\t) {\r\n\t\t\tsetEmail(newEmail);\r\n\t\t} else {\r\n\t\t\tsetEmail(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the `password` state with `newPassword`\r\n\t *\r\n\t * @param {string} newPassword\r\n\t */\r\n\tfunction passwordHandler(newPassword) {\r\n\t\tsetPasword(newPassword);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Submits the sign up & login form with the user\r\n\t */\r\n    async function onSubmitHandler() {\r\n        if (toLogin && (username.length <= 0 || password <= 0)) {\r\n\t\t\tsetErrorMsg(\"Please fill all the fields/ enter corretly.\");\r\n            setFormValid(false);\r\n        }\r\n\t\telse if (!toLogin && (username.length <= 0 || email.length <=0 || password <= 0)) {\r\n\t\t\tsetErrorMsg(\"Please fill all the fields/ enter corretly.\");\r\n            setFormValid(false);\r\n\t\t}\r\n\t\telse {\r\n            setFormValid(true);\r\n\t\t\tlet method = \"post\";\r\n\t\t\tlet path = \"signup/\";\r\n\t\t\tif (toLogin) {\r\n\t\t\t\tmethod = \"put\";\r\n\t\t\t\tpath = \"login/\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet response = await axios(\r\n\t\t\t\t{\r\n\t\t\t\t\tmethod: method,\r\n\t\t\t\t\theaders: {\"X-CSRFToken\": authCtx.token, \"credentials\": \"include\"},\r\n\t\t\t\t\twithCredentials: true,\r\n\t\t\t\t\turl: `${BackEndIP}/api/${path}`,\r\n\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tusername: username,\r\n\t\t\t\t\t\temail: email,\r\n\t\t\t\t\t\tpassword: password\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tlet content = await response.data;\r\n\t\t\tif (199 < response.status < 300) {\r\n\t\t\t\tif (content.signUpSuccess) {\r\n\t\t\t\t\taccCtx.setLoginStatus(true);\r\n\t\t\t\t\taccCtx.setUsername(username);\r\n\t\t\t\t\taccCtx.setEmail(email);\r\n\t\t\t\t\tnavigation.navigate(\"Home\");\r\n\t\t\t\t}\r\n\t\t\t\telse if (content.loginSuccess) {\r\n\t\t\t\t\taccCtx.setLoginStatus(true);\r\n\t\t\t\t\taccCtx.setUsername(username);\r\n\t\t\t\t\taccCtx.setEmail(email);\r\n\t\t\t\t\tnavigation.navigate(\"Home\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsetErrorMsg(content.message);\r\n\t\t\t\tsetFormValid(false)\r\n\t\t\t}\r\n\r\n        }\r\n    }\r\n\r\n\treturn (\r\n\t\t<View style={{ ...styles.pageContainer, alignItems: \"center\" }}>\r\n\t\t\t<UserEmailForms\r\n\t\t\t\ttoLogin={toLogin}\r\n\t\t\t\tusernameHandler={usernameHandler}\r\n\t\t\t\temailHandler={emailHandler}\r\n\t\t\t\tcontainerStyle={SignUpStyles.formContainer}\r\n\t\t\t\tlabelStyle={SignUpStyles.formLabel}\r\n\t\t\t\tinputStyle={SignUpStyles.formInput}\r\n\t\t\t/>\r\n\t\t\t<FormField\r\n\t\t\t\tlabel={\"Password:\"}\r\n\t\t\t\tplaceholder={\"Please enter password:\"}\r\n\t\t\t\tisPassword={true}\r\n\t\t\t\tonChangeTextHandler={passwordHandler}\r\n                containerStyle={SignUpStyles.formContainer}\r\n                labelStyle={SignUpStyles.formLabel}\r\n                inputStyle={SignUpStyles.formInput}\r\n\t\t\t/>\r\n\t\t\t<Pressable style={SignUpStyles.submitButton} onPress={onSubmitHandler}>\r\n\t\t\t\t<Text style={{fontWeight: \"bold\",}}>Sign Up</Text>\r\n\t\t\t</Pressable>\r\n\r\n\t\t\t<TextError\r\n\t\t\t\thasError={!formValid}\r\n\t\t\t\tstyle={styles.errorMsg}\r\n\t\t\t\tmessage={errorMsg}\r\n\t\t\t/>\r\n\t\t</View>\r\n\t);\r\n}\r\n\r\n","import { registerRootComponent } from 'expo';\n\nimport App from './src/App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import { Link, NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { StatusBar } from \"expo-status-bar\";\nimport Search from \"./pages/Search/Search\";\nimport SearchOptions from \"./pages/SearchOptions/SearchOptions\";\nimport { ContextProvider } from \"./context/Context\";\nimport SignIn from \"./pages/SignUp/SignUp\";\nimport SignUpButton from \"./components/Buttons/SignUpButton\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport LoginButton from \"./components/Buttons/LogInButton\";\nimport SearchButton from \"./components/Buttons/SearchButton\";\nimport HomeButton from \"./components/Buttons/HomeButton\";\nimport Form from \"./components/Form/Form\";\n\n\n/**\n * Render the enter APP UI and use React navigation to\n * navigate different screens and update urls on browser\n *\n * @returns {JSX.Element} The whole app UI\n */\nexport default function App() {\n\n\tconst Stack = createNativeStackNavigator();\n\tconst Linking = {\n\t\tconfig: {\n\t\t\tscreens: {\n\t\t\t\tHome: \"Home\",\n\t\t\t\tSearch: \"Search\",\n\t\t\t\tSignIn: \"SignUp\",\n\t\t\t\tLogin: \"Login\"\n\t\t\t},\n\t\t},\n\t};\n\n\n\treturn (\n\t\t<ContextProvider>\n\t\t\t<NavigationContainer linking={Linking}>\n\t\t\t\t<Stack.Navigator\n\t\t\t\t\tscreenOptions={{\n\t\t\t\t\t\theaderStyle: { backgroundColor: \"#fd5d00\" },\n\t\t\t\t\t\theaderTitleStyle: { color: \"white\" },\n\t\t\t\t\t\theaderTitleAlign: \"center\",\n\t\t\t\t\t\theaderLeft: () => undefined,\n\t\t\t\t\t\theaderRight: () => <NavBar><LoginButton /><SignUpButton /><SearchButton /></NavBar>,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Stack.Screen\n\t\t\t\t\t\tname=\"Home\"\n\t\t\t\t\t\tcomponent={Search}\n\t\t\t\t\t/>\n\t\t\t\t\t<Stack.Group\n\t\t\t\t\t\tscreenOptions={({ route, navigation }) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\theaderLeft: () => <HomeButton />,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Stack.Screen\n\t\t\t\t\t\t\tname=\"Search\"\n\t\t\t\t\t\t\tcomponent={SearchOptions}\n\t\t\t\t\t\t\toptions={{headerRight: () => <NavBar><LoginButton/><SignUpButton/></NavBar>}}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<Stack.Screen\n\t\t\t\t\t\t\tname=\"SignUp\"\n\t\t\t\t\t\t\tcomponent={Form}\n\t\t\t\t\t\t\toptions={{headerRight: () => <NavBar><LoginButton/><SearchButton/></NavBar>}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<Stack.Screen\n\t\t\t\t\t\t\tname=\"Login\"\n\t\t\t\t\t\t\tcomponent={Form}\n\t\t\t\t\t\t\toptions={{headerRight: () => <NavBar><SignUpButton/><SearchButton/></NavBar>}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Stack.Group>\n\t\t\t\t</Stack.Navigator>\n\t\t\t</NavigationContainer>\n\t\t\t<StatusBar />\n\t\t</ContextProvider>\n\t);\n}\n"],"sourceRoot":""}