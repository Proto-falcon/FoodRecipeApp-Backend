{"version":3,"sources":["src/context/account.js","src/context/CsrfToken.js","assets/favicon.png","src/context/Context.js"],"names":["AccountCtx","createContext","loggedIn","username","email","setLoginStatus","setUsername","newUsername","setEmail","newEmail","checkCred","csrfCtx","domain","AccountProvider","props","useState","isLoggedIn","setIsLoggedIn","response","axios","get","content","data","setCsrfToken","token","user","LogInHandler","setUsernameHandler","setEmailHandler","error","prevState","match","length","Provider","value","children","CsrfCtx","newToken","CsrfContextProvider","setToken","module","exports","RecipeResultsCtx","moreRecipesLink","setAddRecipesLink","link","exclusions","updateExclusions","newExclusions","results","uri","name","image","require","ingredients","source","getRecipes","recipeList","addRecipes","isLoading","setIsLoading","boolean","ContextProvider","recipes","setRecipes","excluded","setExcluded","addRecipesLink","setAddLink","newExcludeState","id","newState","i","push"],"mappings":"+OAIaA,EAAaC,wBAAc,CACvCC,UAAU,EACVC,SAAU,GACVC,MAAO,GACPC,eAAgB,aAChBC,YAAa,SAACC,KACdC,SAAU,SAACC,KACXC,UAAW,SAACC,EAASC,OASP,SAASC,EAAgBC,GACvC,MAAoCC,oBAAS,GAAM,WAA5CC,EAAU,KAAEC,EAAa,KAChC,EAAgCF,mBAAS,IAAG,WAArCZ,EAAQ,KAAEG,EAAW,KAC5B,EAA0BS,mBAAS,IAAG,WAA/BX,EAAK,KAAEI,EAAQ,KAWG,aAcxB,OAdwB,OAAzB,UAA0BG,EAASC,GAClC,IAAKI,EACJ,IACC,IAAIE,QAAiBC,UAAMC,IAAOR,EAAM,oBACpCS,QAAgBH,EAASI,KAC7BX,EAAQY,aAAaF,EAAQG,OACT,GAAhBH,EAAQI,OACXC,IACAC,EAAmBN,EAAQI,KAAKtB,UAChCyB,EAAgBP,EAAQI,KAAKrB,QAE7B,MAAOyB,SAGV,sBAKD,SAASH,IACRT,GAAc,SAACa,GAAS,OAAMA,KAQ/B,SAASF,EAAgBnB,GACR,IAAZA,EACHD,EAAS,IAETC,EAASsB,MACR,6EAGDvB,EAASC,GASX,SAASkB,EAAmBpB,GACvBA,EAAYyB,OAAS,EACxB1B,EAAYC,GAEZD,EAAY,IAId,OACC,cAACN,EAAWiC,SAAQ,CACnBC,MAAO,CACNhC,SAAUc,EACVb,SAAUA,EACVC,MAAOA,EACPC,eAAgBqB,EAChBpB,YAAaqB,EACbnB,SAAUoB,EACVlB,UAzEoC,SAWb,EAAD,oCA+DrB,SAEDI,EAAMqB,a,4JCjGGC,EAAUnC,wBAAc,CACpCuB,MAAO,GACPD,aAAc,SAACc,OASD,SAASC,EAAoBxB,GAC3C,MAA0BC,mBAAS,IAAG,WAA/BS,EAAK,KAAEe,EAAQ,KAWtB,OACC,cAACH,EAAQH,SAAQ,CAChBC,MAAO,CACNV,MAAOA,EACPD,aARH,SAAqBc,GACpBE,EAASF,KAQN,SAEDvB,EAAMqB,a,oBChCVK,EAAOC,QAAU,IAA0B,qC,uLCK9BC,EAAmBzC,wBAAc,CAC7C0C,gBAAiB,GACjBC,kBAAmB,SAACC,KACpBC,WAAY,CAAC,IACbC,iBAAkB,SAACC,KACnBC,QAAS,CAER,CACCC,IAAK,GACLC,KAAM,2BACNC,MAAOC,EAAQ,KACfC,YAAa,CAAC,IACdC,OAAQ,KAGVC,WAAY,SAACC,KACbC,WAAY,SAACD,EAAYZ,KACzBc,WAAW,EACXC,aAAc,SAACC,OASD,SAASC,EAAgBhD,GAGvC,MAA8BC,mBAAS,CACtC,CACCmC,IAAK,GACLC,KAAM,2BACNC,MAAO,GACPE,YAAa,CAAC,QACdC,OAAQ,MAER,WARKQ,EAAO,KAAEC,EAAU,KAU1B,EAAgCjD,mBAAS,IAAG,WAArCkD,EAAQ,KAAEC,EAAW,KAY5B,MAA4CnD,mBAAS,IAAG,WAAjDoD,EAAc,KAAEvB,EAAiB,KAExC,EAAkC7B,oBAAS,GAAM,WAA1C4C,EAAS,KAAEC,EAAY,KAO9B,SAASQ,EAAWvB,GACnBD,EAAkBC,GA+DnB,OACC,cAAC,UAAmB,UACnB,cAAC,UAAe,UACf,cAACH,EAAiBT,SAAQ,CACzBC,MAAO,CACNS,gBAAiBwB,EACjBrB,WAAYmB,EACZlB,iBArFL,SAAwBsB,GACvBH,EAAYG,IAqFRpB,QAASc,EACTP,WA1DL,SAAoBC,GACM,IAArBA,EAAW,GAAGP,MACjBc,EAAW,CACV,CACCM,GAAI,GACJnB,KAAM,2BACNC,MAAO,GACPE,YAAa,CAAC,QACdC,OAAQ,MAKDS,EADeP,KA+CrBb,kBAAmBwB,EACnBV,WA7BL,SAAoBD,EAAYZ,GAG/B,IAFA,IAAI0B,EAAW,GAENC,EAAI,EAAGA,EAAIT,EAAQ/B,OAAQwC,IACnCD,EAASE,KAAKV,EAAQS,IAGvB,IAAK,IAAIA,EAAI,EAAGA,EAAIf,EAAWzB,OAAQwC,IACtCD,EAASE,KAAKhB,EAAWe,IAG1BR,EAAWO,GACXH,EAAWvB,IAkBPc,UAAWA,EACXC,aAAcA,GACb,SAED9C,EAAMqB","file":"static/js/12.24cb19c1.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { createContext, useState } from \"react\";\r\n\r\n// Context for account info\r\nexport const AccountCtx = createContext({\r\n\tloggedIn: false,\r\n\tusername: \"\",\r\n\temail: \"\",\r\n\tsetLoginStatus: () => {},\r\n\tsetUsername: (newUsername) => {},\r\n\tsetEmail: (newEmail) => {},\r\n\tcheckCred: (csrfCtx, domain) => {},\r\n});\r\n\r\n/**\r\n * Account System\r\n *\r\n * @param {{children: any}} props\r\n * @returns App UI\r\n */\r\nexport default function AccountProvider(props) {\r\n\tconst [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\tconst [username, setUsername] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\r\n\t/**\r\n\t * Checks whether the user is still logged in or not\r\n\t *\r\n\t * @param {{\r\n\t *     token: string;\r\n\t *     setCsrfToken: (newToken: any) => void;\r\n\t * }} csrfCtx\r\n\t * @param {string} domain\r\n\t */\r\n\tasync function updateCred(csrfCtx, domain) {\r\n\t\tif (!isLoggedIn) {\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await axios.get(`${domain}/api/checkLogin/`);\r\n\t\t\t\tlet content = await response.data;\r\n\t\t\t\tcsrfCtx.setCsrfToken(content.token);\r\n\t\t\t\tif (content.user != false) {\r\n\t\t\t\t\tLogInHandler();\r\n\t\t\t\t\tsetUsernameHandler(content.user.username);\r\n\t\t\t\t\tsetEmailHandler(content.user.email);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inverts the `isLoggedIn` state\r\n\t */\r\n\tfunction LogInHandler() {\r\n\t\tsetIsLoggedIn((prevState) => !prevState);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a new valid `email`\r\n\t *\r\n\t * @param {string} newEmail\r\n\t */\r\n\tfunction setEmailHandler(newEmail) {\r\n\t\tif (newEmail == \"\") {\r\n\t\t\tsetEmail(\"\");\r\n\t\t} else if (\r\n\t\t\tnewEmail.match(\r\n\t\t\t\t/^([a-zA-Z0-9]+\\.?[a-zA-Z0-9]*)@[a-zA-Z0-9^\\.]+\\.([a-zA-Z]+\\.?[a-zA-Z]*)$/\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\tsetEmail(newEmail);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a new `username`\r\n\t *\r\n\t * @param {string} newUsername\r\n\t */\r\n\tfunction setUsernameHandler(newUsername) {\r\n\t\tif (newUsername.length > 0) {\r\n\t\t\tsetUsername(newUsername);\r\n\t\t} else {\r\n\t\t\tsetUsername(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<AccountCtx.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tloggedIn: isLoggedIn,\r\n\t\t\t\tusername: username,\r\n\t\t\t\temail: email,\r\n\t\t\t\tsetLoginStatus: LogInHandler,\r\n\t\t\t\tsetUsername: setUsernameHandler,\r\n\t\t\t\tsetEmail: setEmailHandler,\r\n\t\t\t\tcheckCred: updateCred,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</AccountCtx.Provider>\r\n\t);\r\n}\r\n","import { createContext, useState } from \"react\";\r\n\r\nexport const CsrfCtx = createContext({\r\n\ttoken: \"\",\r\n\tsetCsrfToken: (newToken) => {},\r\n});\r\n\r\n/**\r\n * Context Manager for Csrf\r\n *\r\n * @param {{children: any}} props\r\n * @returns Components that can use the csrf context\r\n */\r\nexport default function CsrfContextProvider(props) {\r\n\tconst [token, setToken] = useState(\"\");\r\n\r\n\t/**\r\n\t * Updates the csrf `token`\r\n\t *\r\n\t * @param {string} newToken\r\n\t */\r\n\tfunction updateToken(newToken) {\r\n\t\tsetToken(newToken);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<CsrfCtx.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\ttoken: token,\r\n\t\t\t\tsetCsrfToken: updateToken,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</CsrfCtx.Provider>\r\n\t);\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/favicon.fa4783d1.png\";","import { createContext, useState } from \"react\";\r\nimport AccountProvider from \"./account\";\r\nimport CsrfContextProvider from \"./CsrfToken\";\r\n\r\n// Creates a context for reciperesults\r\nexport const RecipeResultsCtx = createContext({\r\n\tmoreRecipesLink: \"\", // Link to fetch more recipes\r\n\tsetAddRecipesLink: (link) => {}, // set Recipes link\r\n\texclusions: [\"\"],\r\n\tupdateExclusions: (newExclusions) => {},\r\n\tresults: [\r\n\t\t// array of recipes\r\n\t\t{\r\n\t\t\turi: \"\",\r\n\t\t\tname: \"No Recipe Name Available\",\r\n\t\t\timage: require(\"../../assets/favicon.png\"),\r\n\t\t\tingredients: [\"\"],\r\n\t\t\tsource: \"\"\r\n\t\t},\r\n\t],\r\n\tgetRecipes: (recipeList) => {}, // Create a list of recipes\r\n\taddRecipes: (recipeList, link) => {}, // Add recipes to the current list\r\n\tisLoading: false,\r\n\tsetIsLoading: (boolean) => {}\r\n});\r\n\r\n/**\r\n * Component only used for managing context for the whole app\r\n * \r\n * @param {*} props \r\n * @returns Child Elements\r\n */\r\nexport default function ContextProvider(props) {\r\n\r\n\t// Array of recipes\r\n\tconst [recipes, setRecipes] = useState([\r\n\t\t{\r\n\t\t\turi: \"\",\r\n\t\t\tname: \"No Recipe Name Available\",\r\n\t\t\timage: \"\",\r\n\t\t\tingredients: [\"None\"],\r\n\t\t\tsource: \"\",\r\n\t\t},\r\n\t]);\r\n\r\n\tconst [excluded, setExcluded] = useState([]);\r\n\r\n\t/**\r\n\t * Updates the `excluded` state\r\n\t * \r\n\t * @param {string[]} newExcludeState \r\n\t */\r\n\tfunction changeExcluded(newExcludeState) {\r\n\t\tsetExcluded(newExcludeState);\r\n\t}\r\n\r\n\t// link to recipes\r\n\tconst [addRecipesLink, setAddRecipesLink] = useState(\"\");\r\n\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\t/**\r\n\t * Sets link to fetch more recipes\r\n\t *\r\n\t * @param {string} link\r\n\t */\r\n\tfunction setAddLink(link) {\r\n\t\tsetAddRecipesLink(link);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an array with recipes\r\n\t *\r\n\t * @param {Array<{\r\n\t * \turi: string,\r\n\t *  name: string,\r\n\t *  image: string,\r\n\t *  ingredients: Array<string>,\r\n\t *  source: string\r\n\t * }>} recipeList\r\n\t */\r\n\tfunction GetRecipes(recipeList) {\r\n\t\tif (recipeList[0].uri != \"\") {\r\n\t\t\tsetRecipes([\r\n\t\t\t\t{\r\n\t\t\t\t\tid: \"\",\r\n\t\t\t\t\tname: \"No Recipe Name Available\",\r\n\t\t\t\t\timage: \"\",\r\n\t\t\t\t\tingredients: [\"None\"],\r\n\t\t\t\t\tsource: \"\",\r\n\t\t\t\t},\r\n\t\t\t]);\r\n\t\t\t\r\n            let newState = recipeList;\r\n            setRecipes(newState);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a new array that adds a new recipes\r\n\t * to the current list and updates link to\r\n\t * fetch more recipes\r\n\t *\r\n\t * @param {Array<{\r\n\t * \turi: string\r\n\t *  name: string,\r\n\t *  image: string,\r\n\t *  ingredients: Array<string>,\r\n\t *  source: string\r\n\t * }>} recipeList\r\n\t * @param {string} link\r\n\t */\r\n\tfunction addRecipes(recipeList, link) {\r\n\t\tlet newState = [];\r\n\r\n\t\tfor (let i = 0; i < recipes.length; i++) {\r\n\t\t\tnewState.push(recipes[i]);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < recipeList.length; i++) {\r\n\t\t\tnewState.push(recipeList[i]);\r\n\t\t}\r\n\r\n\t\tsetRecipes(newState);\r\n\t\tsetAddLink(link);\r\n\t}\r\n\r\n\t/**\r\n\t * Wraps the whole app in a context provider\r\n\t */\r\n\treturn (\r\n\t\t<CsrfContextProvider>\r\n\t\t\t<AccountProvider>\r\n\t\t\t\t<RecipeResultsCtx.Provider\r\n\t\t\t\t\tvalue={{\r\n\t\t\t\t\t\tmoreRecipesLink: addRecipesLink,\r\n\t\t\t\t\t\texclusions: excluded,\r\n\t\t\t\t\t\tupdateExclusions: changeExcluded,\r\n\t\t\t\t\t\tresults: recipes,\r\n\t\t\t\t\t\tgetRecipes: GetRecipes,\r\n\t\t\t\t\t\tsetAddRecipesLink: setAddLink,\r\n\t\t\t\t\t\taddRecipes: addRecipes,\r\n\t\t\t\t\t\tisLoading: isLoading,\r\n\t\t\t\t\t\tsetIsLoading: setIsLoading\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{props.children}\r\n\t\t\t\t</RecipeResultsCtx.Provider>\r\n\t\t\t</AccountProvider>\r\n\t\t</CsrfContextProvider>\r\n\t);\r\n}\r\n"],"sourceRoot":""}