{"version":3,"sources":["src/components/RecipeList/RecipeListStyle.js","src/components/RecipeCover/RecipeCover.js","src/components/WrappingItems/WrappingItems.js","src/components/RecipeList/RecipeList.js"],"names":["recipeListStyle","StyleSheet","create","foodPicContainer","alignItems","foodPic","height","width","resizeMode","foodName","marginTop","marginBottom","fontWeight","padding","borderWidth","textAlign","RecipeCover","item","flexGrow","navigation","useNavigation","authCtx","useContext","CsrfCtx","accCtx","AccountCtx","useState","image","uri","require","recipe","loggedIn","axios","post","BACKEND","id","headers","token","credentials","withCredentials","responseType","error","navigate","source","style","name","onPress","toRecipeInfo","WrappingItems","items","renderItems","flexDirection","flexWrap","renderedItems","forEach","i","push","index","RecipeList","props","NoMoreRecipes","ingredients","recipes","setRecipes","loadedAllRecipes","setLoadedAllRecipes","loadMoreRecipes","distanceFromEnd","showEnd","undefined","setData","recipeLink","length","prevState","newState","response","method","url","content","data","results","addRecipesLink","useEffect","recArray","useWindowDimensions","numCols","Math","floor","renderItem","onEndReached","onEndReachedThreshold","extraData","loadMore","backgroundColor","fontSize"],"mappings":"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","file":"static/js/10.22ce614b.chunk.js","sourcesContent":["import { StyleSheet } from \"react-native\";\r\n\r\nexport const recipeListStyle = StyleSheet.create(\r\n    {\r\n        foodPicContainer:\r\n        {\r\n            alignItems: \"center\"\r\n        },\r\n        foodPic:\r\n        {\r\n            height: 200,\r\n            width: \"100%\",\r\n            resizeMode: \"contain\"\r\n        },\r\n\r\n        foodName:\r\n        {\r\n            marginTop: 20,\r\n            marginBottom: 20,\r\n            fontWeight: \"bold\",\r\n            padding: 10,\r\n            borderWidth: 1,\r\n            textAlign: \"center\"\r\n        }\r\n    });\r\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport axios from \"axios\";\r\nimport { useContext, useState } from \"react\";\r\nimport { Image, Pressable, Text, useWindowDimensions, View } from \"react-native\";\r\nimport { AccountCtx } from \"../../context/account\";\r\nimport { CsrfCtx } from \"../../context/CsrfToken\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\nimport { recipeListStyle } from \"../RecipeList/RecipeListStyle\";\r\n\r\n/**\r\n * Renders a recipe with in image and name\r\n *\r\n * @typedef {{\r\n *  \tid: string,\r\n * \t\tname: string,\r\n *  \timage: any,\r\n *  \tingredients: Array<string>,\r\n * \t\tsource: string\r\n * \t}} recipe\r\n *\r\n * @param {{\r\n *      item: recipe,\r\n * \t\theight: number | string,\r\n * \t\twidth: number | string,\r\n * \t\tflexGrow?: number\r\n * }} prop\r\n * @returns A recipe with image and name\r\n */\r\nexport default function RecipeCover({ item, height,  width, flexGrow}) {\r\n\r\n    const navigation = useNavigation();\r\n\tconst authCtx = useContext(CsrfCtx);\r\n\tconst accCtx = useContext(AccountCtx);\r\n\r\n\tconst [image, setImage] = useState(() => {\r\n        if (item.image !== \"\") {\r\n            return { uri: item.image, height: \"100%\", width: \"100%\" };\r\n        } else {\r\n            return require(\"../../../assets/favicon.png\");\r\n        }\r\n    });\r\n\r\n    /**\r\n\t * Adds going to be viewed recipe in recents for the logged in user\r\n\t * before going to recipe page.\r\n\t *\r\n\t * @param {recipe} recipe\r\n\t */\r\n\tasync function toRecipeInfo(recipe) {\r\n\t\tif (accCtx.loggedIn) {\r\n\t\t\ttry {\r\n\t\t\t\tawait axios.post(\r\n\t\t\t\t\t`${BACKEND}/api/setRecentRecipe/`,\r\n\t\t\t\t\t{ id: recipe.id },\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\"X-CSRFToken\": authCtx.token,\r\n\t\t\t\t\t\t\tcredentials: \"include\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\twithCredentials: true,\r\n\t\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t} catch (error) {}\r\n\t\t}\r\n\t\tnavigation.navigate(\"RecipeInfo\", { id: recipe.id });\r\n\t}\r\n\r\n\tif (item.source === \"\") {\r\n\t\treturn (\r\n\t\t\t<View key={item.id} style={{width: width, height: height, flexGrow: flexGrow}}>\r\n\t\t\t\t<View style={recipeListStyle.foodPicContainer}>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tstyle={recipeListStyle.foodPic}\r\n\t\t\t\t\t\tsource={image}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\t\t\t\t<Text style={recipeListStyle.foodName}>{item.name}</Text>\r\n\t\t\t</View>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<Pressable\r\n\t\t\t\tkey={item.id}\r\n\t\t\t\tonPress={() => toRecipeInfo(item)}\r\n\t\t\t\tstyle={{width: width, height: height, flexGrow: flexGrow}}\r\n\t\t\t>\r\n\t\t\t\t<View style={recipeListStyle.foodPicContainer}>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tstyle={recipeListStyle.foodPic}\r\n\t\t\t\t\t\tsource={image}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</View>\r\n\t\t\t\t<Text style={recipeListStyle.foodName}>{item.name}</Text>\r\n\t\t\t</Pressable>\r\n\t\t);\r\n\t}\r\n}\r\n","import { View } from \"react-native\";\r\n\r\n/**\r\n * List built for displaying items horizontally that can automatically\r\n * wraps to the next line.\r\n * \r\n * @param {{\r\n *      style?: any,\r\n *      items: any[],\r\n *      renderItems: ({item: any, index: number}) => JSX.Element\r\n * }} props \r\n * @returns Horizontal list of items that wraps to next line when\r\n * the list of items can't fit in 1 line.\r\n */\r\nexport default function WrappingItems({ items, renderItems, style }) {\r\n\r\n    function Items() {\r\n        let renderedItems = [];\r\n\t\titems.forEach((item, i) => {\r\n\t\t\trenderedItems.push(renderItems({ item: item, index: i }));\r\n\t\t});\r\n\t\treturn renderedItems;\r\n\t}\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                ...style,\r\n                flexDirection: \"row\",\r\n                flexWrap: \"wrap\",\r\n            }}\r\n        >\r\n            <Items />\r\n        </View>\r\n    );\r\n}","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n\tFlatList,\r\n\tPressable,\r\n\tScrollView,\r\n\tText,\r\n\tuseWindowDimensions,\r\n\tView,\r\n} from \"react-native\";\r\nimport BACKEND from \"../../ipaddressesports/BackEndIP\";\r\nimport RecipeCover from \"../RecipeCover/RecipeCover\";\r\nimport WrappingItems from \"../WrappingItems/WrappingItems\";\r\n\r\n/**\r\n * Renders a list of Recipes\r\n * @typedef {{\r\n *  \tid: string,\r\n * \t\tname: string,\r\n *  \timage: any,\r\n *  \tingredients: Array<string>,\r\n * \t\tsource: string\r\n * \t}} recipe\r\n *\r\n * @param {{\r\n * \trecipes: Array<recipe>,\r\n *  recipeLink?: string,\r\n *  setData?: (recipeResults: Array<recipe>, addRecipesLink: string) => void,\r\n * \tshowEnd: boolean,\r\n * }} props\r\n * @returns List of Recipes\r\n */\r\nexport default function RecipeList(props) {\r\n\t\r\n\tconst NoMoreRecipes = {\r\n\t\tid: \"\",\r\n\t\tname: \"No more Recipes\",\r\n\t\timage: \"\",\r\n\t\tingredients: [],\r\n\t\tsource: \"\",\r\n\t};\r\n\r\n\tconst [recipes, setRecipes] = useState(props.recipes);\r\n\tconst [loadedAllRecipes, setLoadedAllRecipes] = useState(false);\r\n\tconst [isMoreRecipes, setIsMoreRecipes] = useState(true);\r\n\r\n\t/**\r\n\t * Updates the `recipes` array and checks if there are more recipes to load\r\n\t *\r\n\t * When the Search page is the first screen loaded it will never `unmount` while navigating\r\n\t * to other screens then back to it because `react-navigation` it keeps previously loaded screens mounted.\r\n\t * If you go back to a previously loaded screen it will unmount the screens that you loaded after that screen.\r\n\t */\r\n\tuseEffect(() => {\r\n\t\tif (\r\n\t\t\tprops.recipes.length < 20 &&\r\n\t\t\t(props.recipeLink !== \"\" || props.recipeLink !== undefined) &&\r\n\t\t\tprops.recipes[0].id !== \"\"\r\n\t\t) {\r\n\t\t\tsetLoadedAllRecipes(true);\r\n\t\t\tsetRecipes(() => {\r\n\t\t\t\tlet recArray = props.recipes;\r\n\t\t\t\trecArray.push(NoMoreRecipes);\r\n\t\t\t\treturn recArray;\r\n\t\t\t});\r\n\t\t}\r\n\t\tsetRecipes(props.recipes);\r\n\t}, [props.recipes]);\r\n\r\n\t/**\r\n\t * Adds more recipes to the current list\r\n\t * when the user scrolls near the bottom\r\n\t *\r\n\t * @param {{distanceFromEnd: number}?} info\r\n\t */\r\n\tasync function loadMoreRecipes({ distanceFromEnd }) {\r\n\t\tif (props.showEnd || props.setData !== undefined) {\r\n\t\t\tif (\r\n\t\t\t\tprops.recipeLink != undefined &&\r\n\t\t\t\tprops.recipeLink != \"\" &&\r\n\t\t\t\t!loadedAllRecipes\r\n\t\t\t) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlet response = await axios({\r\n\t\t\t\t\t\tmethod: \"get\",\r\n\t\t\t\t\t\turl: `${BACKEND}/api/addRecipes/?nextLink=${props.recipeLink}`,\r\n\t\t\t\t\t\tresponseType: \"json\",\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tlet content = await response.data;\r\n\t\t\t\t\tprops.setData(content.results, content.addRecipesLink);\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\t// setIsMoreRecipes(false);\r\n\t\t\t\t\tsetLoadedAllRecipes(true);\r\n\t\t\t\t}\r\n\t\t\t} else if (\r\n\t\t\t\trecipes[recipes.length - 1].id != \"\" &&\r\n\t\t\t\tloadedAllRecipes &&\r\n\t\t\t\tprops.showEnd\r\n\t\t\t) {\r\n\t\t\t\tsetRecipes((prevState) => {\r\n\t\t\t\t\tlet newState = [...prevState];\r\n\t\t\t\t\tnewState.push(NoMoreRecipes);\r\n\r\n\t\t\t\t\treturn newState;\r\n\t\t\t\t});\r\n\t\t\t\t// setLoadedAllRecipes(true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the load more button to load more recipes\r\n\t *\r\n\t * @param {{loadMore: boolean}} props\r\n\t * @returns Load more button\r\n\t */\r\n\tfunction LoadMoreRecipesButton({ loadMore }) {\r\n\t\tif (loadMore) {\r\n\t\t\treturn (\r\n\t\t\t\t<Pressable\r\n\t\t\t\t\tstyle={{ backgroundColor: \"ff6e00\", padding: 5 }}\r\n\t\t\t\t\tonPress={loadMoreRecipes}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Text\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\tfontWeight: \"bold\",\r\n\t\t\t\t\t\t\tfontSize: 50,\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tLoad More\r\n\t\t\t\t\t</Text>\r\n\t\t\t\t</Pressable>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tconst width = useWindowDimensions().width;\r\n\tconst numCols = Math.floor(width / 300);\r\n\r\n\treturn (\r\n\t\t<View style={{width: \"100%\"}}>\r\n\t\t\t{numCols <= 1 ? (\r\n\t\t\t\t<FlatList\r\n\t\t\t\t\tdata={recipes}\r\n\t\t\t\t\trenderItem={({ item }) => (\r\n\t\t\t\t\t\t<RecipeCover\r\n\t\t\t\t\t\t\theight={300}\r\n\t\t\t\t\t\t\twidth={\"100%\"}\r\n\t\t\t\t\t\t\titem={item}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\tonEndReached={loadMoreRecipes}\r\n\t\t\t\t\tonEndReachedThreshold={2}\r\n\t\t\t\t\textraData={recipes}\r\n\t\t\t\t/>\r\n\t\t\t) : (\r\n\t\t\t\t<ScrollView>\r\n\t\t\t\t\t<WrappingItems\r\n\t\t\t\t\t\titems={recipes}\r\n\t\t\t\t\t\trenderItems={({ item, index }) => (\r\n\t\t\t\t\t\t\t<RecipeCover\r\n\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\theight={300}\r\n\t\t\t\t\t\t\t\twidth={300}\r\n\t\t\t\t\t\t\t\titem={item}\r\n\t\t\t\t\t\t\t\tflexGrow={1}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<LoadMoreRecipesButton\r\n\t\t\t\t\t\tloadMore={!loadedAllRecipes && props.recipeLink != \"\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</ScrollView>\r\n\t\t\t)}\r\n\t\t</View>\r\n\t);\r\n}\r\n"],"sourceRoot":""}